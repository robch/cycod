using Newtonsoft.Json;

namespace CycodBench.Models;

/// <summary>
/// Represents a candidate solution generated by the agent.
/// </summary>
public class CandidateSolution
{
    /// <summary>
    /// Gets or sets the unique identifier for the solution.
    /// </summary>
    [JsonProperty("id")]
    public string Id { get; set; } = Guid.NewGuid().ToString();

    /// <summary>
    /// Gets or sets the ID of the problem this solution is for.
    /// </summary>
    [JsonProperty("problem_id")]
    public string ProblemId { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the index of this candidate solution.
    /// </summary>
    [JsonProperty("candidate_index")]
    public int CandidateIndex { get; set; }

    /// <summary>
    /// Gets or sets the diff generated by the agent.
    /// </summary>
    [JsonProperty("diff")]
    public string Diff { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the execution time in milliseconds.
    /// </summary>
    [JsonProperty("execution_time_ms")]
    public long ExecutionTimeMs { get; set; }

    /// <summary>
    /// Gets or sets the agent logs.
    /// </summary>
    [JsonProperty("agent_logs")]
    public string AgentLogs { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the agent version.
    /// </summary>
    [JsonProperty("agent_version")]
    public string AgentVersion { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the path to the workspace directory.
    /// </summary>
    [JsonProperty("workspace_path")]
    public string WorkspacePath { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the timestamp when this solution was generated.
    /// </summary>
    [JsonProperty("timestamp")]
    public DateTimeOffset Timestamp { get; set; } = DateTimeOffset.UtcNow;

    /// <summary>
    /// Gets or sets the evaluation result for this solution.
    /// </summary>
    [JsonProperty("evaluation_result")]
    public EvaluationResult? EvaluationResult { get; set; }

    /// <summary>
    /// Gets the set of files modified by this solution.
    /// </summary>
    [JsonIgnore]
    public IEnumerable<string> ModifiedFiles
    {
        get
        {
            var modifiedFiles = new HashSet<string>();
            if (string.IsNullOrEmpty(Diff))
            {
                return modifiedFiles;
            }

            // Simple parser to extract file names from the diff
            var lines = Diff.Split('\n');
            foreach (var line in lines)
            {
                if (line.StartsWith("--- a/") || line.StartsWith("+++ b/"))
                {
                    var file = line.Substring(line.StartsWith("--- a/") ? 6 : 6);
                    modifiedFiles.Add(file);
                }
            }

            return modifiedFiles;
        }
    }
}