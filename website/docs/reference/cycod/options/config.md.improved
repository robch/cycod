# --config

The `--config` option allows you to load configuration settings from one or more YAML or INI files, giving you a flexible way to manage CYCOD settings for different scenarios.

## Syntax

```bash
cycod --config FILE1 [FILE2 [...]] [other options]
```

You can provide one or more configuration files:

```bash
cycod --config config1.yaml config2.ini [other options]
```

## Description

The `--config` option lets you load CYCOD settings from external files instead of using the default configuration files or adding each setting individually on the command line. This is especially useful for:

- Maintaining different configurations for different projects
- Sharing configuration settings across a team
- Switching between complex configurations quickly
- Keeping sensitive information like API keys in separate files

Configuration files can be in YAML or INI format and contain any valid CYCOD settings. Settings loaded with `--config` take precedence over the default configuration but can be overridden by options specified directly on the command line.

## Configuration Precedence

When using the `--config` option, it's important to understand how it fits into the overall configuration precedence:

1. Command-line options (highest priority)
2. Environment variables
3. Settings from `--config` files (later files override earlier ones)
4. Local scope configuration (`.cycod/config.json` in current directory)
5. User scope configuration (`.cycod/config.json` in user's home directory)
6. Global scope configuration (`.cycod/config.json` in system-wide location)

This means that:
- Settings in config files override local/user/global configuration
- Multiple config files can be combined, with later files overriding earlier ones
- Command-line options still override settings from config files
- Environment variables take precedence over config file settings

## Supported File Formats

### YAML Format

```yaml
app:
  preferredProvider: azure-openai
  autoSaveChatHistory: true

openai:
  chatModelName: gpt-4o

azure:
  openai:
    endpoint: https://your-azure-openai-endpoint.com
    chatDeployment: gpt-4
```

### INI Format

```ini
[app]
preferredProvider = azure-openai
autoSaveChatHistory = true

[openai]
chatModelName = gpt-4o

[azure.openai]
endpoint = https://your-azure-openai-endpoint.com
chatDeployment = gpt-4
```

## Examples

### Basic Usage

Load settings from a single configuration file:

```bash
cycod --config my-project-config.yaml --question "How do I optimize my code?"
```

### Multiple Configuration Files

Load settings from multiple files (settings from later files override earlier ones):

```bash
cycod --config base-settings.yaml project-specific.yaml --question "What's new in Python 3.11?"
```

### Combining with Command-Line Options

Mix configuration files with direct command-line options:

```bash
cycod --config team-settings.yaml --use-openai --question "Explain Docker containers"
```

In this example, settings from `team-settings.yaml` are loaded first, but the `--use-openai` option will override any provider preference specified in the configuration file.

### Using Different Formats Together

Mix YAML and INI formats if needed:

```bash
cycod --config company-settings.yaml personal-settings.ini --question "Summarize this meeting"
```

### Project-Specific Configuration

Create project-specific configuration files for different use cases:

```bash
# For development work
cycod --config dev-settings.yaml --question "Debug this error"

# For content creation
cycod --config content-settings.yaml --question "Write a blog post about AI"
```

### Team Settings with Personal Overrides

Create a layered configuration approach for team environments:

```bash
cycod --config team-shared.yaml personal-overrides.yaml --question "Review this code"
```

### Environment-Specific Configurations

Switch between development, staging, and production environments easily:

```bash
# Development environment
cycod --config base.yaml dev.yaml --question "What's wrong with this code?"

# Production environment
cycod --config base.yaml prod.yaml --question "Monitor system performance"
```

## Common Configuration File Patterns

### Provider Selection

```yaml
# openai-config.yaml
app:
  preferredProvider: openai

openai:
  chatModelName: gpt-4o
```

### Azure OpenAI Setup

```yaml
# azure-config.yaml
app:
  preferredProvider: azure-openai

azure:
  openai:
    endpoint: https://your-azure-openai-endpoint.com
    chatDeployment: gpt-4
```

### Sensitive Information

```yaml
# secrets.yaml (keep this file private)
openai:
  apiKey: sk-your-api-key

azure:
  openai:
    apiKey: your-azure-api-key
```

### Behavior Settings

```yaml
# behavior.yaml
app:
  autoSaveChatHistory: true
  autoSaveTrajectory: true
  historyDirectory: "/path/to/history"
  quietMode: true
  interactiveMode: false
```

## Best Practices

1. **Security**: Keep sensitive information like API keys in secure configuration files with appropriate permissions.
2. **Organization**: Group related settings in different configuration files for better organization.
3. **Defaults**: Use configuration files for commonly used settings and override specific options via command line as needed.
4. **Documentation**: Include comments in your YAML/INI files to document what each setting does.
5. **Version Control**: Consider which configuration files should be included in version control and which should be kept private (like those containing API keys).
6. **File Structure**: Break down complex configurations into multiple files that can be mixed and matched.
7. **Environment-Specific**: Create different configuration files for different environments (dev, test, prod).
8. **Config Layering**: Use multiple files in sequence to create a layered configuration approach, with common settings followed by specific overrides.

## Related Options

- [`--profile`](profile.md): Load a specific profile's configuration from `.cycod/profiles/NAME.yaml`
- [`config set`](../config/set.md): Set individual configuration values
- [`cycod config list`](../config/list.md): List all configuration settings