{"role":"system","content":"You are a helpful AI assistant.\r\n\r\n## Operating System \u002B Long running processes \u002B Shell commands\r\n\r\nThere are two ways to run/start processes/commands:\r\n- Using the \u0060RunBashCommand\u0060, \u0060RunCmdCommand\u0060, or \u0060RunPowershellCommand\u0060 functions for direct execution.\r\n- Using the \u0060StartLongRunningProcess\u0060 function for background processes.\r\n\r\n### Long running processes\r\n\r\nStartLongRunningProcess returns a process cookie that can be used to manage the background process. You can use this with:\r\n- GetLongRunningProcessOutput to retrieve output from the process while it runs.\r\n- IsLongRunningProcessRunning to check if the process is still active.\r\n- KillLongRunningProcess to terminate the process if needed.\r\n- ListLongRunningProcesses to see all active background processes started using StartLongRunningProcess.\r\n\r\n### Shell commands\r\n\r\nWe\u0027re running on Windows. Bash commands are run using Git bash, and thus, you can\u0027t install packages using apt or other Linux-specific package managers.\r\n\r\nCommands are run in a \u0022persistent\u0022 shell, meaning, changes to working directory, environment variables, and other state will persist across commands. This means that if you change directories or set environment variables, those changes will be remembered in subsequent commands. If you\u0027re not 100% sure what directory you\u0027re in, you can always check with:\r\n- \u0060bash\u0060 (Bash)\r\n- \u0060Get-Location\u0060 (Powershell)\r\n- \u0060cd\u0060 (CMD)\r\n\r\nTo get a new shell, you can use the \u0060exit\u0060 command to close all persistent shells. Your next command will re-open a new shell.\r\n\r\n### Notes on Directories\r\n1. The working directory is shell-specific. Bash shell\u0027s current directory is/can be different from Powershell or CMD shells\u0027 current directories.\r\n2. Shell-specific working directories have no impact on any tools (e.g. ListFiles, ViewView, StrReplace). These tools always use the working directory when we started this conversation.\r\n\r\n## Thinking\r\n\r\nYour thinking should be thorough, so it\u0027s fine if it\u0027s very long.\r\n\r\nBefore you take any action to change files or folders, use the **think** tool as a scratchpad to:\r\n- Consider the changes you are about to make in detail and how they will affect the codebase.\r\n- Figure out which files need to be updated. \r\n- Reflect on the changes already made and make sure they are precise and not deleting working code.\r\n\r\nHere are some examples of what to iterate over inside the think tool:\r\n\u003Cthink_tool_example_1\u003E\r\nAn issue needs to be addressed in the codebase.\r\n- Get a list of files that need to be updated. \r\n    * Find the files related to the issue.\r\n    * Read the files to get the parts that need to be updated\r\n- Build the code to see if to is buildable.\r\n- Create tests to check if the issue exists\r\n    * Check if there is an existing test that can be updated first. \r\n    * If none exists, check if there are any tests and add a new test there for this issue.\r\n    * If there are no tests, create a new test script for this issue only.\r\n- Run the test to see if it fails. \r\n- Edit the files to fix the issue. Make minimal changes to the files to fix the issue. Reason out why the change is needed and can a smaller change be made.\r\n- Build the code and fix any NEW build errors that are introduced by the changes.\r\n- Run the test you created to see if it passes. Do NOT modify any code to get any test other than the new one to pass.\r\n- Plan: \r\n1. List out the files that need to be updated\r\n2. Read the files to get the parts that need to be updated\r\n3. Build the code to see if to is buildable\r\n3. Create test\r\n4. Run the test to see if it fails\r\n5. Fix the issue. Rebuild, fix new build errors iteratively.\r\n6. Run the test to see if it passes.\r\n\u003C/think_tool_example_1\u003E\r\n\r\n\r\n"}
{"role":"user","content":"see in cycod how there are many things that can be \u0027added\u0027/\u0027removed\u0027/etc... like prompts, config values, mcps etc? i want there to be a way to add custom \u0027tools\u0027/\u0027commands\u0027, but for now the only one of those would be wrapping up a shell command/script. currently, the testframework we have (under cycodt) has a way of specifying how to run scripts, have intput to them, etc... we\u0027ll want something a lot like that, but not from a test perspective... only from the \u0027run it\u0027 perspective. and we\u0027d want the ability for these to have \u0027descriptions\u0027 and \u0027parameter names/descriptions\u0027 so that we can use them as LLM tools in function calling, much like MCPs are used, or how the built in tools we have under **/functioncallinggtools/**/*.cs ... anyway, don\u0027t do any code mods yet, but i want to talk with you about this idea... look around, see what i\u0027m talking about from the info below, and let\u0027s discuss.\r\nCYCOD - AI-powered Developer CLI, Version 1.0.0-DEV-r-20250821.1440\u002B2c82de13a3d2b7d132471bfcdd4148496dd1bfbf\r\nCopyright(c) 2025, Rob Chambers. All rights reserved.\r\n\r\n## \u0060cycod help -\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD STDIN (\u0060-\u0060)\r\n\r\n  The \u0060-\u0060 symbol is used to represent the standard input (stdin) for file\r\n  content. When you use \u0060-\u0060 as a file name, CYCOD will read from the standard\r\n  input instead of a file. This is useful when you want to pipe content\r\n  directly into CYCOD from another command or script.\r\n\r\nUSAGE: cycod - [FILE1 [FILE2]] [...]\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: Pipe output from git diff into CYCOD and summarize\r\n\r\n    git diff | cycod --input \u0022summarize these changes:\u0022 @-\r\n\r\n  EXAMPLE 2: Pipe output from gh issues into CYCOD and summarize in a table\r\n\r\n    gh issue list | cycod --input \u0022summarize the issues in a table\u0022 @-\r\n\r\nSEE ALSO\r\n\r\n  cycod help\r\n  cycod help examples\r\n  cycod help options\r\n\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help alias\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD ALIAS COMMANDS\r\n\r\n  These commands allow you to manage CYCOD command aliases.\r\n\r\nUSAGE: cycod alias list [--scope]\r\n   OR: cycod alias get ALIAS_NAME [--scope]\r\n   OR: cycod alias add ALIAS_NAME CONTENT [--scope]\r\n   OR: cycod alias delete ALIAS_NAME [--scope]\r\n\r\nOPTIONS\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    Use global scope (all users)\r\n    --user, -u      Use user scope (current user)\r\n    --local, -l     Use local scope (default for most commands)\r\n    --any, -a       Include aliases from all scopes (default for \u0027list\u0027 command)\r\n\r\nCOMMANDS\r\n\r\n    list            List all available aliases\r\n    get             Display the content of a specific alias\r\n    add             Create a new alias with raw content (no syntax validation)\r\n    delete          Delete an alias\r\n\r\nSEE ALSO\r\n\r\n  cycod help alias list\r\n  cycod help alias get\r\n  cycod help alias add\r\n  cycod help alias delete\r\n  cycod help aliases\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help aliases\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD ALIASES\r\n\r\n  Use aliases to save and reuse sets of options for common commands.\r\n\r\nUSAGE: cycod [...] --save-alias ALIAS\r\n   OR: cycod [...] --save-local-alias ALIAS\r\n   OR: cycod [...] --save-user-alias ALIAS\r\n   OR: cycod [...] --save-global-alias ALIAS\r\n   OR: cycod [...] --ALIAS\r\n\r\nOPTIONS\r\n\r\n  SAVING ALIASES\r\n\r\n    --save-alias ALIAS          Same as --save-local-alias\r\n    --save-local-alias ALIAS    Save the current options under the specified alias name in the local scope\r\n    --save-user-alias ALIAS     Save the current options under the specified alias name in the user scope\r\n    --save-global-alias ALIAS   Save the current options under the specified alias name in the global scope\r\n\r\n  USING ALIASES\r\n\r\n    --ALIAS                     Use the options saved under the specified alias name.\r\n                                Example: cycod --get-time\r\n\r\n  SCOPE SEARCH ORDER\r\n  \r\n    When looking for an alias, CycoD searches in the local scope first, then the user scope,\r\n    and finally the global scope.\r\n\r\nSEE ALSO\r\n\r\n  cycod help\r\n  cycod help examples\r\n  cycod help options\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help config\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD CONFIG COMMANDS\r\n\r\n  The \u0027config\u0027 commands allow you to manage CYCOD configuration settings.\r\n\r\n  CYCOD supports three configuration scopes:\r\n    - Global: Applied to all users on the computer\r\n    - User: Applied to current user across all folders\r\n    - Local: Applied only to the current directory\r\n\r\nUSAGE: cycod config list [--scope]\r\n   OR: cycod config get KEY [--scope]\r\n   OR: cycod config set KEY VALUE [--scope]\r\n   OR: cycod config clear KEY [--scope]\r\n   OR: cycod config add KEY VALUE [--scope]\r\n   OR: cycod config remove KEY VALUE [--scope]\r\n\r\nOPTIONS\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    Use global scope (all users)\r\n    --user, -u      Use user scope (current user)\r\n    --local, -l     Use local scope (default for most commands)\r\n    --any, -a       Include settings from all scopes (default for \u0027list\u0027 command)\r\n\r\nCOMMANDS\r\n\r\n    list            List configuration settings\r\n    get             Get the value of a configuration setting\r\n    set             Set the value of a configuration setting\r\n    clear           Clear a configuration setting\r\n    add             Add a value to a list setting\r\n    remove          Remove a value from a list setting\r\n\r\nSEE ALSO\r\n\r\n  cycod help config list\r\n  cycod help config get\r\n  cycod help config set\r\n  cycod help config clear\r\n  cycod help config add\r\n  cycod help config remove\r\n  cycod help configuration\r\n  cycod help use openai\r\n  cycod help use azure openai\r\n  cycod help use github copilot\r\n  cycod help use anthropic\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help configuration\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD CONFIGURATION FEATURES\r\n\r\n  CycoD offers multiple configuration features for different needs:\r\n  - Aliases: Command-line shortcuts\r\n  - Prompts: In-chat text templates\r\n  - Configs: Persistent settings\r\n  - Profiles: Bundled configurations\r\n\r\n  All features use a common scoping system (local, user, global).\r\n\r\nSCOPING SYSTEM\r\n\r\n  LOCAL SCOPE\r\n    - Stored in .cycod/[feature] directory of current location\r\n    - Only applies to the current directory\r\n    - Takes precedence over user and global scopes\r\n\r\n  USER SCOPE\r\n    - Stored in user\u0027s .cycod/[feature] directory\r\n    - Applies to the current user in any directory\r\n    - Takes precedence over global scope\r\n\r\n  GLOBAL SCOPE\r\n    - Stored in system-wide configuration\r\n    - Available to all users on the system\r\n\r\nALIASES\r\n\r\n  PURPOSE\r\n    Command-line shortcuts for launching CycoD with specific parameters.\r\n\r\n  USAGE\r\n    cycod --aliasname\r\n    \r\n  CREATION\r\n    cycod alias add ALIAS_NAME \u0022COMMAND\u0022          Local scope (default)\r\n    cycod alias add ALIAS_NAME \u0022COMMAND\u0022 --user   User scope\r\n    cycod alias add ALIAS_NAME \u0022COMMAND\u0022 --global Global scope\r\n\r\n  MANAGEMENT\r\n    cycod alias list                          List all aliases\r\n    cycod alias get ALIAS_NAME                Show an alias\r\n    cycod alias delete ALIAS_NAME             Delete an alias\r\n\r\nCUSTOM PROMPTS\r\n\r\n  PURPOSE\r\n    Text templates for quick insertion into chat conversations.\r\n\r\n  USAGE\r\n    In a chat session: /promptname\r\n    \r\n  CREATION\r\n    cycod prompt create NAME \u0022TEXT\u0022           Local scope (default)\r\n    cycod prompt create NAME \u0022TEXT\u0022 --user    User scope\r\n    cycod prompt create NAME \u0022TEXT\u0022 --global  Global scope\r\n\r\n  MANAGEMENT\r\n    cycod prompt list                         List all prompts\r\n    cycod prompt get PROMPT_NAME              Show a prompt\r\n    cycod prompt delete PROMPT_NAME           Delete a prompt\r\n\r\nCONFIG FILES\r\n\r\n  PURPOSE\r\n    Store persistent settings for the application.\r\n\r\n  MANAGEMENT\r\n    cycod config list                         List all settings\r\n    cycod config get KEY                      Show a setting\r\n    cycod config set KEY VALUE                Change a setting\r\n    cycod config clear KEY                    Remove a setting\r\n    cycod config add KEY VALUE                Add to a list setting\r\n    cycod config remove KEY VALUE             Remove from a list setting\r\n\r\n  SCOPE OPTIONS\r\n    --local, -l     Local scope (default for most commands)\r\n    --user, -u      User scope (current user)\r\n    --global, -g    Global scope (all users)\r\n    --any, -a       All scopes (default for \u0027list\u0027 and \u0027get\u0027 commands)\r\n\r\nPROFILES\r\n\r\n  PURPOSE\r\n    Collections of settings that can be loaded as a unit.\r\n\r\n  USAGE\r\n    cycod --profile PROFILENAME\r\n    \r\n  CREATION\r\n    cycod profile create NAME                     Local scope (default)\r\n    cycod profile create NAME --user              User scope\r\n    cycod profile create NAME --global            Global scope\r\n    \r\n  MANAGEMENT\r\n    cycod profile list                            List all profiles\r\n    cycod profile get PROFILE_NAME                Show a profile\r\n    cycod profile delete PROFILE_NAME             Delete a profile\r\n    \r\n  STORAGE\r\n    Profiles are YAML files stored in:\r\n    - .cycod/profiles/ (local)\r\n    - ~/.cycod/profiles/ (user)\r\n    - /etc/cycod/profiles/ (global, on Linux/macOS)\r\n    - C:\\ProgramData\\cycod\\profiles\\ (global, on Windows)\r\n\r\nWHEN TO USE EACH FEATURE\r\n\r\n  ALIASES\r\n    When you want to save command-line options for development workflows.\r\n    Example: cycod --react-dev (includes React expertise \u002B auto-approve file ops)\r\n\r\n  PROMPTS\r\n    When you need specialized analysis templates during development.\r\n    Example: /code-review (comprehensive security and performance analysis)\r\n\r\n  CONFIG\r\n    For persistent application settings and team configurations.\r\n    Example: cycod config set OPENAI_CHAT_MODEL_NAME gpt-5-mini\r\n\r\n  PROFILES\r\n    When you want to switch between development environments.\r\n    Example: cycod --profile production (different model \u002B stricter function controls)\r\n\r\nSEE ALSO\r\n\r\n  cycod help alias\r\n  cycod help prompt\r\n  cycod help config\r\n  cycod help options\r\n  cycod help settings\r\n  cycod help use github copilot\r\n  cycod help use anthropic\r\n  cycod help use azure openai\r\n  cycod help use bedrock\r\n  cycod help use gemini\r\n  cycod help use grok\r\n  cycod help use openai\r\n  cycod help function calls\r\n  cycod help timeouts\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help examples\u0060\r\n\r\n\u0060\u0060\u0060\r\nUSAGE: cycod [...]\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: Analyze a codebase and suggest improvements\r\n\r\n    cycod --question \u0022Analyze this codebase structure and suggest architectural improvements\u0022\r\n\r\n  EXAMPLE 2: Automatically approve file operations for code analysis\r\n\r\n    cycod --question \u0022Analyze this codebase structure and suggest architectural improvements\u0022 --auto-approve read\r\n\r\n  EXAMPLE 3: Create documentation for multiple code files\r\n  \r\n    cycod --inputs \u0022Generate README.md documentation for this project\u0022 \u0022What are the main API endpoints and how do they work?\u0022\r\n    \r\n  EXAMPLE 4: Continue a code review session\r\n\r\n    cycod --continue --question \u0022Now check the security aspects of this implementation\u0022\r\n\r\n  EXAMPLE 5: Save development session for team sharing\r\n\r\n    cycod --question \u0022Review this API design and suggest improvements\u0022 --output-chat-history team-review.jsonl\r\n\r\n  EXAMPLE 6: Continue a code review from saved session\r\n\r\n    cycod --input-chat-history team-review.jsonl --question \u0022What about the error handling in these endpoints?\u0022\r\n\r\n  EXAMPLE 7: Create detailed development session log\r\n  \r\n    cycod --question \u0022Help me refactor this legacy code to use modern patterns\u0022 --output-trajectory refactoring-session.md\r\n\r\n  EXAMPLE 8: Add domain-specific expertise to your AI assistant\r\n  \r\n    cycod --add-system-prompt \u0022You are a senior DevOps engineer specializing in Kubernetes, Docker, and CI/CD pipelines\u0022\r\n\r\n  EXAMPLE 9: Create focused documentation from code analysis\r\n  \r\n    cycod --add-user-prompt \u0022Generate detailed README.md documentation with usage examples for any code you analyze\u0022\r\n    \r\n  EXAMPLE 10: Use foreach variables to run multiple versions of a command\r\n  \r\n    cycod --foreach var name in Alice Bob Charlie --input \u0022Hello, {name}!\u0022\r\n    \r\n  EXAMPLE 11: Combine multiple foreach variables (creates all combinations)\r\n  \r\n    cycod --foreach var language in Python JavaScript Go --foreach var topic in \u0022functions\u0022 \u0022loops\u0022 --input \u0022Show me how to use {topic} in {language}\u0022\r\n\r\n  EXAMPLE 12: Use numeric range with foreach\r\n  \r\n    cycod --foreach var day in 1..7 --input \u0022What day of the week is day 21?\u0022\r\n\r\n  EXAMPLE 13: Process multiple commands in parallel with threads\r\n  \r\n    cycod --threads 4 --foreach var topic in \u0022sorting algorithms\u0022 \u0022data structures\u0022 \u0022design patterns\u0022 \u0022algorithms\u0022 --question \u0022Explain {topic} concisely\u0022\r\n\r\n  EXAMPLE 14: Using slash commands in interactive mode\r\n  \r\n    cycod\r\n    \u003E What are the largest files in this directory?\r\n    Assistant: You can find the largest files using the following command...\r\n    \u003E /files *.cs\r\n    \u003E /find \u0022class Program\u0022\r\n    \u003E /search Python best practices\r\n    \r\n  EXAMPLE 15: Using Playwright MCP for web automation without registration\r\n  \r\n    cycod --with-mcp \u0022npx @playwright/mcp@latest\u0022\r\n    \r\n  EXAMPLE 16: Using both registered MCP servers and external Playwright MCP\r\n  \r\n    cycod mcp add playwright --command \u0022npx\u0022 --args \u0022@playwright/mcp@latest\u0022\r\n    cycod --use-mcps --with-mcp \u0022npx @playwright/mcp@latest --headless\u0022\r\n    \r\nSEE ALSO\r\n\r\n  cycod help options\r\n\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help github\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD GITHUB COMMANDS\r\n\r\n  These commands allow you to login to GitHub and see what models are available\r\n  for use with CYCOD.\r\n\r\nUSAGE: cycod github login\r\n   OR: cycod github models\r\n\r\nCOMMANDS\r\n\r\n  login           Authenticate with GitHub\r\n  models          List available models on GitHub\r\n\r\nSEE ALSO\r\n\r\n  cycod help github login\r\n  cycod help github models\r\n  cycod help use github\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help help\u0060\r\n\r\n\u0060\u0060\u0060\r\nUSAGE: cycod help topics\r\n   OR: cycod help topics --expand\r\n   OR: cycod help find \u0022TERMS\u0022\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help image\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD IMAGE SUPPORT\r\n\r\n  CYCOD supports including images in your conversations with AI models that support\r\n  multimodal input. Images can be provided through command line options or slash \r\n  commands during interactive sessions.\r\n\r\nCOMMAND LINE USAGE\r\n\r\n  --image FILE.png [FILE2.jpg ...]     Include one or more image files in the conversation\r\n  --image \u0022*.png\u0022                      Use glob patterns to include multiple images\r\n\r\nSLASH COMMAND USAGE\r\n\r\n  /image FILE.png                      Add an image file to the current conversation\r\n  /image \u0022*.jpg\u0022                       Use glob patterns to add multiple images\r\n\r\nSUPPORTED FORMATS\r\n\r\n  The following image formats are supported:\r\n  - JPEG (.jpg, .jpeg)\r\n  - PNG (.png)  \r\n  - GIF (.gif)\r\n  - BMP (.bmp)\r\n  - WebP (.webp)\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: Describe an image from command line\r\n\r\n    cycod --image screenshot.png --input \u0022What\u0027s in this image?\u0022\r\n\r\n  EXAMPLE 2: Include multiple images using glob patterns\r\n\r\n    cycod --image \u0022*.png\u0022 --input \u0022Compare these images\u0022\r\n\r\n  EXAMPLE 3: Add image during interactive session\r\n\r\n    cycod\r\n    User: Hello!\r\n    Assistant: Hello! How can I help you today?\r\n    User: /image diagram.jpg\r\n    Assistant: Added image file \u0027diagram.jpg\u0027\r\n    User: Can you explain this diagram?\r\n\r\n  EXAMPLE 4: Add multiple images with glob patterns\r\n\r\n    /image screenshots/*.png\r\n    Added image files \u0027screen1.png\u0027, \u0027screen2.png\u0027, \u0027screen3.png\u0027\r\n\r\nNOTES\r\n\r\n  - Images are processed by the AI model along with your text prompts\r\n  - Different AI models may have varying levels of image understanding capabilities\r\n  - Large images may affect token usage and response time\r\n  - Images must exist on your local file system\r\n\r\nSEE ALSO\r\n\r\n  cycod help options\r\n  cycod help slash commands\r\n  cycod help examples\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help mcp\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD MCP COMMANDS\r\n\r\n  These commands allow you to manage Model Context Protocol (MCP) server registrations.\r\n\r\n  MCP servers provide capabilities like web automation (Playwright), database access, \r\n  API integrations, file system operations, or tool execution.\r\n\r\nUSAGE: cycod mcp list [--scope]\r\n   OR: cycod mcp get SERVER_NAME [--scope]\r\n   OR: cycod mcp add SERVER_NAME --command \u0022COMMAND ARGS\u0022 [--scope]\r\n   OR: cycod mcp add SERVER_NAME --url URL [--scope]\r\n   OR: cycod mcp remove SERVER_NAME [--scope]\r\n\r\nOPTIONS\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    Manage registrations from global scope (all users)\r\n    --user, -u      Manage registrations from user scope (current user)\r\n    --local, -l     Manage registrations from local scope (default for most commands)\r\n    --any, -a       Manage registrations from all scopes (default for \u0027list\u0027 and \u0027get\u0027 commands)\r\n\r\nCOMMANDS\r\n\r\n    list            List all registered MCP servers\r\n    get             Display the details of a specific registered MCP server\r\n    add             Create a new MCP server registration\r\n    remove          Delete an MCP server registration\r\n\r\nSEE ALSO\r\n\r\n  cycod help options\r\n  cycod help mcp examples\r\n  cycod help mcp list\r\n  cycod help mcp get\r\n  cycod help mcp add\r\n  cycod help mcp remove\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help options\u0060\r\n\r\n\u0060\u0060\u0060\r\nUSAGE: cycod [...]\r\n\r\n  MODEL INPUTS\r\n    --system-prompt \u0022PROMPT|NAME\u0022         Replace system prompt given to AI model\r\n    --add-system-prompt \u0022PROMPT|NAME\u0022     Add text to the system prompt, to re-inforce critical instructions\r\n    --add-user-prompt \u0022PROMPT|NAME\u0022       Add user prompt(s), prepended to the first input/question/instruction\r\n    --prompt \u0022NAME\u0022                       Alias for --add-user-prompt\r\n\r\n    --input \u0022LINE1\u0022 \u0022LINE2\u0022 ...           Provide one or more lines of inputs to the AI model.\r\n    --question ...                        Alias for --interactive false --quiet --input\r\n    --instruction ...                     Alias for --input\r\n\r\n    --inputs \u0022INPUT1\u0022 \u0022INPUT2\u0022 ...        Provide one or more inputs, sequentially, to the AI model.\r\n    --questions ...                       Alias for --interactive false --quiet --inputs\r\n    --instructions ...                    Alias for --inputs\r\n    \r\n    --image FILE [FILE2 ...]              Include image files in the conversation (supports glob patterns)\r\n\r\n    --use-templates TRUE/FALSE            Use template processing in model inputs above (default: true)\r\n    --no-templates                        Alias for --use-templates false\r\n\r\n    --use-mcps [NAME1 [...]]              Use pre-registered Model Context Protocol servers (default name: *)\r\n                                      Example: --use-mcps playwright filesystem\r\n    --with-mcp \u0022COMMAND [ARGS...]\u0022        Use an external Model Context Protocol server wo/ registration  \r\n                                      Example: --with-mcp \u0022npx @playwright/mcp@latest\u0022\r\n    --no-mcps                             Do not use Model Context Protocol servers\r\n\r\n  CHAT HISTORY                            (see: cycod help chat history)\r\n    --continue                            Continue the most recent chat history\r\n    --chat-history [FILE]                 Load from and save to the same JSONL file\r\n    --input-chat-history [FILE]           Load chat history from the specified JSONL file\r\n    --output-chat-history [FILE]          Save chat history to the specified file\r\n    --output-trajectory [FILE]            Save chat history in human readable trajectory format\r\n\r\n  FUNCTION CALLING                        (see: cycod help function calls)\r\n    --auto-approve NAME1 [...]            Automatically approve function calls by name\r\n    --auto-approve read/write/run/*       Automatically approve all function calls of the specified type\r\n    --auto-deny NAME1 [...]               Automatically deny function calls by name\r\n    --auto-deny read/write/run/*          Automatically deny all function calls of the specified type\r\n\r\n  MODEL OPTIONS\r\n    --max-prompt-tokens TOKENS            Maximum prompt token target (managed by CYCOD)\r\n    --max-output-tokens TOKENS            Maximum AI output tokens (provided to AI model)\r\n    --max-tool-tokens TOKENS              Maximum tool output tokens target (managed by CYCOD)\r\n    --max-chat-tokens TOKENS              Maximum total chat tokens target (managed by CYCOD)\r\n\r\n  MODEL PROVIDERS\r\n    --use-copilot                         Prefer use of GitHub Copilot\r\n    --use-azure-openai                    Prefer use of Azure OpenAI API as the chat provider\r\n    --use-anthropic                       Prefer use of Anthropic Claude\r\n    --use-bedrock                         Prefer use of AWS Bedrock\r\n    --use-gemini                          Prefer use of Google Gemini\r\n    --use-grok                            Prefer use of Grok (x.ai)\r\n    --use-openai                          Prefer use of OpenAI API as the chat provider\r\n\r\n  ANTHROPIC OPTIONS                       (see: cycod help use anthropic)\r\n    --anthropic-api-key KEY               Use a specific API key for Anthropic\r\n    --anthropic-model-name NAME           Use a specific chat model (default: claude-sonnet-4)\r\n\r\n  AWS BEDROCK                             (see: cycod help use aws bedrock)\r\n    --aws-bedrock-api-key KEY             Use a specific authentication key\r\n    --aws-bedrock-api-secret SECRET       Use a specific authentication secret\r\n    --aws-bedrock-region REGION           Use a specific AWS region for Bedrock\r\n    --aws-bedrock-model-id ID             Use a specific Bedrock model ID\r\n\r\n  AZURE OPENAI OPTIONS                    (see: cycod help use azure openai) \r\n    --azure-openai-api-key KEY            Use a specific authentication key\r\n    --azure-openai-endpoint URL           Use a specific API endpoint\r\n    --azure-openai-chat-deployment NAME   Use a specific chat model deployment\r\n\r\n  GOOGLE GEMINI                           (see: cycod help use gemini)\r\n    --google-gemini-api-key KEY           Use a specific API key\r\n    --google-gemini-model-id ID           Use a specific Gemini model ID\r\n\r\n  GROK OPTIONS                            (see: cycod help use grok)\r\n    --grok-api-key KEY                    Use a specific API key\r\n    --grok-endpoint URL                   Use a specific API endpoint (default: https://api.x.ai/v1)\r\n    --grok-model-name NAME                Use a specific model (default: grok-3)\r\n\r\n  OPENAI OPTIONS                          (see: cycod help use openai)\r\n    --openai-api-key KEY                  Use a specific API key\r\n    --openai-chat-model-name NAME         Use a specific chat model (default: gpt-4o)\r\n\r\n  COPILOT OPTIONS                         (see: cycod help use github copilot)\r\n    --copilot-model-name NAME             Use a specific model by name (default: claude-sonnet-4)\r\n    --copilot-api-endpoint URL            Use a specific API endpoint (default: https://api.githubcopilot.com)\r\n    --github-token TOKEN                  Use a specific GitHub authentication token\r\n\r\n  CONFIGURATION\r\n    --config FILE1 [FILE2 [...]]          Load configuration from YAML or INI files\r\n    --profile NAME                        Load a specific profile\u0027s configuration from .cycod/profiles/NAME.yaml\r\n      \r\n  ALIASES                                 (see: cycod help aliases)\r\n    --save-alias ALIAS                    Same as --save-user-alias\r\n    --save-local-alias ALIAS              Save current options as an alias in local scope\r\n    --save-user-alias ALIAS               Save current options as an alias in user scope\r\n    --save-global-alias ALIAS             Save current options as an alias in global scope\r\n    --{ALIAS}                             Use options saved under the specified alias name\r\n\r\n  VARIABLES\r\n    --var NAME=VALUE                      Set a variable for template substitution\r\n    --vars NAME1=VALUE1 NAME2=VALUE2 ...  Set multiple variables for template substitution\r\n    --foreach var NAME in VALUE1 [...]    Define a loop variable with multiple values (expands to multiple commands)\r\n                                      Example: --foreach var lang in Python JavaScript Go\r\n    --foreach var NAME in @FILE           Define a loop variable with values from a file (one per line)\r\n    --foreach var NAME in #..#            Define a loop variable with a numeric range (e.g., 1..5)\r\n\r\n  ADDITIONAL OPTIONS\r\n    --interactive TRUE/FALSE              Allow interactive use (default: true, unless stdin redirected)\r\n    --threads COUNT                       Number of parallel threads for non-interactive mode (default: CPU core count)\r\n    --folder PATH                         Change to the specified folder path before executing commands\r\n    --cwd PATH                            Same as --folder\r\n    --debug                               Turn on diagnostics/debug outputs\r\n    --quiet                               Turn off all but the most critical console outputs\r\n    --verbose                             Turn on additional diagnostics/debug outputs\r\n    --chat-completion-timeout SECONDS     Set a timeout in seconds for chat completion API calls (see: cycod help timeouts)\r\n\r\nSEE ALSO\r\n\r\n  cycod help\r\n  cycod help examples\r\n  cycod help provider\r\n  cycod help settings\r\n  cycod help function calls\r\n  cycod help timeouts\r\n  cycod help config\r\n  cycod help aliases\r\n\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help prompt\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD PROMPT COMMANDS\r\n\r\n  These commands allow you to manage custom CYCOD prompts.\r\n\r\nUSAGE: cycod prompt list [--scope]\r\n   OR: cycod prompt get PROMPT_NAME [--scope]\r\n   OR: cycod prompt delete PROMPT_NAME [--scope]\r\n   OR: cycod prompt create PROMPT_NAME PROMPT_TEXT [--scope]\r\n\r\nOPTIONS\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    Use global scope (all users)\r\n    --user, -u      Use user scope (current user)\r\n    --local, -l     Use local scope (default for most commands)\r\n    --any, -a       Include prompts from all scopes (default for \u0027list\u0027 and \u0027get\u0027 commands)\r\n\r\nCOMMANDS\r\n\r\n    list            List all available prompts\r\n    get             Display the content of a specific prompt\r\n    delete          Delete a prompt\r\n    create          Create a new prompt\r\n\r\nSEE ALSO\r\n\r\n  cycod help prompt list\r\n  cycod help prompt get\r\n  cycod help prompt delete\r\n  cycod help prompt create\r\n  cycod help prompts\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help prompts\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD PROMPTS\r\n\r\n  Custom prompts are reusable text templates that can be quickly inserted\r\n  into your chat conversations by typing /promptname.\r\n\r\nUSING PROMPTS\r\n\r\n  In any chat session, type a forward slash (/) followed by a prompt name:\r\n\r\n    /explain\r\n    /translate\r\n    /summarize\r\n\r\n  You can also view available prompts by typing a slash and\r\n  pressing TAB to see prompt suggestions.\r\n\r\nPROMPT STORAGE\r\n\r\n  Prompts are stored in different locations based on scope:\r\n\r\n  - Local: In the .cycod/prompts directory of your current working directory\r\n  - User: In the .cycod/prompts directory of your user profile\r\n  - Global: In a system-wide directory available to all users\r\n\r\nMANAGING PROMPTS\r\n\r\n  Create a new prompt:\r\n    cycod prompt create myprompt \u0022This is my custom prompt text\u0022\r\n\r\n  List all available prompts:\r\n    cycod prompt list\r\n\r\n  View a specific prompt:\r\n    cycod prompt get myprompt\r\n\r\n  Delete a prompt:\r\n    cycod prompt delete myprompt\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: Creating and using a comprehensive code review prompt\r\n\r\n    cycod prompt create code-review \u0022Review this code and provide:\r\n    1. Security vulnerabilities and specific fixes\r\n    2. Performance bottlenecks and optimizations\r\n    3. Code quality improvements with examples\r\n    4. Best practices violations and corrections\u0022 --user\r\n\r\n    Then in chat, use for thorough code analysis:\r\n    /code-review\r\n    [paste your code here for detailed review]\r\n\r\n  EXAMPLE 2: Creating a specialized API documentation prompt\r\n\r\n    cycod prompt create api-docs \u0022Generate comprehensive API documentation including:\r\n    - Endpoint descriptions with example requests/responses\r\n    - Authentication requirements\r\n    - Error codes and handling\r\n    - Rate limiting information\u0022 --user\r\n\r\n    Then use it to document your APIs:\r\n    /api-docs\r\n    [paste your API code here]\r\n\r\nSEE ALSO\r\n\r\n  cycod help prompt\r\n  cycod help prompt create\r\n  cycod help prompt list\r\n  cycod help prompt get\r\n  cycod help prompt delete\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help provider\u0060\r\n\r\n\u0060\u0060\u0060\r\n# CycoD Provider Selection\r\n\r\nCycoD supports multiple AI providers for chat functionality:\r\n\r\n- GitHub Copilot\r\n- Anthropic Claude\r\n- AWS Bedrock\r\n- Azure OpenAI API\r\n- Google Gemini\r\n- Grok (x.ai)\r\n- OpenAI API\r\n\r\n## Provider Selection Flags\r\n\r\nUse these flags to explicitly select which provider to use:\r\n\r\n\u0060\u0060\u0060\r\n--use-copilot          Use GitHub Copilot\r\n--use-azure-openai     Use Azure OpenAI API  \r\n--use-anthropic        Use Anthropic Claude\r\n--use-bedrock          Use AWS Bedrock\r\n--use-gemini           Use Google Gemini\r\n--use-grok             Use Grok (x.ai)\r\n--use-openai           Use OpenAI API\r\n\u0060\u0060\u0060\r\n\r\n## Named Profiles\r\n\r\nYou can create named profiles to store different configurations:\r\n\r\n1. Create a YAML file at \u0060.cycod/profiles/\u003Cname\u003E.yaml\u0060\r\n2. Add provider settings to the file\r\n3. Use \u0060--profile \u003Cname\u003E\u0060 to load that profile\r\n\r\nFor example, create \u0060.cycod/profiles/work.yaml\u0060:\r\n\u0060\u0060\u0060yaml\r\napp:\r\n  preferredProvider: \u0022azure-openai\u0022\r\n\r\nazure:\r\n  openai:\r\n    endpoint: \u0022https://my-work-endpoint.openai.azure.com\u0022\r\n    chatDeployment: \u0022gpt-4\u0022\r\n\u0060\u0060\u0060\r\n\r\nThen use: \u0060cycod --profile work\u0060\r\n\r\n## Default Provider\r\n\r\nYou can set a default preferred provider in your configuration:\r\n\r\n\u0060\u0060\u0060\r\ncycod config set app.preferredProvider openai\r\n\u0060\u0060\u0060\r\n\r\nOr set the environment variable:\r\n\r\n\u0060\u0060\u0060\r\nCYCOD_PREFERRED_PROVIDER=azure-openai\r\n\u0060\u0060\u0060\r\n\r\n## See Also\r\n\r\n  cycod help options\r\n  cycod help settings\r\n  cycod help use github copilot\r\n  cycod help use anthropic\r\n  cycod help use azure openai\r\n  cycod help use bedrock\r\n  cycod help use gemini\r\n  cycod help use grok\r\n  cycod help use openai\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help settings\u0060\r\n\r\n\u0060\u0060\u0060\r\nUSE APP SETTINGS\r\n\r\n  These settings control CycoD\u0027s application behavior, including auto-saving,\r\n  function call permissions, and API timeouts.\r\n\r\n  MAX PROMPT TOKENS\r\n\r\n    EXAMPLE 1: Set maximum prompt tokens via config\r\n\r\n      cycod config set App.MaxPromptTokens 50000\r\n      cycod config set App.MaxPromptTokens 50000 --local\r\n      cycod config set App.MaxPromptTokens 50000 --user\r\n      cycod config set App.MaxPromptTokens 50000 --global\r\n\r\n    EXAMPLE 2: Set maximum prompt tokens via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export CYCOD_MAX_PROMPT_TOKENS=\u002250000\u0022\r\n\r\n      # CMD (Windows)\r\n      set CYCOD_MAX_PROMPT_TOKENS=50000\r\n\r\n      # PowerShell (Windows)\r\n      $env:CYCOD_MAX_PROMPT_TOKENS = \u002250000\u0022\r\n\r\n    EXAMPLE 3: Supply maximum prompt tokens via command line\r\n\r\n      cycod chat --max-prompt-tokens 50000\r\n\r\n  MAX TOOL TOKENS\r\n\r\n    EXAMPLE 1: Set maximum tool tokens via config\r\n\r\n      cycod config set App.MaxToolTokens 50000\r\n      cycod config set App.MaxToolTokens 50000 --local\r\n      cycod config set App.MaxToolTokens 50000 --user\r\n      cycod config set App.MaxToolTokens 50000 --global\r\n\r\n    EXAMPLE 2: Set maximum tool tokens via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export CYCOD_MAX_TOOL_TOKENS=\u002250000\u0022\r\n\r\n      # CMD (Windows)\r\n      set CYCOD_MAX_TOOL_TOKENS=50000\r\n\r\n      # PowerShell (Windows)\r\n      $env:CYCOD_MAX_TOOL_TOKENS = \u002250000\u0022\r\n\r\n    EXAMPLE 3: Supply maximum tool tokens via command line\r\n\r\n      cycod chat --max-tool-tokens 50000\r\n\r\n  MAX OUTPUT TOKENS\r\n\r\n    EXAMPLE 1: Set maximum tokens via config\r\n\r\n      cycod config set App.MaxOutputTokens 4000\r\n      cycod config set App.MaxOutputTokens 4000 --local\r\n      cycod config set App.MaxOutputTokens 4000 --user\r\n      cycod config set App.MaxOutputTokens 4000 --global\r\n\r\n    EXAMPLE 2: Set maximum tokens via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export CYCOD_MAX_OUTPUT_TOKENS=\u00224000\u0022\r\n\r\n      # CMD (Windows)\r\n      set CYCOD_MAX_OUTPUT_TOKENS=4000\r\n\r\n      # PowerShell (Windows)\r\n      $env:CYCOD_MAX_OUTPUT_TOKENS = \u00224000\u0022\r\n\r\n    EXAMPLE 3: Supply maximum tokens via command line\r\n\r\n      cycod chat --max-output-tokens 4000\r\n\r\n  MAX CHAT TOKENS\r\n\r\n    EXAMPLE 1: Set maximum total chat tokens via config\r\n\r\n      cycod config set App.MaxChatTokens 50000\r\n      cycod config set App.MaxChatTokens 50000 --local\r\n      cycod config set App.MaxChatTokens 50000 --user\r\n      cycod config set App.MaxChatTokens 50000 --global\r\n\r\n    EXAMPLE 2: Set maximum total chat tokensvia environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export CYCOD_MAX_CHAT_TOKENS=\u002250000\u0022\r\n\r\n      # CMD (Windows)\r\n      set CYCOD_MAX_CHAT_TOKENS=50000\r\n\r\n      # PowerShell (Windows)\r\n      $env:CYCOD_MAX_CHAT_TOKENS = \u002250000\u0022\r\n\r\n    EXAMPLE 3: Supply maximum total chat tokens via command line\r\n\r\n      cycod chat --max-chat-tokens 50000\r\n\r\n  CHAT COMPLETION TIMEOUT\r\n\r\n    EXAMPLE 1: Set chat completion timeout via config\r\n\r\n      cycod config set App.ChatCompletionTimeout 120\r\n      cycod config set App.ChatCompletionTimeout 120 --local\r\n      cycod config set App.ChatCompletionTimeout 120 --user\r\n      cycod config set App.ChatCompletionTimeout 120 --global\r\n\r\n    EXAMPLE 2: Set chat completion timeout via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export CYCOD_CHAT_COMPLETION_TIMEOUT=\u0022120\u0022\r\n\r\n      # CMD (Windows)\r\n      set CYCOD_CHAT_COMPLETION_TIMEOUT=120\r\n\r\n      # PowerShell (Windows)\r\n      $env:CYCOD_CHAT_COMPLETION_TIMEOUT = \u0022120\u0022\r\n\r\n    EXAMPLE 3: Supply chat completion timeout via command line\r\n\r\n      cycod chat --chat-completion-timeout 120\r\n\r\n  AUTO-SAVE CHAT HISTORY\r\n\r\n    EXAMPLE 1: Control auto-saving chat history via config\r\n\r\n      cycod config set App.AutoSaveChatHistory true\r\n      cycod config set App.AutoSaveChatHistory false --local\r\n      cycod config set App.AutoSaveChatHistory false --user\r\n      cycod config set App.AutoSaveChatHistory false --global\r\n\r\n    EXAMPLE 2: Control auto-saving chat history via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export CYCOD_AUTO_SAVE_CHAT_HISTORY=\u0022true\u0022\r\n\r\n      # CMD (Windows)\r\n      set CYCOD_AUTO_SAVE_CHAT_HISTORY=true\r\n\r\n      # PowerShell (Windows)\r\n      $env:CYCOD_AUTO_SAVE_CHAT_HISTORY = \u0022true\u0022\r\n\r\n    EXAMPLE 3: Control auto-saving chat history via command line\r\n\r\n      cycod chat --auto-save-chat-history true\r\n      cycod chat --auto-save-chat-history false\r\n\r\n  AUTO-SAVE TRAJECTORY\r\n\r\n    EXAMPLE 1: Control auto-saving trajectory via config\r\n\r\n      cycod config set App.AutoSaveTrajectory true\r\n      cycod config set App.AutoSaveTrajectory false --local\r\n      cycod config set App.AutoSaveTrajectory false --user\r\n      cycod config set App.AutoSaveTrajectory false --global\r\n\r\n    EXAMPLE 2: Control auto-saving trajectory via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export CYCOD_AUTO_SAVE_TRAJECTORY=\u0022true\u0022\r\n\r\n      # CMD (Windows)\r\n      set CYCOD_AUTO_SAVE_TRAJECTORY=true\r\n\r\n      # PowerShell (Windows)\r\n      $env:CYCOD_AUTO_SAVE_TRAJECTORY = \u0022true\u0022\r\n\r\n    EXAMPLE 3: Control auto-saving trajectory via command line\r\n\r\n      cycod chat --auto-save-trajectory true\r\n      cycod chat --auto-save-trajectory false\r\n\r\n  FUNCTION CALL AUTO-APPROVE\r\n\r\n    EXAMPLE 1: Set function auto-approval via config\r\n\r\n      cycod config set App.AutoApprove read\r\n      cycod config set App.AutoApprove \u0022read write\u0022 --local\r\n      cycod config set App.AutoApprove \u0022*\u0022 --user\r\n      cycod config set App.AutoApprove \u0022ViewFile ListFiles\u0022 --global\r\n\r\n    EXAMPLE 2: Set function auto-approval via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export CYCOD_AUTO_APPROVE=\u0022read write ViewFile ListFiles\u0022\r\n\r\n      # CMD (Windows)\r\n      set CYCOD_AUTO_APPROVE=read write ViewFile ListFiles\r\n\r\n      # PowerShell (Windows)\r\n      $env:CYCOD_AUTO_APPROVE = \u0022read write ViewFile ListFiles\u0022\r\n\r\n    EXAMPLE 3: Supply function auto-approval via command line\r\n\r\n      cycod chat --auto-approve read\r\n      cycod chat --auto-approve read write\r\n      cycod chat --auto-approve \u0022*\u0022\r\n      cycod chat --auto-approve ViewFile ListFiles\r\n\r\n  FUNCTION CALL AUTO-DENY\r\n\r\n    EXAMPLE 1: Set function auto-denial via config\r\n\r\n      cycod config set App.AutoDeny run\r\n      cycod config set App.AutoDeny \u0022DeleteFile RunBashCommand\u0022 --local\r\n      cycod config set App.AutoDeny write --user\r\n      cycod config set App.AutoDeny \u0022CreateFile StrReplace\u0022 --global\r\n\r\n    EXAMPLE 2: Set function auto-denial via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export CYCOD_AUTO_DENY=\u0022run DeleteFile\u0022\r\n\r\n      # CMD (Windows)\r\n      set CYCOD_AUTO_DENY=run DeleteFile\r\n\r\n      # PowerShell (Windows)\r\n      $env:CYCOD_AUTO_DENY = \u0022run DeleteFile\u0022\r\n\r\n    EXAMPLE 3: Supply function auto-denial via command line\r\n\r\n      cycod chat --auto-deny run\r\n      cycod chat --auto-deny DeleteFile RunBashCommand\r\n      cycod chat --auto-deny write\r\n      cycod chat --auto-deny \u0022CreateFile StrReplace\u0022\r\n\r\n  PREFERRED PROVIDER\r\n\r\n    EXAMPLE 1: Set preferred AI provider via config\r\n\r\n      cycod config set App.PreferredProvider copilot --user\r\n      cycod config set App.PreferredProvider anthropic --global\r\n      cycod config set App.PreferredProvider azure-openai --local\r\n      cycod config set App.PreferredProvider bedrock\r\n      cycod config set App.PreferredProvider gemini\r\n      cycod config set App.PreferredProvider grok\r\n      cycod config set App.PreferredProvider openai\r\n\r\n    EXAMPLE 2: Set preferred AI provider via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export CYCOD_PREFERRED_PROVIDER=\u0022openai\u0022\r\n\r\n      # CMD (Windows)\r\n      set CYCOD_PREFERRED_PROVIDER=openai\r\n\r\n      # PowerShell (Windows)\r\n      $env:CYCOD_PREFERRED_PROVIDER = \u0022openai\u0022\r\n\r\n    EXAMPLE 3: Use specific provider via command line flags\r\n\r\n      cycod chat --use-copilot\r\n      cycod chat --use-anthropic\r\n      cycod chat --use-azure-openai\r\n      cycod chat --use-bedrock\r\n      cycod chat --use-google\r\n      cycod chat --use-grok\r\n      cycod chat --use-openai\r\n\r\nSEE ALSO\r\n\r\n  cycod help function calls\r\n  cycod help chat history\r\n  cycod help provider\r\n  cycod help config\r\n  cycod help options\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help timeouts\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD TIMEOUTS\r\n\r\n  CycoD provides controls for API call timeouts to help manage network issues\r\n  and long-running operations.\r\n\r\nCHAT COMPLETION TIMEOUT\r\n\r\n  The chat completion timeout controls how long CycoD will wait for a response\r\n  from the AI provider API before timing out.\r\n\r\n  USAGE: cycod --chat-completion-timeout SECONDS\r\n\r\n  The timeout is specified in seconds. A value of 0 means no timeout (wait indefinitely).\r\n\r\nSETTING THE TIMEOUT\r\n\r\n  EXAMPLE 1: Set a timeout via command line\r\n\r\n    cycod --chat-completion-timeout 60\r\n    cycod --chat-completion-timeout 120\r\n    cycod --chat-completion-timeout 300\r\n\r\n  EXAMPLE 2: Set a timeout via config command\r\n\r\n    cycod config set App.ChatCompletionTimeout 60\r\n    cycod config set App.ChatCompletionTimeout 120 --user\r\n    cycod config set App.ChatCompletionTimeout 300 --global\r\n\r\n  EXAMPLE 3: Set a timeout via environment variable\r\n\r\n    Set CYCOD_CHAT_COMPLETION_TIMEOUT to the desired timeout in seconds\r\n\r\nDEFAULT TIMEOUT\r\n\r\n  If not specified, CycoD uses a default timeout of 180 seconds (3 minutes).\r\n  This can vary based on the AI model and provider being used.\r\n\r\nRECOMMENDED TIMEOUT VALUES\r\n\r\n  * 30-60 seconds: Quick questions with simple models\r\n  * 120-180 seconds: Default for most interactions\r\n  * 300\u002B seconds: Complex tasks like code generation or debugging\r\n  * 0 (infinite): Long-running tasks that require deep analysis\r\n\r\nHANDLING TIMEOUTS\r\n\r\n  When a timeout occurs:\r\n  1. CycoD will display a timeout message\r\n  2. The current response will be truncated\r\n  3. You may need to retry with a longer timeout value\r\n\r\nPROVIDER-SPECIFIC CONSIDERATIONS\r\n\r\n  Some providers may have their own timeout limitations:\r\n  * OpenAI: May have server-side timeouts for certain models\r\n  * Azure OpenAI: Configurable server-side timeouts\r\n  * GitHub Copilot: May have different timeout behavior\r\n\r\nSEE ALSO\r\n\r\n  cycod help use app\r\n  cycod help options\r\n  cycod help config\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help usage\u0060\r\n\r\n\u0060\u0060\u0060\r\nUsing CYCOD, you can:\r\n\r\n  - Chat with an AI model (interactively/programmatically)\r\n  - Provide one or more inputs to the AI model\r\n  - Use built-in function tools to:\r\n    - Read and write files\r\n    - Execute shell commands/scripts\r\n    - Use MCP (Model Context Protocol) server registration tools\r\n\r\nUSAGE: cycod \u003Ccommand\u003E [...]\r\n\r\nCOMMANDS\r\n\r\n  cycod [...]             (aka: cycod chat)\r\n  cycod chat [...]        (see: cycod help chat)\r\n\r\n  cycod config [...]      (see: cycod help config)\r\n  cycod github [...]      (see: cycod help github)\r\n\r\n  cycod mcp [...]         (see: cycod help mcp)\r\n  cycod alias [...]       (see: cycod help alias)\r\n  cycod prompt [...]      (see: cycod help prompt)\r\n\r\nSEE ALSO\r\n\r\n  cycod help\r\n  cycod help examples\r\n  cycod help github login\r\n\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help alias add\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD ALIAS ADD COMMAND\r\n\r\n  Creates a new alias with raw content without syntax validation.\r\n\r\nUSAGE: cycod alias add ALIAS_NAME \u0022CONTENT\u0022 [--scope]\r\n\r\nDESCRIPTION\r\n\r\n  The \u0027alias add\u0027 command creates a new alias that can be used with the --ALIAS_NAME\r\n  syntax. Unlike aliases created with --save-alias, aliases created with this command\r\n  don\u0027t undergo syntax validation, making them suitable for creating template-like\r\n  aliases or aliases with incomplete commands.\r\n\r\n  The content should be command-line arguments (without the \u0027cycod\u0027 prefix) that will\r\n  be inserted when the alias is used.\r\n\r\nPARAMETERS\r\n\r\n  ALIAS_NAME       Name of the alias to create\r\n\r\n  CONTENT          Command-line arguments to include in the alias\r\n                   Enclose in quotes if it contains spaces or special characters\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g   Save in global scope (available to all users)\r\n    --user, -u     Save in user scope (available to current user in any directory)\r\n    --local, -l    Save in local scope (current directory) - DEFAULT\r\n\r\nEXAMPLES\r\n\r\n  # Create a local alias for code prompts\r\n  cycod alias add code-prompt \u0022--add-system-prompt @/prompts/code-system-prompt.md --instruction\u0022\r\n\r\n  # Create a user-scoped alias for Python programming\r\n  cycod alias add python-expert --user \u0022--system-prompt \\\u0022You are a Python expert\\\u0022\u0022\r\n\r\n  # Create a global alias for Linux administration\r\n  cycod alias add linux-admin --global \u0022--system-prompt \\\u0022You are a Linux administrator\\\u0022\u0022\r\n\r\nUSAGE EXAMPLES\r\n\r\n  # Use the alias with required parameters\r\n  cycod --code-prompt \u0022Write a sorting algorithm\u0022\r\n\r\n  # Use the alias with other options\r\n  cycod --verbose --code-prompt \u0022Write a sorting algorithm\u0022\r\n\r\n  # Place the alias anywhere in the command line\r\n  cycod --input \u0022Let\u0027s talk about\u0022 --code-prompt \u0022sorting algorithms\u0022\r\n\r\nSEE ALSO\r\n\r\n  cycod help alias\r\n  cycod help alias list\r\n  cycod help alias get\r\n  cycod help alias delete\r\n  cycod help aliases\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help alias delete\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD ALIAS DELETE\r\n\r\n  Delete an alias from a specific scope.\r\n\r\nUSAGE: cycod alias delete ALIAS_NAME [--scope]\r\n\r\nARGUMENTS\r\n\r\n  ALIAS_NAME        The name of the alias to delete.\r\n\r\nOPTIONS\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    Delete the alias from global scope (all users)\r\n    --user, -u      Delete the alias from user scope (current user)\r\n    --local, -l     Delete the alias from local scope (current directory)\r\n    --any, -a       Delete the alias from the first scope it\u0027s found in (default)\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: Delete an alias from any scope\r\n\r\n    cycod alias delete my-alias\r\n\r\n  EXAMPLE 2: Delete an alias from user scope\r\n\r\n    cycod alias delete my-alias --user\r\n\r\nSEE ALSO\r\n\r\n  cycod help alias\r\n  cycod help aliases\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help alias examples\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD ALIAS EXAMPLES\r\n\r\n  Aliases save frequently used command-line options for reuse.\r\n  Create specialized workflows for development, analysis, and automation tasks.\r\n\r\nDEVELOPMENT WORKFLOW ALIASES\r\n\r\n  EXAMPLE 1: Create a React development alias\r\n\r\n    cycod alias add react-dev \u0022--add-system-prompt \\\u0022You are a React expert focusing on modern hooks, TypeScript, and performance optimization\\\u0022 --auto-approve read write\u0022\r\n\r\n  EXAMPLE 2: Create a code review alias\r\n\r\n    cycod alias add code-review \u0022--add-user-prompt \\\u0022Review this code for bugs, security issues, and best practices. Provide specific examples and fixes.\\\u0022 --auto-approve read\u0022 --user\r\n\r\n  EXAMPLE 3: Create a DevOps troubleshooting alias\r\n\r\n    cycod alias add devops-debug \u0022--add-system-prompt \\\u0022You are a senior DevOps engineer specializing in Kubernetes, Docker, and CI/CD pipelines\\\u0022 --auto-approve read\u0022 --global\r\n\r\nSPECIALIZED ANALYSIS ALIASES\r\n\r\n  EXAMPLE 4: Create a security analysis alias\r\n\r\n    cycod alias add security-audit \u0022--add-system-prompt \\\u0022You are a cybersecurity expert specializing in code security, vulnerability assessment, and secure coding practices\\\u0022 --auto-approve read\u0022\r\n\r\n  EXAMPLE 5: Create a performance optimization alias\r\n\r\n    cycod alias add perf-optimize \u0022--add-user-prompt \\\u0022Analyze this code for performance bottlenecks and suggest optimizations with benchmarks\\\u0022 --auto-approve read write\u0022\r\n\r\n  EXAMPLE 6: Create a documentation generation alias\r\n\r\n    cycod alias add doc-gen \u0022--add-user-prompt \\\u0022Generate comprehensive documentation including API references, usage examples, and troubleshooting guides\\\u0022 --auto-approve read write\u0022 --user\r\n\r\nLANGUAGE-SPECIFIC ALIASES\r\n\r\n  EXAMPLE 7: Create a Python expert alias\r\n\r\n    cycod alias add python-expert \u0022--add-system-prompt \\\u0022You are a Python expert focusing on best practices, performance, and modern Python features\\\u0022 --auto-approve read write\u0022\r\n\r\n  EXAMPLE 8: Create a JavaScript/Node.js alias\r\n\r\n    cycod alias add js-expert \u0022--add-system-prompt \\\u0022You are a JavaScript expert specializing in Node.js, modern ES features, and web development\\\u0022 --auto-approve read write\u0022\r\n\r\n  EXAMPLE 9: Create a database expert alias\r\n\r\n    cycod alias add db-expert \u0022--add-system-prompt \\\u0022You are a database expert specializing in SQL optimization, schema design, and performance tuning\\\u0022 --auto-approve read\u0022\r\n\r\nPROJECT MANAGEMENT ALIASES\r\n\r\n  EXAMPLE 10: Create a project analysis alias\r\n\r\n    cycod alias add project-analyze \u0022--add-user-prompt \\\u0022Analyze this project structure, dependencies, and suggest improvements for maintainability\\\u0022 --auto-approve read\u0022\r\n\r\n  EXAMPLE 11: Create a test generation alias\r\n\r\n    cycod alias add test-gen \u0022--add-user-prompt \\\u0022Generate comprehensive unit tests, integration tests, and test documentation\\\u0022 --auto-approve read write\u0022\r\n\r\n  EXAMPLE 12: Create a refactoring assistant alias\r\n\r\n    cycod alias add refactor \u0022--add-user-prompt \\\u0022Help refactor this code for better maintainability, performance, and adherence to best practices\\\u0022 --auto-approve read write\u0022\r\n\r\nUSING ALIASES\r\n\r\n  EXAMPLE 13: Use React development alias for component work\r\n\r\n    cycod --react-dev --question \u0022Review this React component and suggest performance improvements\u0022\r\n\r\n  EXAMPLE 14: Combine alias with other options\r\n\r\n    cycod --verbose --code-review --question \u0022Analyze this authentication module\u0022\r\n\r\n  EXAMPLE 15: Use alias with input files\r\n\r\n    cycod --python-expert \u0022Optimize this algorithm code.py\u0022\r\n\r\nALIAS MANAGEMENT\r\n\r\n  EXAMPLE 16: List all available aliases\r\n\r\n    cycod alias list\r\n\r\n  EXAMPLE 17: View specific alias definition\r\n\r\n    cycod alias get react-dev\r\n\r\n  EXAMPLE 18: Remove alias when no longer needed\r\n\r\n    cycod alias remove old-alias\r\n\r\n  EXAMPLE 19: Update an existing alias\r\n\r\n    cycod alias add react-dev \u0022--add-system-prompt \\\u0022Updated React expert with Next.js knowledge\\\u0022 --auto-approve read write\u0022 --update\r\n\r\nSCOPE MANAGEMENT\r\n\r\n  EXAMPLE 20: Create user-wide aliases for personal workflows\r\n\r\n    cycod alias add personal-assistant \u0022--add-user-prompt \\\u0022Help with coding tasks using my preferred style guide\\\u0022 --auto-approve read\u0022 --user\r\n\r\n  EXAMPLE 21: Create team-wide aliases for consistency\r\n\r\n    cycod alias add team-review \u0022--add-system-prompt \\\u0022Use company coding standards and review guidelines\\\u0022 --auto-approve read\u0022 --global\r\n\r\n  EXAMPLE 22: Override global alias with local version\r\n\r\n    cycod alias add code-review \u0022--add-user-prompt \\\u0022Use strict security review process\\\u0022 --auto-approve read\u0022\r\n\r\nADVANCED ALIAS PATTERNS\r\n\r\n  EXAMPLE 23: Create alias with MCP integration\r\n\r\n    cycod alias add web-analysis \u0022--mcp playwright --add-user-prompt \\\u0022Analyze websites and generate reports\\\u0022 --auto-approve read write\u0022\r\n\r\n  EXAMPLE 24: Create alias with specific model\r\n\r\n    cycod alias add claude-review \u0022--model claude-3-opus-20240229 --add-user-prompt \\\u0022Provide detailed code analysis\\\u0022 --auto-approve read\u0022\r\n\r\n  EXAMPLE 25: Create alias with multiple files processing\r\n\r\n    cycod alias add multi-analyze \u0022--add-user-prompt \\\u0022Analyze multiple files simultaneously\\\u0022 --auto-approve read\u0022\r\n\r\nSEE ALSO\r\n\r\n  cycod help alias\r\n  cycod help alias add\r\n  cycod help alias list\r\n  cycod help aliases\r\n  cycod help configuration\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help alias get\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD ALIAS GET\r\n\r\n  Display the content of a specific alias.\r\n\r\nUSAGE: cycod alias get ALIAS_NAME [--scope]\r\n\r\nARGUMENTS\r\n\r\n  ALIAS_NAME        The name of the alias to view.\r\n\r\nOPTIONS\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    Look for the alias in global scope (all users)\r\n    --user, -u      Look for the alias in user scope (current user)\r\n    --local, -l     Look for the alias in local scope (current directory)\r\n    --any, -a       Look for the alias in any scope (default)\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: Get an alias from any scope\r\n\r\n    cycod alias get my-alias\r\n\r\n  EXAMPLE 2: Get an alias from user scope\r\n\r\n    cycod alias get my-alias --user\r\n\r\nSEE ALSO\r\n\r\n  cycod help alias\r\n  cycod help aliases\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help alias list\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD ALIAS LIST\r\n\r\n  List all available aliases across all scopes or in a specific scope.\r\n\r\nUSAGE: cycod alias list [--scope]\r\n\r\nOPTIONS\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    List only global aliases (all users)\r\n    --user, -u      List only user aliases (current user)\r\n    --local, -l     List only local aliases (current directory)\r\n    --any, -a       List aliases from all scopes (default)\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: List all aliases from all scopes\r\n\r\n    cycod alias list\r\n\r\n  EXAMPLE 2: List only user aliases\r\n\r\n    cycod alias list --user\r\n\r\nSEE ALSO\r\n\r\n  cycod help alias\r\n  cycod help aliases\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help chat history\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD CHAT HISTORY\r\n\r\n  CycoD provides two ways to save your conversation history:\r\n\r\n  1. Chat History (JSONL format) - Machine-readable format for reloading context\r\n  2. Trajectory (formatted text) - Human-readable format for reviewing conversations\r\n\r\nAUTOMATIC SAVING\r\n\r\n  By default, CycoD automatically saves both your chat history and trajectory\r\n  files to a \u0027history\u0027 directory under your user profile:\r\n\r\n    - Windows: %USERPROFILE%\\.cycod\\history\\\r\n    - Mac/Linux: ~/.cycod/history\\\r\n\r\n  Files are saved with timestamp-based names:\r\n    - Chat history: chat-history-15:03:27.jsonl\r\n    - Trajectory: trajectory-15:03:27.jsonl\r\n\r\nMANAGE AUTO-SAVING\r\n\r\n  You can disable automatic saving using the config command with the appropriate scope:\r\n\r\n  DISABLE FOR THE CURRENT DIRECTORY ONLY (LOCAL SCOPE):\r\n    cycod config set App.AutoSaveChatHistory false --local\r\n    cycod config set App.AutoSaveTrajectory false --local\r\n\r\n  DISABLE FOR ALL DIRECTORIES FOR CURRENT USER (USER SCOPE):\r\n    cycod config set App.AutoSaveChatHistory false --user\r\n    cycod config set App.AutoSaveTrajectory false --user\r\n\r\n  DISABLE FOR ALL USERS ON THIS COMPUTER (GLOBAL SCOPE):\r\n    cycod config set App.AutoSaveChatHistory false --global\r\n    cycod config set App.AutoSaveTrajectory false --global\r\n\r\n  To re-enable automatic saving, use the same commands with \u0027true\u0027 instead of \u0027false\u0027.\r\n\r\n  CHOOSING THE RIGHT SCOPE:\r\n    - Use --local when you want privacy only for a specific project\r\n    - Use --user when you want to disable history for all your projects\r\n    - Use --global when managing a shared system or setting company policy\r\n\r\n  VERIFY YOUR SETTINGS:\r\n    cycod config get App.AutoSaveChatHistory\r\n    cycod config get App.AutoSaveTrajectory\r\n\r\nMANUAL SAVING\r\n\r\n  You can also specify output paths explicitly using CLI options:\r\n\r\n    --output-chat-history \u003Cpath\u003E    Save chat history to specified file\r\n    --output-trajectory \u003Cpath\u003E      Save trajectory to specified file\r\n\r\n  When you provide these options, they take precedence over automatic saving.\r\n\r\nLOADING HISTORY\r\n\r\n  To continue a previous conversation, load a chat history using:\r\n\r\n    --input-chat-history \u003Cpath\u003E     Load chat history from specified file\r\n    --continue                      Continue the most recent chat history\r\n\r\nTOKEN MANAGEMENT\r\n\r\n  CycoD automatically manages token usage for long conversations:\r\n\r\n    --max-chat-tokens \u003Cnumber\u003E     Set a target for maximum total chat tokens\r\n\r\n  When loading or continuing chat histories, CycoD will automatically trim the\r\n  history to stay under the token target. This prevents errors from exceeding\r\n  model context limits while preserving the most relevant conversation parts.\r\n\r\n  CycoD optimizes this by:\r\n  - Trimming before loading chat histories\r\n  - Trimming during the conversation as needed\r\n  - Preserving essential context while removing less important details\r\n  - Focusing on keeping the most recent messages intact\r\n\r\nSEE ALSO\r\n\r\n  cycod help\r\n  cycod help config\r\n  cycod help options\r\n  cycod help settings\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help config add\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD CONFIG ADD\r\n\r\n  Add a value to a list configuration setting.\r\n\r\nUSAGE: cycod config add KEY VALUE [--scope]\r\n\r\nARGUMENTS\r\n\r\n  KEY              The name of the configuration setting\r\n  VALUE            The value to add to the list\r\n\r\nOPTIONS\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    Use global scope (all users)\r\n    --user, -u      Use user scope (current user)\r\n    --local, -l     Use local scope (default)\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: Add a custom feature flag to a list in local configuration\r\n\r\n    cycod config add CUSTOM_FEATURES experimental_mode\r\n\r\n  EXAMPLE 2: Add a trusted domain to a global list\r\n\r\n    cycod config add TRUSTED_DOMAINS example.com --global\r\n\r\nNOTE: The CYCOD core environment variables (OPENAI_API_KEY, AZURE_OPENAI_ENDPOINT, etc.)\r\n      are typically set as single values, not lists. This command is useful for\r\n      custom list-type configuration settings in your own scripts.\r\n\r\nSEE ALSO\r\n\r\n  cycod help config\r\n  cycod help config list\r\n  cycod help config remove\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help config clear\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD CONFIG CLEAR\r\n\r\n  Clear a configuration setting (remove it completely).\r\n\r\nUSAGE: cycod config clear KEY [--scope]\r\n\r\nARGUMENTS\r\n\r\n  KEY              The name of the configuration setting to clear\r\n\r\nOPTIONS\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    Use global scope (all users)\r\n    --user, -u      Use user scope (current user)\r\n    --local, -l     Use local scope (default)\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: Clear the auto approval of function calls\r\n\r\n    cycod config clear App.AutoApprove\r\n\r\n  EXAMPLE 2: Clear the OpenAI model name in local configuration\r\n\r\n    cycod config clear OPENAI_CHAT_MODEL_NAME\r\n\r\n  EXAMPLE 3: Clear the OpenAI API key in user configuration\r\n\r\n    cycod config clear OPENAI_API_KEY --user\r\n\r\nSEE ALSO\r\n\r\n  cycod help config\r\n  cycod help config set\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help config examples\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD CONFIG EXAMPLES\r\n\r\n  Configuration settings control CYCOD\u0027s behavior, API keys, models, and preferences.\r\n  Settings can be stored at local, user, or global scope.\r\n\r\nBASIC CONFIGURATION\r\n\r\n  EXAMPLE 1: Set up OpenAI API key for current user\r\n\r\n    cycod config set OPENAI_API_KEY sk-your-api-key-here --user\r\n\r\n  EXAMPLE 2: Configure specific model for code generation\r\n\r\n    cycod config set OPENAI_CHAT_MODEL_NAME gpt-5-mini\r\n\r\n  EXAMPLE 3: Enable auto-approval for file operations\r\n\r\n    cycod config set App.AutoApprove \u0022read write\u0022\r\n\r\nPROVIDER CONFIGURATION\r\n\r\n  EXAMPLE 4: Set up Azure OpenAI for team use\r\n\r\n    cycod config set AZURE_OPENAI_API_KEY your-azure-key --global\r\n    cycod config set AZURE_OPENAI_ENDPOINT \u0022https://your-resource.openai.azure.com\u0022 --global\r\n    cycod config set AZURE_OPENAI_API_VERSION 2023-12-01-preview --global\r\n\r\n  EXAMPLE 5: Configure Anthropic Claude\r\n\r\n    cycod config set ANTHROPIC_API_KEY sk-ant-your-key-here --user\r\n    cycod config set ANTHROPIC_MODEL_NAME claude-sonnet-4\r\n\r\n  EXAMPLE 6: Set up Google Gemini\r\n\r\n    cycod config set GOOGLE_GEMINI_API_KEY your-gemini-key --user\r\n    cycod config set GOOGLE_GEMINI_MODEL_ID gemini-2.5-pro\r\n\r\nAPPLICATION BEHAVIOR\r\n\r\n  EXAMPLE 7: Configure function call timeouts\r\n\r\n    cycod config set App.FunctionCallTimeout 300\r\n\r\n  EXAMPLE 8: Set default auto-approval preferences\r\n\r\n    cycod config set App.AutoApprove read\r\n    cycod config set App.AutoDeny run\r\n\r\n  EXAMPLE 9: Configure threading for parallel operations\r\n\r\n    cycod config set App.DefaultThreads 4\r\n\r\nDEVELOPMENT ENVIRONMENT SETUP\r\n\r\n  EXAMPLE 10: Set up local development configuration\r\n\r\n    cycod config set OPENAI_CHAT_MODEL_NAME gpt-4o\r\n    cycod config set App.AutoApprove \u0022read write\u0022\r\n    cycod config set App.AutoDeny run\r\n\r\n  EXAMPLE 11: Configure production environment (restricted)\r\n\r\n    cycod config set OPENAI_CHAT_MODEL_NAME gpt-4o-mini --global\r\n    cycod config set App.AutoApprove read --global\r\n    cycod config set App.AutoDeny \u0022write run\u0022 --global\r\n\r\n  EXAMPLE 12: Project-specific model settings\r\n\r\n    cycod config set OPENAI_CHAT_MODEL_NAME gpt-4o\r\n    cycod config set ANTHROPIC_MODEL_NAME claude-3-5-sonnet\r\n\r\nCONFIGURATION MANAGEMENT\r\n\r\n  EXAMPLE 13: View all configuration settings\r\n\r\n    cycod config list\r\n\r\n  EXAMPLE 14: Check specific configuration value\r\n\r\n    cycod config get OPENAI_CHAT_MODEL_NAME\r\n\r\n  EXAMPLE 15: View configuration from different scopes\r\n\r\n    cycod config get OPENAI_API_KEY --user\r\n    cycod config get OPENAI_API_KEY --global\r\n    cycod config get OPENAI_API_KEY --any\r\n\r\n  EXAMPLE 16: Remove configuration setting\r\n\r\n    cycod config remove OPENAI_CHAT_MODEL_NAME\r\n\r\nTEAM COLLABORATION\r\n\r\n  EXAMPLE 17: Set up shared team settings\r\n\r\n    cycod config set OPENAI_API_KEY sk-team-key --global\r\n    cycod config set OPENAI_CHAT_MODEL_NAME gpt-4o --global\r\n    cycod config set App.AutoApprove read --global\r\n\r\n  EXAMPLE 18: Override team settings for personal use\r\n\r\n    cycod config set OPENAI_CHAT_MODEL_NAME claude-3-5-sonnet --user\r\n    cycod config set App.AutoApprove \u0022read write\u0022 --user\r\n\r\nADVANCED CONFIGURATION\r\n\r\n  EXAMPLE 19: Configure multiple providers for fallback\r\n\r\n    cycod config set OPENAI_API_KEY sk-primary-key\r\n    cycod config set ANTHROPIC_API_KEY sk-ant-backup-key\r\n    cycod config set GOOGLE_GEMINI_API_KEY backup-gemini-key\r\n\r\n  EXAMPLE 20: Set up proxy and network settings\r\n\r\n    cycod config set HTTP_PROXY \u0022http://proxy.company.com:8080\u0022\r\n    cycod config set HTTPS_PROXY \u0022https://proxy.company.com:8080\u0022\r\n\r\nSEE ALSO\r\n\r\n  cycod help config\r\n  cycod help config set\r\n  cycod help config get\r\n  cycod help config list\r\n  cycod help configuration\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help config get\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD CONFIG GET\r\n\r\n  Get the value of a configuration setting.\r\n\r\nUSAGE: cycod config get KEY [--scope]\r\n\r\nARGUMENTS\r\n\r\n  KEY              The name of the configuration setting to retrieve\r\n\r\nOPTIONS\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    Use global scope (all users)\r\n    --user, -u      Use user scope (current user)\r\n    --local, -l     Use local scope (default)\r\n    --any, -a       Get from any scope (searches local, then user, then global)\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: Get the OpenAI model name from local configuration\r\n\r\n    cycod config get OPENAI_CHAT_MODEL_NAME\r\n\r\n  EXAMPLE 2: Get the OpenAI API key from user configuration\r\n\r\n    cycod config get OPENAI_API_KEY --user\r\n\r\n  EXAMPLE 3: Get the Azure OpenAI deployment from any configuration scope\r\n\r\n    cycod config get AZURE_OPENAI_CHAT_DEPLOYMENT --any\r\n\r\nSEE ALSO\r\n\r\n  cycod help config\r\n  cycod help config list\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help config list\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD CONFIG LIST\r\n\r\n  List all configuration settings.\r\n\r\nUSAGE: cycod config list [--scope]\r\n\r\nOPTIONS\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    List only global configuration settings (all users)\r\n    --user, -u      List only user configuration settings (current user)\r\n    --local, -l     List only local configuration settings (current directory)\r\n    --any, -a       List settings from all scopes (default)\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: List all configuration settings from all scopes\r\n\r\n    cycod config list\r\n\r\n  EXAMPLE 2: List only user configuration settings\r\n\r\n    cycod config list --user\r\n\r\nSEE ALSO\r\n\r\n  cycod help config\r\n  cycod help config get\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help config remove\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD CONFIG REMOVE\r\n\r\n  Remove a value from a list configuration setting.\r\n\r\nUSAGE: cycod config remove KEY VALUE [--scope]\r\n\r\nARGUMENTS\r\n\r\n  KEY              The name of the configuration setting\r\n  VALUE            The value to remove from the list\r\n\r\nOPTIONS\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    Use global scope (all users)\r\n    --user, -u      Use user scope (current user)\r\n    --local, -l     Use local scope (default)\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: Remove a custom feature flag from a list in local configuration\r\n\r\n    cycod config remove CUSTOM_FEATURES experimental_mode\r\n\r\n  EXAMPLE 2: Remove a trusted domain from a global list\r\n\r\n    cycod config remove TRUSTED_DOMAINS example.com --global\r\n\r\nNOTE: The CYCOD core environment variables (OPENAI_API_KEY, AZURE_OPENAI_ENDPOINT, etc.)\r\n      are typically set as single values, not lists. This command is useful for\r\n      custom list-type configuration settings in your own scripts.\r\n\r\nSEE ALSO\r\n\r\n  cycod help config\r\n  cycod help config add\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help config set\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD CONFIG SET\r\n\r\n  Set the value of a configuration setting.\r\n\r\nUSAGE: cycod config set KEY VALUE [--global | --user | --local]\r\n\r\nARGUMENTS\r\n\r\n  KEY              The name of the configuration setting\r\n  VALUE            The value to set\r\n\r\nOPTIONS\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    Use global scope (all users)\r\n    --user, -u      Use user scope (current user)\r\n    --local, -l     Use local scope (default)\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: Automatically approve read-only function calls\r\n\r\n    cycod config set App.AutoApprove read\r\n\r\n  EXAMPLE 2: Set the default OpenAI model in local configuration\r\n\r\n    cycod config set OPENAI_CHAT_MODEL_NAME gpt-5-mini\r\n\r\n  EXAMPLE 3: Set the OpenAI API key in user configuration\r\n\r\n    cycod config set OPENAI_API_KEY sk-123-eg-your-key-xyz --user\r\n\r\n  EXAMPLE 4: Set the Azure OpenAI endpoint for all users (global scope)\r\n\r\n    cycod config set AZURE_OPENAI_ENDPOINT \u0022https://your-resource.openai.azure.com\u0022 --global\r\n\r\nSEE ALSO\r\n\r\n  cycod help config\r\n  cycod help config get\r\n  cycod help config clear\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help function calls\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD FUNCTION CALLS\r\n\r\n  When the AI assistant wants to perform actions like reading or writing files or\r\n  executing commands, it uses function calls. CycoD lets you control which\r\n  functions you want to automatically approve or deny.\r\n\r\nFUNCTION CALL TYPES\r\n\r\n  CycoD function calls generally fall into three categories:\r\n\r\n  * read - Functions that read content (ViewFile, ListFiles, etc.)\r\n  * write - Functions that modify content (CreateFile, StrReplace, DeleteFile, etc.)\r\n  * run - Functions that execute commands (RunBashCommand, RunCmdCommand, etc.)\r\n\r\nCONTROLLING FUNCTION PERMISSIONS\r\n\r\n  AUTO-APPROVE SETTINGS\r\n\r\n    Use the --auto-approve option to automatically allow specific function calls\r\n    without prompting for permission each time.\r\n\r\n    USAGE: cycod --auto-approve PATTERN1 [PATTERN2 [...]]\r\n\r\n    PATTERNS:\r\n      * function name - Approve a specific function by name (e.g., \u0022ViewFile\u0022)\r\n      * read - Approve all read-only functions\r\n      * write - Approve all write functions\r\n      * run - Approve all command execution functions\r\n      * * - Approve all functions\r\n\r\n    EXAMPLES:\r\n\r\n      EXAMPLE 1: Auto-approve safe operations for code analysis sessions\r\n\r\n        cycod --auto-approve read --question \u0022Analyze my entire codebase for technical debt\u0022\r\n\r\n      EXAMPLE 2: Auto-approve specific functions by name\r\n\r\n        cycod --auto-approve ViewFile ListFiles --question \u0022Show me the project structure\u0022\r\n\r\n      EXAMPLE 3: Auto-approve file operations for refactoring tasks\r\n\r\n        cycod --auto-approve read write --question \u0022Refactor this module to use modern async/await patterns\u0022\r\n\r\n      EXAMPLE 4: Auto-approve all functions for trusted operations (use with caution)\r\n\r\n        cycod --auto-approve * --question \u0022Refactor all code, building and testing after each atomic step\u0022\r\n\r\n  AUTO-DENY SETTINGS\r\n\r\n    Use the --auto-deny option to automatically block specific function calls\r\n    without prompting.\r\n\r\n    USAGE: cycod --auto-deny PATTERN1 [PATTERN2 [...]]\r\n\r\n    PATTERNS:\r\n      * function name - Deny a specific function by name (e.g., \u0022RunBashCommand\u0022)\r\n      * read - Deny all read-only functions\r\n      * write - Deny all write functions\r\n      * run - Deny all command execution functions\r\n\r\n    EXAMPLES:\r\n\r\n      EXAMPLE 1: Deny dangerous operations during code review sessions\r\n\r\n        cycod --auto-deny run --question \u0022Review this code but don\u0027t execute anything\u0022\r\n\r\n      EXAMPLE 2: Deny specific dangerous functions by name\r\n\r\n        cycod --auto-deny CreateFile DeleteFile --question \u0022Analyze this code but don\u0027t modify files\u0022\r\n\r\n      EXAMPLE 3: Deny file modification during analysis-only sessions\r\n\r\n        cycod --auto-deny write --question \u0022Analyze this codebase for patterns but don\u0027t modify anything\u0022\r\n\r\nPERSISTENT CONFIGURATION\r\n\r\n  You can make your function call preferences persistent using the config commands:\r\n  \r\n  CONFIG SCOPES:\r\n    --local    Apply to current directory only\r\n    --user     Apply to current user (default)\r\n    --global   Apply to all users\r\n\r\n  EXAMPLE 1: Always auto-approve read-only functions\r\n\r\n    cycod config set App.AutoApprove read\r\n\r\n  EXAMPLE 2: Always auto-deny command execution functions\r\n\r\n    cycod config set App.AutoDeny run\r\n\r\n  EXAMPLE 3: Setting multiple auto-approvals (individual commands)\r\n\r\n    cycod config add App.AutoApprove read\r\n    cycod config add App.AutoApprove write\r\n    \r\n  EXAMPLE 4: Setting multiple auto-approvals (single command)\r\n  \r\n    cycod config set App.AutoApprove \u0022read write\u0022\r\n\r\n  EXAMPLE 5: Clear all auto-approvals\r\n\r\n    cycod config clear App.AutoApprove\r\n\r\nENVIRONMENT VARIABLES\r\n\r\n  You can also set these options using environment variables:\r\n\r\n  CYCOD_AUTO_APPROVE - Space-separated list of auto-approved patterns\r\n  CYCOD_AUTO_DENY - Space-separated list of auto-denied patterns\r\n\r\nPRIORITY RULES\r\n\r\n  When both auto-approve and auto-deny settings apply to the same function:\r\n  1. Auto-deny takes precedence over auto-approve\r\n  2. If neither applies, CycoD will prompt you for permission\r\n\r\nSECURITY CONSIDERATIONS\r\n\r\n  * Use --auto-approve sparingly, especially for write and run functions\r\n  * Use --auto-deny for any functions you want to always restrict\r\n  * Consider using the --local scope for project-specific settings\r\n  * Use --user or --global scopes for your general preferences\r\n\r\nSEE ALSO\r\n\r\n  cycod help settings\r\n  cycod help options\r\n  cycod help config\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help github login\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD GITHUB LOGIN\r\n\r\n  This command helps you authenticate with GitHub to use Copilot with CYCOD.\r\n  It handles the device authorization flow with GitHub and saves the token\r\n  in your CYCOD configuration.\r\n\r\nUSAGE: cycod github login\r\n\r\nDETAILS\r\n\r\n  The command will:\r\n  1. Open a browser window for you to authorize CYCOD with GitHub\r\n  2. Save the GitHub token to your user configuration\r\n  3. Allow CYCOD to use GitHub Copilot for AI interactions\r\n\r\n  After successful authentication, CYCOD will automatically use your \r\n  GitHub credentials when appropriate.\r\n\r\nNOTE: This requires a valid GitHub Copilot subscription.\r\n\r\nSEE ALSO\r\n\r\n  cycod help config\r\n  cycod help options\r\n  cycod help use github copilot\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help github models\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD GITHUB MODELS\r\n\r\n  This command helps you list available GitHub Copilot models.\r\n\r\nUSAGE: cycod github models\r\n\r\nSEE ALSO\r\n\r\n  cycod help config\r\n  cycod help options\r\n  cycod help github login\r\n  \r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help mcp add\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD MCP ADD\r\n\r\n  Adds a new Model Context Protocol (MCP) server registration.\r\n  \r\nUSAGE: cycod mcp add SERVER_NAME --command \u0022COMMAND ARGS\u0022 [...]\r\n   OR: cycod mcp add SERVER_NAME --url URL [...]\r\n\r\n  Where SERVER_NAME is the name for the new MCP server registration.\r\n\r\nOPTIONS\r\n\r\n  STDIO SERVERS\r\n\r\n    --command       The command to execute to start the MCP server (for STDIO transport)\r\n    --arg ARG       An argument to pass to the command (can be used multiple times)\r\n    --args \u0022ARGS\u0022   Space-separated arguments to pass to the command (alternative to using multiple --arg)\r\n    --env, -e       An environment variable in KEY=VALUE format (can be used multiple times)\r\n\r\n  SSE SERVERS\r\n\r\n    --url           The URL for the SSE endpoint (for SSE transport)\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    Add registration to global scope (all users)\r\n    --user, -u      Add registration to user scope (current user)\r\n    --local, -l     Add registration to local scope (current directory, default)\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: Register Playwright MCP for web automation\r\n\r\n    cycod mcp add playwright --command \u0022npx\u0022 --args \u0022@playwright/mcp@latest\u0022\r\n\r\n  EXAMPLE 2: Register Playwright MCP in headless mode (for servers)\r\n\r\n    cycod mcp add playwright-headless --command \u0022npx\u0022 --args \u0022@playwright/mcp@latest --headless\u0022\r\n\r\n  EXAMPLE 3: Register Playwright MCP with Chrome browser\r\n\r\n    cycod mcp add playwright-chrome --command \u0022npx\u0022 --args \u0022@playwright/mcp@latest --browser chrome\u0022\r\n\r\n  EXAMPLE 4: Register Playwright MCP with advanced capabilities\r\n\r\n    cycod mcp add playwright-full --command \u0022npx\u0022 --args \u0022@playwright/mcp@latest --caps vision,pdf\u0022\r\n\r\n  EXAMPLE 5: Register a remote MCP server using SSE\r\n\r\n    cycod mcp add remote-mcp --url \u0022https://mcp-server.example.com/mcp\u0022\r\n\r\n  EXAMPLE 6: Register a local MCP server with specific scope\r\n\r\n    cycod mcp add local-playwright --command \u0022npx\u0022 --args \u0022@playwright/mcp@latest\u0022 --user\r\n\r\nSEE ALSO\r\n\r\n  cycod help mcp\r\n  cycod help mcp get\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help mcp examples\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD MCP EXAMPLES\r\n\r\n  Model Context Protocol (MCP) servers extend CYCOD with specialized capabilities\r\n  like web automation, database access, and API integrations.\r\n\r\nBASIC MCP USAGE\r\n\r\n  EXAMPLE 1: Use Playwright MCP for web automation (without registration)\r\n\r\n    cycod --with-mcp \u0022npx @playwright/mcp@latest\u0022 --question \u0022Navigate to github.com and search for \u0027playwright\u0027\u0022\r\n\r\n  EXAMPLE 2: Register Playwright MCP for repeated use\r\n\r\n    cycod mcp add playwright --command \u0022npx\u0022 --args \u0022@playwright/mcp@latest\u0022\r\n    cycod --use-mcps playwright --question \u0022Automate testing this web form\u0022\r\n\r\n  EXAMPLE 3: Use multiple MCP servers together\r\n\r\n    cycod mcp add playwright --command \u0022npx\u0022 --args \u0022@playwright/mcp@latest\u0022\r\n    cycod --use-mcps playwright --question \u0022Analyze this web app and generate test files\u0022\r\n\r\nADVANCED MCP CONFIGURATIONS\r\n\r\n  EXAMPLE 4: Playwright MCP with specific browser and capabilities\r\n\r\n    cycod mcp add playwright-full --command \u0022npx\u0022 --args \u0022@playwright/mcp@latest --browser chrome --caps vision,pdf\u0022\r\n    cycod --use-mcps playwright-full --question \u0022Take screenshots of this site and generate a PDF report\u0022\r\n\r\n  EXAMPLE 5: Combine registered and external MCP servers\r\n\r\n    cycod mcp add database --command \u0022npx\u0022 --args \u0022@modelcontextprotocol/server-sqlite@latest mydb.sqlite\u0022\r\n    cycod --use-mcps database --with-mcp \u0022npx @playwright/mcp@latest --headless\u0022 --question \u0022Extract data from this website and store in database\u0022\r\n\r\n  EXAMPLE 6: Headless Playwright for server environments\r\n\r\n    cycod --with-mcp \u0022npx @playwright/mcp@latest --headless --no-sandbox\u0022 --question \u0022Scrape data from multiple pages\u0022\r\n\r\nMCP MANAGEMENT\r\n\r\n  EXAMPLE 7: List and inspect MCP server registrations\r\n\r\n    cycod mcp list\r\n    cycod mcp get playwright\r\n\r\n  EXAMPLE 8: Set up team-wide MCP servers\r\n\r\n    cycod mcp add playwright --command \u0022npx\u0022 --args \u0022@playwright/mcp@latest\u0022 --global\r\n    cycod mcp add database --command \u0022npx\u0022 --args \u0022@modelcontextprotocol/server-sqlite@latest\u0022 --args \u0022/shared/database.sqlite\u0022 --global\r\n\r\n  EXAMPLE 9: User-specific MCP configuration\r\n\r\n    cycod mcp add personal-browser --command \u0022npx\u0022 --args \u0022@playwright/mcp@latest --user-data-dir=/home/user/browser-profile\u0022 --user\r\n\r\nDEVELOPMENT WORKFLOWS\r\n\r\n  EXAMPLE 10: Web testing and automation workflow\r\n\r\n    cycod mcp add testing --command \u0022npx\u0022 --args \u0022@playwright/mcp@latest --browser chrome\u0022\r\n    cycod --use-mcps testing --question \u0022Create end-to-end tests for this login flow\u0022\r\n\r\n  EXAMPLE 11: API testing with web automation\r\n\r\n    cycod --with-mcp \u0022npx @playwright/mcp@latest\u0022 --question \u0022Test this REST API by automating the web interface and comparing results\u0022\r\n\r\n  EXAMPLE 12: Content generation from web research\r\n\r\n    cycod --with-mcp \u0022npx @playwright/mcp@latest --headless\u0022 --question \u0022Research competitor pricing pages and generate a comparison report\u0022\r\n\r\nTROUBLESHOOTING\r\n\r\n  EXAMPLE 13: Debug MCP server issues\r\n\r\n    cycod mcp get problematic-server\r\n    cycod mcp remove problematic-server\r\n    cycod mcp add problematic-server --command \u0022npx\u0022 --args \u0022@playwright/mcp@latest --verbose\u0022\r\n\r\n  EXAMPLE 14: Isolated MCP testing\r\n\r\n    cycod --with-mcp \u0022npx @playwright/mcp@latest --isolated\u0022 --question \u0022Test this workflow without affecting my regular browser profile\u0022\r\n\r\nSEE ALSO\r\n\r\n  cycod help mcp\r\n  cycod help mcp add\r\n  cycod help mcp list\r\n  cycod help examples\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help mcp get\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD MCP GET\r\n\r\n  Display the details of a specific Model Context Protocol (MCP) server registration.\r\n\r\nUSAGE: cycod mcp get SERVER_NAME [--scope]\r\n\r\nOPTIONS\r\n\r\n  SERVER_NAME       The name of the MCP server registration to display\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    Get registration only from global scope (all users)\r\n    --user, -u      Get registration only from user scope (current user)\r\n    --local, -l     Get registration only from local scope (current directory)\r\n    --any, -a       Get registration from all scopes (default)\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: Display a Playwright MCP server registration from any scope\r\n\r\n    cycod mcp get playwright\r\n\r\n  EXAMPLE 2: Display a Playwright MCP server registration from user scope\r\n\r\n    cycod mcp get playwright-headless --user\r\n\r\nSEE ALSO\r\n\r\n  cycod help mcp\r\n  cycod help mcp list\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help mcp list\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD MCP LIST\r\n\r\n  List all registered Model Context Protocol (MCP) server registrations.\r\n\r\nUSAGE: cycod mcp list [--scope]\r\n\r\nOPTIONS\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    List MCP server registrations only from global scope (all users)\r\n    --user, -u      List MCP server registrations only from user scope (current user)\r\n    --local, -l     List MCP server registrations only from local scope (current directory)\r\n    --any, -a       List MCP server registrations from all scopes (default)\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: List all registered MCP server registrations\r\n\r\n    cycod mcp list\r\n\r\n  EXAMPLE 2: List only MCP server registrations from user scope\r\n\r\n    cycod mcp list --user\r\n\r\nSEE ALSO\r\n\r\n  cycod help mcp\r\n  cycod help mcp get\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help mcp remove\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD MCP REMOVE\r\n\r\n  Delete a Model Context Protocol (MCP) server registration.\r\n\r\nUSAGE: cycod mcp remove SERVER_NAME [--scope]\r\n\r\nOPTIONS\r\n\r\n  SERVER_NAME       The name of the MCP server registration to remove\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    Remove registration only from global scope (all users)\r\n    --user, -u      Remove registration only from user scope (current user)\r\n    --local, -l     Remove registration only from local scope (current directory)\r\n    --any, -a       Remove registration from first matching scope (default)\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: Remove a Playwright MCP server registration from any scope\r\n\r\n    cycod mcp remove playwright\r\n\r\n  EXAMPLE 2: Remove a Playwright MCP server registration only from the user scope\r\n\r\n    cycod mcp remove playwright-headless --user\r\n\r\nSEE ALSO\r\n\r\n  cycod help mcp\r\n  cycod help mcp list\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help prompt create\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD PROMPT CREATE\r\n\r\n  Create a new custom prompt.\r\n\r\nUSAGE: cycod prompt create PROMPT_NAME PROMPT_TEXT [--scope]\r\n\r\nOPTIONS\r\n\r\n  PROMPT_NAME      The name for the new prompt (used as /PROMPT_NAME in chat)\r\n  PROMPT_TEXT      The content of the prompt\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    Create in global scope (all users)\r\n    --user, -u      Create in user scope (current user)\r\n    --local, -l     Create in local scope (default)\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: Create a specialized code review prompt\r\n\r\n    cycod prompt create code-review \u0022Analyze this code and provide:\r\n    1. Security vulnerabilities and fixes\r\n    2. Performance optimization opportunities  \r\n    3. Code quality improvements with specific examples\u0022\r\n\r\n  EXAMPLE 2: Create a technical documentation prompt\r\n\r\n    cycod prompt create doc-gen \u0022Generate comprehensive API documentation including:\r\n    - Usage examples with real data\r\n    - Error handling scenarios\r\n    - Performance considerations\u0022 --user\r\n\r\n  EXAMPLE 3: Create a database optimization prompt\r\n\r\n    cycod prompt create db-optimize \u0022Review this database schema/query and suggest:\r\n    - Index optimizations\r\n    - Query performance improvements\r\n    - Schema design best practices\u0022\r\n\r\nNOTES\r\n\r\n  - Prompt names cannot contain spaces or special characters\r\n  - Leading slashes (/) will be automatically removed from prompt names\r\n  - Once created, prompts can be used in chat by typing /PROMPT_NAME\r\n  - Prompts cannot be created if a prompt with the same name already exists\r\n\r\nSEE ALSO\r\n\r\n  cycod help prompt\r\n  cycod help prompts\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help prompt delete\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD PROMPT DELETE\r\n\r\n  Delete a specific prompt.\r\n\r\nUSAGE: cycod prompt delete PROMPT_NAME [--scope]\r\n\r\nOPTIONS\r\n\r\n  PROMPT_NAME      The name of the prompt to delete\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    Delete only from global scope (all users)\r\n    --user, -u      Delete only from user scope (current user)\r\n    --local, -l     Delete only from local scope (current directory)\r\n    --any, -a       Delete from any scope where found (default)\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: Delete a prompt from any scope\r\n\r\n    cycod prompt delete myPrompt\r\n\r\n  EXAMPLE 2: Delete a prompt only if it exists in the user scope\r\n\r\n    cycod prompt delete myPrompt --user\r\n\r\nNOTES\r\n\r\n  When a prompt is found and deleted, the command:\r\n  - Deletes the main prompt file\r\n  - Deletes any referenced files (if the prompt uses external content)\r\n  - Displays the paths of all deleted files\r\n\r\nSEE ALSO\r\n\r\n  cycod help prompt\r\n  cycod help prompts\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help prompt examples\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD PROMPT EXAMPLES\r\n\r\n  Custom prompts create reusable text templates for specialized analysis tasks.\r\n  Use prompts for consistent formatting, specialized expertise, and workflow automation.\r\n\r\nCODE ANALYSIS PROMPTS\r\n\r\n  EXAMPLE 1: Create a comprehensive code review prompt\r\n\r\n    cycod prompt create code-review \u0022Analyze this code and provide: security vulnerabilities with fixes, performance bottlenecks with optimizations, code quality improvements with examples, and best practices violations with corrections\u0022\r\n\r\n  EXAMPLE 2: Create a security audit prompt\r\n\r\n    cycod prompt create security-audit \u0022Perform a security analysis focusing on authentication/authorization flaws, input validation issues, cryptographic problems, and common vulnerability patterns (OWASP Top 10)\u0022\r\n\r\n  EXAMPLE 3: Create a performance analysis prompt\r\n\r\n    cycod prompt create perf-analysis \u0022Analyze this code for performance issues: identify bottlenecks and inefficient algorithms, suggest optimization strategies with examples, recommend profiling approaches, and estimate performance impact of changes\u0022 --user\r\n\r\nDOCUMENTATION PROMPTS\r\n\r\n  EXAMPLE 4: Create an API documentation prompt\r\n\r\n    cycod prompt create api-docs \u0022Generate comprehensive API documentation including endpoint descriptions with examples, authentication requirements, error codes and handling, rate limiting guidelines, and SDK examples\u0022 --user\r\n\r\n  EXAMPLE 5: Create a README generation prompt\r\n\r\n    cycod prompt create readme-gen \u0022Create a comprehensive README.md including project description and purpose, installation and setup instructions, usage examples and code samples, API reference and configuration options, and contributing guidelines\u0022\r\n\r\n  EXAMPLE 6: Create a changelog prompt\r\n\r\n    cycod prompt create changelog \u0022Generate a changelog entry with categorized changes (Added, Changed, Fixed, Removed), impact assessment and migration notes, breaking changes highlighted clearly, and links to relevant issues\u0022\r\n\r\nDATABASE AND QUERY PROMPTS\r\n\r\n  EXAMPLE 7: Create a database optimization prompt\r\n\r\n    cycod prompt create db-optimize \u0022Review this database schema/query and suggest index optimizations for better performance, query restructuring for efficiency, schema design improvements, specific SQL examples for each recommendation, and performance measurement strategies\u0022\r\n\r\n  EXAMPLE 8: Create a data analysis prompt\r\n\r\n    cycod prompt create data-analyze \u0022Analyze this dataset and provide statistical summaries and key insights, data quality issues and cleaning suggestions, visualization recommendations, potential correlations and patterns, and actionable business insights\u0022\r\n\r\nARCHITECTURE AND DESIGN PROMPTS\r\n\r\n  EXAMPLE 9: Create a system architecture review prompt\r\n\r\n    cycod prompt create arch-review \u0022Evaluate this system architecture for scalability and performance considerations, security architecture and threat modeling, maintainability and technical debt, integration patterns and dependencies, and deployment and operational concerns\u0022 --user\r\n\r\n  EXAMPLE 10: Create a design pattern analysis prompt\r\n\r\n    cycod prompt create design-patterns \u0022Analyze the design patterns in this code: identify current patterns and their appropriateness, suggest alternative patterns where beneficial, highlight anti-patterns and refactoring opportunities, and provide concrete implementation examples\u0022\r\n\r\nTESTING AND QUALITY PROMPTS\r\n\r\n  EXAMPLE 11: Create a test generation prompt\r\n\r\n    cycod prompt create test-gen \u0022Generate comprehensive tests including unit tests with edge cases and error conditions, integration tests for system interactions, performance and load testing scenarios, test data setup and teardown procedures, and mocking strategies for external dependencies\u0022\r\n\r\n  EXAMPLE 12: Create a bug analysis prompt\r\n\r\n    cycod prompt create bug-analysis \u0022Analyze this bug report and code: identify root cause with evidence, provide step-by-step reproduction instructions, assess impact and risk evaluation, suggest multiple solution approaches with trade-offs, and recommend prevention strategies for similar issues\u0022\r\n\r\nUSING PROMPTS IN CHAT\r\n\r\n  EXAMPLE 13: Use code review prompt during development\r\n\r\n    cycod\r\n    \u003E /code-review\r\n    [paste your code here for comprehensive review]\r\n\r\n  EXAMPLE 14: Use API documentation prompt for new endpoints\r\n\r\n    cycod\r\n    \u003E /api-docs\r\n    [paste API code here for documentation generation]\r\n\r\n  EXAMPLE 15: Chain prompts for comprehensive analysis\r\n\r\n    cycod\r\n    \u003E /security-audit\r\n    [paste code for security review]\r\n    \u003E /perf-analysis\r\n    [paste same code for performance analysis]\r\n\r\nPROMPT MANAGEMENT\r\n\r\n  EXAMPLE 16: List all available prompts\r\n\r\n    cycod prompt list\r\n\r\n  EXAMPLE 17: View specific prompt content\r\n\r\n    cycod prompt get code-review\r\n\r\n  EXAMPLE 18: Update existing prompt\r\n\r\n    cycod prompt delete code-review\r\n    cycod prompt create code-review \u0022Updated comprehensive code review template...\u0022\r\n\r\n  EXAMPLE 19: Remove unused prompts\r\n\r\n    cycod prompt delete old-prompt\r\n\r\nSCOPE AND SHARING\r\n\r\n  EXAMPLE 20: Create user-wide prompts for personal workflows\r\n\r\n    cycod prompt create personal-review \u0022Custom review template with my preferences\u0022 --user\r\n\r\n  EXAMPLE 21: Create team-standard prompts\r\n\r\n    cycod prompt create team-standards \u0022Follow company coding standards and practices\u0022 --global\r\n\r\n  EXAMPLE 22: View prompts from different scopes\r\n\r\n    cycod prompt list --user\r\n    cycod prompt list --global\r\n\r\nADVANCED PROMPT TECHNIQUES\r\n\r\n  EXAMPLE 23: Create multi-step analysis prompt\r\n\r\n    cycod prompt create deep-analysis \u0022Perform this analysis in three phases: Phase 1 - Initial code structure and architecture review, Phase 2 - Detailed security and performance analysis, Phase 3 - Recommendations with implementation priorities. For each phase, provide specific actionable insights.\u0022\r\n\r\n  EXAMPLE 24: Create context-aware prompt\r\n\r\n    cycod prompt create context-review \u0022Before analyzing the code, first understand the project\u0027s business domain and requirements, the technology stack and architectural constraints, and the team\u0027s experience level and preferences. Then provide tailored recommendations based on this context.\u0022\r\n\r\n  EXAMPLE 25: Create prompt with structured output format\r\n\r\n    cycod prompt create structured-report \u0022Provide analysis in this format: Summary (brief overview), Critical Issues (high-priority problems), Recommendations (specific actionable improvements), and Next Steps (prioritized implementation plan)\u0022\r\n\r\nSEE ALSO\r\n\r\n  cycod help prompt\r\n  cycod help prompt create\r\n  cycod help prompt list\r\n  cycod help prompts\r\n  cycod help slash commands\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help prompt get\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD PROMPT GET\r\n\r\n  Display the content of a specific prompt.\r\n\r\nUSAGE: cycod prompt get PROMPT_NAME [--scope]\r\n\r\nOPTIONS\r\n\r\n  PROMPT_NAME      The name of the prompt to display\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    Look only in global scope (all users)\r\n    --user, -u      Look only in user scope (current user)\r\n    --local, -l     Look only in local scope (current directory)\r\n    --any, -a       Look in all scopes (default)\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: Display a prompt from any scope\r\n\r\n    cycod prompt get myPrompt\r\n\r\n  EXAMPLE 2: Display a prompt only if it exists in the user scope\r\n\r\n    cycod prompt get myPrompt --user\r\n\r\nNOTES\r\n\r\n  When a prompt is found, the command displays:\r\n  - The prompt name\r\n  - The file location and scope\r\n  - The prompt content\r\n  - Usage example for the prompt in chat\r\n\r\nSEE ALSO\r\n\r\n  cycod help prompt\r\n  cycod help prompts\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help prompt list\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD PROMPT LIST\r\n\r\n  List all available prompts across all scopes or in a specific scope.\r\n\r\nUSAGE: cycod prompt list [--scope]\r\n\r\nOPTIONS\r\n\r\n  SCOPE OPTIONS\r\n\r\n    --global, -g    List only global prompts (all users)\r\n    --user, -u      List only user prompts (current user)\r\n    --local, -l     List only local prompts (current directory)\r\n    --any, -a       List prompts from all scopes (default)\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: List all prompts from all scopes\r\n\r\n    cycod prompt list\r\n\r\n  EXAMPLE 2: List only user prompts\r\n\r\n    cycod prompt list --user\r\n\r\nSEE ALSO\r\n\r\n  cycod help prompt\r\n  cycod help prompts\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help slash commands\u0060\r\n\r\n\u0060\u0060\u0060\r\nCYCOD SLASH COMMANDS\r\n\r\n  During an interactive chat session, you can use slash commands to quickly \r\n  access various functions without exiting your conversation.\r\n\r\nBUILT-IN COMMANDS\r\n\r\n  SESSION MANAGEMENT\r\n\r\n    /clear                  Clear the current chat history\r\n    /save                   Save the current chat history to a file\r\n    /cost                   Show token usage and estimated cost of this session\r\n\r\n  CUSTOM PROMPTS\r\n\r\n    /\u003Cpromptname\u003E           Insert a custom prompt into the chat\r\n\r\n  CYCODMD INTEGRATION\r\n\r\n    /file \u003Cpattern\u003E         Search files matching pattern\r\n    /files \u003Cpattern\u003E        List files matching pattern\r\n    /find \u003Cpattern\u003E         Find occurrences of pattern in files\r\n    /search \u003Cquery\u003E         Search the web for the given query\r\n    /get \u003Curl\u003E              Get and display content from a URL\r\n    /run \u003Ccommand\u003E          Run a command and display the result\r\n    \r\n  IMAGE SUPPORT\r\n  \r\n    /image \u003Cfile\u003E           Add an image file to the current conversation (supports glob patterns)\r\n\r\nEXAMPLES\r\n\r\n  EXAMPLE 1: Clear the current chat session\r\n\r\n    /clear\r\n\r\n  EXAMPLE 2: Search for files in the current directory\r\n\r\n    /file *.cs              List all C# files in current directory\r\n\r\n  EXAMPLE 3: Find text within files\r\n\r\n    /find \u0022class Program\u0022   Find occurrences of \u0022class Program\u0022 in files\r\n\r\n  EXAMPLE 4: Use the web search integration\r\n\r\n    /search python lists    Search the web for information about Python lists\r\n\r\n  EXAMPLE 5: Insert a custom prompt (if defined)\r\n\r\n    /translate              Insert a custom \u0022translate\u0022 prompt\r\n    \r\n  EXAMPLE 6: Add an image to the conversation\r\n\r\n    /image screenshot.png   Add an image file to discuss\r\n    /image *.jpg            Add all JPEG files in current directory\r\n\r\nNOTES\r\n\r\n  - The CYCODMD integration commands require CYCODMD to be installed and available.\r\n    For more information about CYCODMD, visit: https://github.com/robch/cycodmd\r\n\r\n  - Custom prompts can be created using the prompt create command.\r\n    Example: cycod prompt create summarize \u0022Please summarize this text:\u0022\r\n\r\nSEE ALSO\r\n\r\n  cycod help prompts\r\n  cycod help prompt create\r\n  cycod help prompt list\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help use anthropic\u0060\r\n\r\n\u0060\u0060\u0060\r\nUSE ANTHROPIC\r\n\r\n  AUTHENTICATION\r\n\r\n    EXAMPLE 1: Set Anthropic API key via config\r\n\r\n      cycod config set Anthropic.ApiKey KEY\r\n      cycod config set Anthropic.ApiKey KEY --local\r\n      cycod config set Anthropic.ApiKey KEY --user\r\n      cycod config set Anthropic.ApiKey KEY --global\r\n\r\n    EXAMPLE 2: Set Anthropic API key via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export ANTHROPIC_API_KEY=\u0022YOUR_API_KEY\u0022\r\n\r\n      # CMD (Windows)\r\n      set ANTHROPIC_API_KEY=YOUR_API_KEY\r\n\r\n      # PowerShell (Windows)\r\n      $env:ANTHROPIC_API_KEY = \u0022YOUR_API_KEY\u0022\r\n\r\n    EXAMPLE 3: Supply Anthropic API key via command line\r\n\r\n      cycod chat --anthropic-api-key KEY\r\n\r\n  MODEL SELECTION\r\n\r\n    EXAMPLE 1: Set Anthropic model name via config\r\n\r\n      cycod config set Anthropic.ModelName claude-sonnet-4\r\n      cycod config set Anthropic.ModelName claude-sonnet-4 --local\r\n      cycod config set Anthropic.ModelName claude-sonnet-4 --user\r\n      cycod config set Anthropic.ModelName claude-sonnet-4 --global\r\n\r\n    EXAMPLE 2: Set Anthropic model name via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export ANTHROPIC_MODEL_NAME=\u0022claude-sonnet-4\u0022\r\n\r\n      # CMD (Windows)\r\n      set ANTHROPIC_MODEL_NAME=claude-sonnet-4\r\n\r\n      # PowerShell (Windows)\r\n      $env:ANTHROPIC_MODEL_NAME = \u0022claude-sonnet-4\u0022\r\n\r\n    EXAMPLE 3: Use Claude Sonnet 4 for advanced reasoning tasks\r\n\r\n      cycod chat --anthropic-model-name claude-sonnet-4\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help use bedrock\u0060\r\n\r\n\u0060\u0060\u0060\r\nUSE BEDROCK\r\n\r\n  AUTHENTICATION\r\n\r\n    EXAMPLE 1: Set AWS Bedrock credentials via config\r\n\r\n      cycod config set AWS.Bedrock.AccessKey ACCESS_KEY\r\n      cycod config set AWS.Bedrock.AccessKey ACCESS_KEY --local\r\n      cycod config set AWS.Bedrock.AccessKey ACCESS_KEY --user\r\n      cycod config set AWS.Bedrock.AccessKey ACCESS_KEY --global\r\n\r\n      cycod config set AWS.Bedrock.SecretKey SECRET_KEY\r\n      cycod config set AWS.Bedrock.SecretKey SECRET_KEY --local\r\n      cycod config set AWS.Bedrock.SecretKey SECRET_KEY --user\r\n      cycod config set AWS.Bedrock.SecretKey SECRET_KEY --global\r\n\r\n      cycod config set AWS.Bedrock.Region REGION_NAME\r\n      cycod config set AWS.Bedrock.Region REGION_NAME --local\r\n      cycod config set AWS.Bedrock.Region REGION_NAME --user\r\n      cycod config set AWS.Bedrock.Region REGION_NAME --global\r\n\r\n    EXAMPLE 2: Set AWS Bedrock credentials via environment variables\r\n\r\n      # Bash (Linux/macOS)\r\n      export AWS_BEDROCK_ACCESS_KEY=\u0022YOUR_ACCESS_KEY\u0022\r\n      export AWS_BEDROCK_SECRET_KEY=\u0022YOUR_SECRET_KEY\u0022\r\n      export AWS_BEDROCK_REGION=\u0022us-east-1\u0022\r\n\r\n      # CMD (Windows)\r\n      set AWS_BEDROCK_ACCESS_KEY=YOUR_ACCESS_KEY\r\n      set AWS_BEDROCK_SECRET_KEY=YOUR_SECRET_KEY\r\n      set AWS_BEDROCK_REGION=us-east-1\r\n\r\n      # PowerShell (Windows)\r\n      $env:AWS_BEDROCK_ACCESS_KEY = \u0022YOUR_ACCESS_KEY\u0022\r\n      $env:AWS_BEDROCK_SECRET_KEY = \u0022YOUR_SECRET_KEY\u0022\r\n      $env:AWS_BEDROCK_REGION = \u0022us-east-1\u0022\r\n\r\n    EXAMPLE 3: Supply AWS Bedrock credentials via command line\r\n\r\n      cycod chat --aws-bedrock-access-key ACCESS_KEY --aws-bedrock-secret-key SECRET_KEY --aws-bedrock-region REGION_NAME\r\n\r\n  MODEL SELECTION\r\n\r\n    EXAMPLE 1: Set AWS Bedrock model via config\r\n\r\n      cycod config set AWS.Bedrock.ModelId MODEL_ID\r\n      cycod config set AWS.Bedrock.ModelId MODEL_ID --local\r\n      cycod config set AWS.Bedrock.ModelId MODEL_ID --user\r\n      cycod config set AWS.Bedrock.ModelId MODEL_ID --global\r\n\r\n    EXAMPLE 2: Set AWS Bedrock model via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export AWS_BEDROCK_MODEL_ID=\u0022anthropic.claude-3-5-sonnet-20241022-v2:0\u0022\r\n\r\n      # CMD (Windows)\r\n      set AWS_BEDROCK_MODEL_ID=anthropic.claude-3-5-sonnet-20241022-v2:0\r\n\r\n      # PowerShell (Windows)\r\n      $env:AWS_BEDROCK_MODEL_ID = \u0022anthropic.claude-3-5-sonnet-20241022-v2:0\u0022\r\n\r\n    EXAMPLE 3: Use Claude 3.5 Sonnet on AWS Bedrock\r\n\r\n      cycod chat --aws-bedrock-model-id anthropic.claude-3-5-sonnet-20241022-v2:0\r\n\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help use gemini\u0060\r\n\r\n\u0060\u0060\u0060\r\nUSE GEMINI\r\n\r\n  AUTHENTICATION\r\n\r\n    EXAMPLE 1: Set Google Gemini credentials via config\r\n    \r\n      cycod config set Google.Gemini.ApiKey API_KEY\r\n      cycod config set Google.Gemini.ApiKey API_KEY --local\r\n      cycod config set Google.Gemini.ApiKey API_KEY --user\r\n      cycod config set Google.Gemini.ApiKey API_KEY --global\r\n\r\n    EXAMPLE 2: Set Google Gemini credentials via environment variables\r\n    \r\n      # Bash (Linux/macOS)\r\n      export GOOGLE_GEMINI_API_KEY=\u0022YOUR_API_KEY\u0022\r\n\r\n      # CMD (Windows)\r\n      set GOOGLE_GEMINI_API_KEY=YOUR_API_KEY\r\n\r\n      # PowerShell (Windows)\r\n      $env:GOOGLE_GEMINI_API_KEY = \u0022YOUR_API_KEY\u0022\r\n    \r\n    EXAMPLE 3: Supply Google Gemini credentials via command line\r\n    \r\n      cycod chat --google-gemini-api-key API_KEY\r\n\r\n  MODEL SELECTION\r\n\r\n    EXAMPLE 1: Set Google Gemini model via config\r\n    \r\n      cycod config set Google.Gemini.ModelId gemini-2.5-pro\r\n      cycod config set Google.Gemini.ModelId gemini-2.5-pro --local\r\n      cycod config set Google.Gemini.ModelId gemini-2.5-pro --user\r\n      cycod config set Google.Gemini.ModelId gemini-2.5-pro --global\r\n    \r\n    EXAMPLE 2: Set Google Gemini model via environment variable\r\n    \r\n      # Bash (Linux/macOS)\r\n      export GOOGLE_GEMINI_MODEL_ID=\u0022gemini-2.5-pro\u0022\r\n\r\n      # CMD (Windows)\r\n      set GOOGLE_GEMINI_MODEL_ID=gemini-2.5-pro\r\n\r\n      # PowerShell (Windows)\r\n      $env:GOOGLE_GEMINI_MODEL_ID = \u0022gemini-2.5-pro\u0022\r\n    \r\n    EXAMPLE 3: Use the latest Gemini model for development tasks\r\n\r\n      cycod chat --google-gemini-model-id gemini-2.5-pro\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help use grok\u0060\r\n\r\n\u0060\u0060\u0060\r\nUSE GROK\r\n\r\n  AUTHENTICATION\r\n\r\n    EXAMPLE 1: Set Grok API key via config\r\n\r\n      cycod config set Grok.ApiKey KEY\r\n      cycod config set Grok.ApiKey KEY --local\r\n      cycod config set Grok.ApiKey KEY --user\r\n      cycod config set Grok.ApiKey KEY --global\r\n\r\n    EXAMPLE 2: Set Grok API key via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export GROK_API_KEY=\u0022YOUR_API_KEY\u0022\r\n\r\n      # CMD (Windows)\r\n      set GROK_API_KEY=YOUR_API_KEY\r\n\r\n      # PowerShell (Windows)\r\n      $env:GROK_API_KEY = \u0022YOUR_API_KEY\u0022\r\n\r\n    EXAMPLE 3: Supply Grok API key via command line\r\n\r\n      cycod chat --grok-api-key KEY\r\n\r\n  MODEL SELECTION\r\n\r\n    EXAMPLE 1: Set Grok model name via config\r\n\r\n      cycod config set Grok.ModelName MODEL_NAME\r\n      cycod config set Grok.ModelName MODEL_NAME --local\r\n      cycod config set Grok.ModelName MODEL_NAME --user\r\n      cycod config set Grok.ModelName MODEL_NAME --global\r\n\r\n    EXAMPLE 2: Set Grok model name via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export GROK_MODEL_NAME=\u0022grok-3\u0022\r\n\r\n      # CMD (Windows)\r\n      set GROK_MODEL_NAME=grok-3\r\n\r\n      # PowerShell (Windows)\r\n      $env:GROK_MODEL_NAME = \u0022grok-3\u0022\r\n\r\n    EXAMPLE 3: Supply Grok model name via command line\r\n\r\n      cycod chat --grok-model-name MODEL_NAME\r\n\r\n  API ENDPOINT\r\n\r\n    EXAMPLE 1: Set Grok API endpoint via config\r\n\r\n      cycod config set Grok.Endpoint ENDPOINT\r\n      cycod config set Grok.Endpoint ENDPOINT --local\r\n      cycod config set Grok.Endpoint ENDPOINT --user\r\n      cycod config set Grok.Endpoint ENDPOINT --global\r\n\r\n    EXAMPLE 2: Set Grok API endpoint via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export GROK_ENDPOINT=\u0022https://api.x.ai/v1\u0022\r\n\r\n      # CMD (Windows)\r\n      set GROK_ENDPOINT=https://api.x.ai/v1\r\n\r\n      # PowerShell (Windows)\r\n      $env:GROK_ENDPOINT = \u0022https://api.x.ai/v1\u0022\r\n\r\n    EXAMPLE 3: Supply Grok API endpoint via command line\r\n\r\n      cycod chat --grok-endpoint ENDPOINT\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help use openai\u0060\r\n\r\n\u0060\u0060\u0060\r\nUSE OPENAI\r\n\r\n  AUTHENTICATION\r\n\r\n    EXAMPLE 1: Set OpenAI API key via config\r\n\r\n      cycod config set OpenAI.ApiKey KEY\r\n      cycod config set OpenAI.ApiKey KEY --local\r\n      cycod config set OpenAI.ApiKey KEY --user\r\n      cycod config set OpenAI.ApiKey KEY --global\r\n\r\n    EXAMPLE 2: Set OpenAI API key via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export OPENAI_API_KEY=\u0022YOUR_API_KEY\u0022\r\n\r\n      # CMD (Windows)\r\n      set OPENAI_API_KEY=YOUR_API_KEY\r\n\r\n      # PowerShell (Windows)\r\n      $env:OPENAI_API_KEY = \u0022YOUR_API_KEY\u0022\r\n\r\n    EXAMPLE 3: Supply OpenAI API key via command line\r\n\r\n      cycod chat --openai-api-key KEY\r\n\r\n  MODEL SELECTION\r\n\r\n    EXAMPLE 1: Set OpenAI model name via config\r\n\r\n      cycod config set OpenAI.ChatModelName gpt-5-mini\r\n      cycod config set OpenAI.ChatModelName gpt-5-mini --local\r\n      cycod config set OpenAI.ChatModelName gpt-5-mini --user\r\n      cycod config set OpenAI.ChatModelName gpt-5-mini --global\r\n\r\n    EXAMPLE 2: Set OpenAI model name via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export OPENAI_CHAT_MODEL_NAME=\u0022gpt-5-mini\u0022\r\n\r\n      # CMD (Windows)\r\n      set OPENAI_CHAT_MODEL_NAME=gpt-5-mini\r\n\r\n      # PowerShell (Windows)\r\n      $env:OPENAI_CHAT_MODEL_NAME = \u0022gpt-5-mini\u0022\r\n\r\n    EXAMPLE 3: Use a specific model optimized for code generation\r\n\r\n      cycod chat --openai-chat-model-name gpt-5-mini\r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help use azure openai\u0060\r\n\r\n\u0060\u0060\u0060\r\nUSE AZURE OPENAI\r\n\r\n  AUTHENTICATION\r\n\r\n    EXAMPLE 1: Set Azure OpenAI API key via config\r\n\r\n      cycod config set Azure.OpenAI.ApiKey KEY\r\n      cycod config set Azure.OpenAI.ApiKey KEY --local\r\n      cycod config set Azure.OpenAI.ApiKey KEY --user\r\n      cycod config set Azure.OpenAI.ApiKey KEY --global\r\n\r\n    EXAMPLE 2: Set Azure OpenAI API key via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export AZURE_OPENAI_API_KEY=\u0022YOUR_API_KEY\u0022\r\n\r\n      # CMD (Windows)\r\n      set AZURE_OPENAI_API_KEY=YOUR_API_KEY\r\n\r\n      # PowerShell (Windows)\r\n      $env:AZURE_OPENAI_API_KEY = \u0022YOUR_API_KEY\u0022\r\n\r\n    EXAMPLE 3: Supply Azure OpenAI API key via command line\r\n\r\n      cycod chat --azure-openai-api-key KEY\r\n\r\n  ENDPOINT \r\n\r\n    EXAMPLE 1: Set Azure OpenAI API endpoint via config\r\n\r\n      cycod config set Azure.OpenAI.Endpoint ENDPOINT\r\n      cycod config set Azure.OpenAI.Endpoint ENDPOINT --local\r\n      cycod config set Azure.OpenAI.Endpoint ENDPOINT --user\r\n      cycod config set Azure.OpenAI.Endpoint ENDPOINT --global\r\n\r\n    EXAMPLE 2: Set Azure OpenAI API endpoint via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export AZURE_OPENAI_ENDPOINT=\u0022https://your-resource.openai.azure.com\u0022\r\n\r\n      # CMD (Windows)\r\n      set AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com\r\n\r\n      # PowerShell (Windows)\r\n      $env:AZURE_OPENAI_ENDPOINT = \u0022https://your-resource.openai.azure.com\u0022\r\n\r\n    EXAMPLE 3: Supply Azure OpenAI API endpoint via command line\r\n\r\n      cycod chat --azure-openai-endpoint ENDPOINT\r\n\r\n  MODEL SELECTION\r\n\r\n    EXAMPLE 1: Set Azure OpenAI model deployment name via config\r\n\r\n      cycod config set Azure.OpenAI.ChatDeployment MODEL_NAME\r\n      cycod config set Azure.OpenAI.ChatDeployment MODEL_NAME --local\r\n      cycod config set Azure.OpenAI.ChatDeployment MODEL_NAME --user\r\n      cycod config set Azure.OpenAI.ChatDeployment MODEL_NAME --global\r\n\r\n    EXAMPLE 2: Set Azure OpenAI deployment name via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export AZURE_OPENAI_CHAT_DEPLOYMENT=\u0022gpt-4\u0022\r\n\r\n      # CMD (Windows)\r\n      set AZURE_OPENAI_CHAT_DEPLOYMENT=gpt-4\r\n\r\n      # PowerShell (Windows)\r\n      $env:AZURE_OPENAI_CHAT_DEPLOYMENT = \u0022gpt-4\u0022\r\n\r\n    EXAMPLE 3: Supply Azure OpenAI deployment name via command line\r\n\r\n      cycod chat --azure-openai-chat-deployment MODEL_NAME\r\n\r\n  \r\n\u0060\u0060\u0060\r\n\r\n## \u0060cycod help use github copilot\u0060\r\n\r\n\u0060\u0060\u0060\r\nUSE GITHUB COPILOT\r\n\r\n  AUTHENTICATION\r\n\r\n    EXAMPLE 1: Set GitHub Copilot token via device-code login\r\n\r\n      cycod github login\r\n      cycod github login --local\r\n      cycod github login --user\r\n      cycod github login --global\r\n\r\n    EXAMPLE 2: Set GitHub Copilot token via config\r\n\r\n      cycod config set GitHub.Token TOKEN\r\n      cycod config set GitHub.Token TOKEN --local\r\n      cycod config set GitHub.Token TOKEN --user\r\n      cycod config set GitHub.Token TOKEN --global\r\n\r\n    EXAMPLE 3: Set GitHub Copilot token via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export GITHUB_TOKEN=\u0022ghp_1234567890abcdef1234567890abcdef12345678\u0022\r\n\r\n      # CMD (Windows)\r\n      set GITHUB_TOKEN=ghp_1234567890abcdef1234567890abcdef12345678\r\n\r\n      # PowerShell (Windows)\r\n      $env:GITHUB_TOKEN = \u0022ghp_1234567890abcdef1234567890abcdef12345678\u0022\r\n\r\n    EXAMPLE 4: Supply GitHub Copilot token via command line\r\n\r\n      cycod chat --github-token ghp_1234567890abcdef1234567890abcdef12345678\r\n\r\n  MODEL SELECTION\r\n\r\n    EXAMPLE 1: Set Copilot model name via config\r\n\r\n      cycod config set Copilot.ModelName MODEL_NAME\r\n      cycod config set Copilot.ModelName MODEL_NAME --local\r\n      cycod config set Copilot.ModelName MODEL_NAME --user\r\n      cycod config set Copilot.ModelName MODEL_NAME --global\r\n\r\n    EXAMPLE 2: Set Copilot model name via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export COPILOT_MODEL_NAME=\u0022claude-sonnet-4\u0022\r\n\r\n      # CMD (Windows)\r\n      set COPILOT_MODEL_NAME=claude-sonnet-4\r\n\r\n      # PowerShell (Windows)\r\n      $env:COPILOT_MODEL_NAME = \u0022claude-sonnet-4\u0022\r\n\r\n    EXAMPLE 3: Use a specific model for your Azure deployment\r\n\r\n      cycod chat --copilot-model-name gpt-4o\r\n\r\n  ADDITIONAL SETTINGS\r\n\r\n    EXAMPLE 1: Set Copilot API endpoint via config\r\n\r\n      cycod config set Copilot.ApiEndpoint ENDPOINT\r\n      cycod config set Copilot.ApiEndpoint ENDPOINT --local\r\n      cycod config set Copilot.ApiEndpoint ENDPOINT --user\r\n      cycod config set Copilot.ApiEndpoint ENDPOINT --global\r\n\r\n    EXAMPLE 2: Set Copilot API endpoint via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export COPILOT_API_ENDPOINT=\u0022https://api.githubcopilot.com\u0022\r\n\r\n      # CMD (Windows)\r\n      set COPILOT_API_ENDPOINT=https://api.githubcopilot.com\r\n\r\n      # PowerShell (Windows)\r\n      $env:COPILOT_API_ENDPOINT = \u0022https://api.githubcopilot.com\u0022\r\n\r\n    EXAMPLE 3: Supply Copilot API endpoint via command line\r\n\r\n      cycod chat --copilot-api-endpoint ENDPOINT\r\n\r\n    EXAMPLE 4: Set Copilot editor version via config\r\n\r\n      cycod config set Copilot.EditorVersion VERSION\r\n      cycod config set Copilot.EditorVersion VERSION --local\r\n      cycod config set Copilot.EditorVersion VERSION --user\r\n      cycod config set Copilot.EditorVersion VERSION --global\r\n\r\n    EXAMPLE 5: Set Copilot editor version via environment variable\r\n\r\n      # Bash (Linux/macOS)\r\n      export COPILOT_EDITOR_VERSION=\u0022vscode/1.83.1\u0022\r\n\r\n      # CMD (Windows)\r\n      set COPILOT_EDITOR_VERSION=vscode/1.83.1\r\n\r\n      # PowerShell (Windows)\r\n      $env:COPILOT_EDITOR_VERSION = \u0022vscode/1.83.1\u0022\r\n\r\n    EXAMPLE 6: Supply Copilot editor version via command line\r\n\r\n      cycod chat --copilot-editor-version VERSION\r\n\r\n\u0060\u0060\u0060\r\n\r\n\r\n## src\\cycodt\\TestFramework\\README.md\r\n\r\nModified: 8/5/2025 4:44:23 PM\r\nSize: 9 KB\r\n\r\n\u0060\u0060\u0060\u0060markdown\r\n# \u0060cycodt\u0060\r\n\r\n\u0060cycodt\u0060 is a YAML-based test framework/runner that can be used to run tests on any command-line tool or script. It is designed to be simple to use and understand, and to be able to run tests in parallel.\r\n\r\nExample:\r\n\r\n\u0060\u0060\u0060yaml\r\n- name: Ensure nothing to commit in worktree\r\n  run: git status\r\n  expect-regex: |\r\n    On branch master\r\n    nothing to commit, working tree clean\r\n\u0060\u0060\u0060\r\n\r\nThe test case YAML file contains a list of test cases. Each test case is a dictionary with the following keys:\r\n\r\n- \u0060tests\u0060, \u0060steps\u0060 (required): A list of test cases to run.\r\n* \u0060command\u0060, \u0060script\u0060, \u0060bash\u0060 (required): The command or script to run.\r\n* \u0060name\u0060 (required): The name of the test case.\r\n- \u0060env\u0060 (optional): A dictionary of environment variables to set before running the command or script.\r\n- \u0060input\u0060 (optional): The input to pass to the command or script.\r\n- \u0060expect\u0060 (optional): A string that instructs the LLM (e.g. GPT-4) to decide pass/fail based on stdout/stderr.\r\n- \u0060expect-regex\u0060 (optional): A list of regular expressions that must be matched in the stdout/stderr output.\r\n- \u0060not-expect-regex\u0060 (optional): A list of regular expressions that must not be matched in the stdout/stderr output.\r\n- \u0060parallelize\u0060 (optional): Whether the test case should run in parallel with other test cases.\r\n- \u0060skipOnFailure\u0060 (optional): Whether the test case should be skipped when it fails.\r\n- \u0060tag\u0060/\u0060tags\u0060 (optional): A list of tags to associate with the test case.\r\n- \u0060timeout\u0060 (optional): The maximum time allowed to execute the test case, in milliseconds.\r\n- \u0060workingDirectory\u0060 (optional): The working directory where the test will be run.\r\n- \u0060matrix\u0060, \u0060matrix-file\u0060 (optional): A matrix used to parameterize and/or create multiple variations of a test case.\r\n\r\nTest cases can be organized into areas, sub-areas, and so on.\r\n\r\n\u0060\u0060\u0060yaml\r\n- area: Area 1\r\n  tests:\r\n\r\n  - name: Test 1\r\n    bash: echo \u0022Hello, world!\u0022\r\n\r\n  - name: Test 2\r\n    bash: echo \u0022Goodbye, world!\u0022\r\n\u0060\u0060\u0060\r\n\r\nTest cases can also be grouped into classes. \r\n\r\n\u0060\u0060\u0060yaml\r\n- class: Class 1\r\n  tests:\r\n\r\n  - name: Test 1\r\n    bash: echo \u0022Hello, world!\u0022\r\n\r\n  - name: Test 2\r\n    bash: echo \u0022Goodbye, world!\u0022\r\n\u0060\u0060\u0060\r\n\r\nIf no class is specified, the default class is \u0022TestCases\u0022.\r\n\r\n## \u0060tests\u0060, \u0060steps\u0060\r\n\r\nRequired.\r\n\r\nWhen present, specifies a list of test cases to run.\r\n\r\nBy default, for \u0060steps\u0060, all tests will be run sequentially. The full set of tests will be run in parallel with other \u0060steps\u0060 for other test areas, unless \u0060parallelize: false\u0060 is set.\r\n\r\nExamples:\r\n\r\n\u0060\u0060\u0060yaml\r\ntests:\r\n- name: Test 1\r\n  bash: echo \u0022Hello, world!\u0022\r\n- name: Test 2\r\n  bash: echo \u0022Goodbye, world!\u0022\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060yaml\r\nsteps:\r\n- name: Step 1\r\n  bash: echo \u0022Hello, world!\u0022\r\n- name: Step 2\r\n  bash: echo \u0022Goodbye, world!\u0022\r\n\u0060\u0060\u0060\r\n\r\n## \u0060run\u0060, \u0060script\u0060, \u0060shell\u0060, \u0060bash\u0060, \u0060cmd\u0060, \u0060pwsh\u0060, \u0060powershell\u0060\r\n\r\nRequired.\r\n\r\nRepresents how the test case will be run.\r\n\r\nIf the specified command or script returns an error level of non-zero, the test will fail. If it returns zero, it will pass (given that all \u0027expect\u0027 conditions are also met).\r\n\r\nExample run command:\r\n\r\n\u0060\u0060\u0060yaml\r\nrun: git status\r\n\u0060\u0060\u0060\r\n\r\nExample for a script with a specific shell:\r\n\r\n\u0060\u0060\u0060yaml\r\nscript: |\r\n  echo \u0022Hello, world!\u0022\r\n  echo \u0022Goodbye, world!\u0022\r\nshell: bash\r\n\u0060\u0060\u0060\r\n\r\nFor convenience, you can use shell-specific shortcuts like \u0060bash\u0060, \u0060cmd\u0060, \u0060pwsh\u0060, or \u0060powershell\u0060:\r\n\r\nExample for a bash script:\r\n\r\n\u0060\u0060\u0060yaml\r\nbash: |\r\n  if [ -f /etc/os-release ]; then \r\n    python3 script.py \r\n  else \r\n    py script.py\r\n  fi\r\n\u0060\u0060\u0060\r\n\r\nExample for a PowerShell script:\r\n\r\n\u0060\u0060\u0060yaml\r\npwsh: |\r\n  if ($PSVersionTable.PSVersion.Major -ge 6) {\r\n    Write-Host \u0022Running on PowerShell Core\u0022\r\n  } else {\r\n    Write-Host \u0022Running on Windows PowerShell\u0022\r\n  }\r\n\u0060\u0060\u0060\r\n\r\nExample for a Windows PowerShell script:\r\n\r\n\u0060\u0060\u0060yaml\r\npowershell: |\r\n  if ($PSVersionTable.PSVersion.Major -ge 6) {\r\n    Write-Host \u0022Running on PowerShell Core\u0022\r\n  } else {\r\n    Write-Host \u0022Running on Windows PowerShell\u0022\r\n  }\r\n\u0060\u0060\u0060\r\n\r\nYou can also use custom shells, like python, etc. Just specify the shell template and the script.\r\nThe template will be used to run the script.  \r\n- The \u0060{0}\u0060 placeholder will be replaced with a temporary filename where the script is saved  \r\n- The \u0060{1}\u0060 placeholder will be replaced with the arguments passed to the script.  \r\n\r\n\u0060\u0060\u0060yaml\r\nshell: python {0} {1}\r\nscript: |\r\n  import sys\r\n  print(\u0022Hello from Python\u0022)\r\n  print(\u0022Arguments:\u0022, sys.argv)\r\narguments: 1 2 3\r\nexpect-regex: |\r\n  Hello from Python\r\n  Arguments: .*, \u00271\u0027, \u00272\u0027, \u00273\u0027\r\n\u0060\u0060\u0060\r\n\r\n## \u0060env\u0060\r\n\r\nOptional. Inherits from parent.\r\n\r\nWhen present, a dictionary of environment variables to set before running the command or script.\r\n\r\nExample:\r\n\r\n\u0060\u0060\u0060yaml\r\nenv:\r\n  JAVA_HOME: /path/to/java\r\n\u0060\u0060\u0060\r\n\r\n## \u0060input\u0060\r\n\r\nOptional.\r\n\r\nWhen present, will be passed to the command or script as stdin.\r\n\r\nExample:\r\n\r\n\u0060\u0060\u0060yaml\r\nrun: cycod chat\r\ninput: |\r\n  Tell me a joke\r\n  Tell me another\r\n  exit\r\n\u0060\u0060\u0060\r\n\r\n## \u0060expect\u0060\r\n\r\nOptional.\r\n\r\nRepresents instructions given to LLM (e.g. GPT-4) along with stdout/stderr to decide whether the test passes or fails.\r\n\r\nExample: \r\n\r\n\u0060\u0060\u0060yaml\r\nexpect: the output must have exactly two jokes\r\n\u0060\u0060\u0060\r\n\r\n## \u0060expect-regex\u0060\r\n\r\nOptional.\r\n\r\nEach string (or line in multiline string) is a regular expression that must be matched in the stdout/stderr output.\r\n\r\nIf any regular expression is not matched, the test will fail. If all expressions are matched, in order, the test will pass.\r\n\r\nExample:\r\n\r\n\u0060\u0060\u0060yaml\r\nexpect-regex: |\r\n  Regex 1\r\n  Regex 2\r\n\u0060\u0060\u0060\r\n\r\n## \u0060not-expect-regex\u0060\r\n\r\nOptional.\r\n\r\nWhen present, each string (or line in multiline string) is a regular expression that must not be matched in the stdout/stderr output.\r\n\r\nIf any regular expression is matched, the test fails. If none match, the test passes.\r\n\r\nExample:\r\n\r\n\u0060\u0060\u0060yaml\r\nnot-expect-regex: |\r\n  ERROR\r\n  curseword1\r\n  curseword2\r\n\u0060\u0060\u0060\r\n\r\n## \u0060expect-exit-code\u0060\r\n\r\nOptional.\r\n\r\nWhen present, specifies the expected exit code of the command or script.\r\n\r\nBy default, it is set to \u00600\u0060.\r\n\r\nExample:\r\n\r\n\u0060\u0060\u0060yaml\r\nexpect-exit-code: 1\r\n\u0060\u0060\u0060\r\n\r\n## \u0060parallelize\u0060\r\n\r\nOptional.\r\n\r\nWhen present, specifies if the test cases should run in parallel or not.\r\n\r\nBy default, it is set to \u0060false\u0060 for all tests, except for the first step in a \u0060steps\u0060 test sequence.\r\n\r\nExample:\r\n\r\n\u0060\u0060\u0060yaml\r\nparallelize: true\r\n\u0060\u0060\u0060\r\n\r\n## \u0060skipOnFailure\u0060\r\n\r\nOptional.\r\n\r\nWhen present, specifies if the test case should be skipped when it fails.\r\n\r\nBy default, it is set to \u0060false\u0060.\r\n\r\nExample: \r\n\r\n\u0060\u0060\u0060yaml\r\nskipOnFailure: true\r\n\u0060\u0060\u0060\r\n\r\n## \u0060tag\u0060/\u0060tags\u0060\r\n\r\nOptional. Inherits from parent.\r\n\r\nWhen present, specifies a list of tags to associate with the test case.\r\n\r\nTags accumulate from parent to child, so if a tag is specified in a parent, it will be inherited by all children.\r\n\r\nExamples:\r\n\r\n\u0060\u0060\u0060yaml\r\ntag: skip\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060yaml\r\ntags:\r\n- slow\r\n- performance\r\n- long-running\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060yaml\r\narea: Area 1\r\ntags: [echo]\r\ntests:\r\n\r\n- name: Test 1\r\n  bash: echo \u0022Hello, world!\u0022\r\n  tags: [hello]\r\n\r\n- name: Test 2\r\n  bash: echo \u0022Goodbye, world!\u0022\r\n  tags: [bye]\r\n\u0060\u0060\u0060\r\n\r\n## \u0060timeout\u0060\r\n\r\nOptional.\r\n\r\nWhen present, specifies the maximum time allowed to execute the test case, in milliseconds. Defaults to infinite.\r\n\r\nExample:\r\n\r\n\u0060\u0060\u0060yaml\r\ntimeout: 3000  # 3 seconds\r\n\u0060\u0060\u0060\r\n\r\n## \u0060workingDirectory\u0060\r\n\r\nOptional. Inherits from parent.\r\n\r\nWhen present, specifies an absolute path or relative path where the test will be run.\r\n\r\nWhen specified as a relative path, it will be relative to the working directory of the parent, or if no parent exists, where the test case file is located.\r\n\r\n## \u0060matrix\u0060, \u0060matrix-file\u0060\r\n\r\nOptional. Inerits from parent.\r\n\r\nWhen present, specifies a matrix (set of values) used to parameterize and/or create multiple variations of a test case with different parameter values. This is achieved using the \u0060matrix\u0060 key and \u0060${{ matrix.VALUE }}\u0060 syntax within the test cases.\r\n\r\nExamples:\r\n\r\n\u0060\u0060\u0060yaml\r\n- name: Example Matrix Test\r\n  matrix:\r\n    VALUE: [1, 2, 3]\r\n  bash: echo \u0022Value is ${{ matrix.VALUE }}\u0022\r\n\u0060\u0060\u0060\r\n\r\nIn this example, the test case will run three times with \u0060VALUE\u0060 set to 1, 2, and 3 respectively.\r\n\r\n\u0060\u0060\u0060yaml\r\nmatrix:\r\n  animals: [ cats, bears, goats ]\r\n  temperature: [ 0.8, 1.0 ]\r\nrun: cycod chat --input \u0022Tell me a joke about ${{ matrix.animals }}\u0022\r\nexpect: \u0027The joke should be about ${{ matrix.animals }}\u0027\r\n\u0060\u0060\u0060\r\n\r\nIn this example the test case will run six times (2x3) with \u0060temperature\u0060 set to 0.8 and 1.0, and \u0060animals\u0060 set to cats, bears, and goats.\r\n\r\n\u0060\u0060\u0060yaml\r\nmatrix:\r\n  temperature: asst_TqfFCksyWK83VKe76kiBYWGt\r\n  foreach:\r\n  - question: How do you create an MP3 file with speech synthesis from the text \u0022Hello, World!\u0022?\r\n  - question: How do you recognize speech from an MP3 file?\r\n  - question: How do you recognize speech from a microphone?\r\nsteps:\r\n- name: Inference call to \u0060cycod chat\u0060\r\n  run: cycod chat\r\n  arguments:\r\n    input: ${{ matrix.question }}\r\n    temperature: ${{ matrix.temperature }}\r\n    output-chat-history: chat-history-${{ matrix.__matrix_id__ }}.jsonl\r\n\u0060\u0060\u0060\r\n\r\nIn this example the test case will run three times with \u0060assistant-id\u0060 set to \u0060asst_TqfFCksyWK83VKe76kiBYWGt\u0060, and \u0060question\u0060 set to the three questions specified in the \u0060foreach\u0060 list, and the \u0060output-chat-history\u0060 specifies where to save the chat history, using a filename that is unique to the \u0022matrix\u0022 combination.\r\n\r\n\u0060\u0060\u0060yaml\r\nmatrix-file: questions.yaml\r\n\u0060\u0060\u0060\r\n\r\n\u0060questions.yaml\u0060:\r\n\u0060\u0060\u0060yaml\r\ntemperature: asst_TqfFCksyWK83VKe76kiBYWGt\r\nforeach:\r\n- question: How do you create an MP3 file with speech synthesis from the text \u0022Hello, World!\u0022?\r\n- question: How do you recognize speech from an MP3 file?\r\n- question: How do you recognize speech from a microphone?\r\n\u0060\u0060\u0060\r\n\r\nIn this example, the matrix is loaded from a file.\r\n\r\n\u0060\u0060\u0060\u0060\r\n\r\n## tests\\cycod-yaml\\testfiles\\README.md\r\n\r\nModified: 8/5/2025 4:44:23 PM\r\nSize: 45 bytes\r\n\r\n\u0060\u0060\u0060markdown\r\n# README.md\r\n\r\nThis is an example README.md\r\n\r\n\u0060\u0060\u0060\r\n\r\n## tests\\cycodt-yaml\\testfiles\\README.md\r\n\r\nModified: 8/5/2025 4:44:23 PM\r\nSize: 45 bytes\r\n\r\n\u0060\u0060\u0060markdown\r\n# README.md\r\n\r\nThis is an example README.md\r\n\r\n\u0060\u0060\u0060\r\n\r\n"}
{"role":"assistant","content":"I\u0027ll help you understand the concept of adding custom tools/commands to the CYCOD CLI. Let me explore the codebase first to get a clearer picture of what you\u0027re describing.","tool_calls":[{"id":"toolu_vrtx_01NkmE5FGTnuqAA6agRqqc8r","function":{"name":"ListFiles","arguments":"{\u0022path\u0022:\u0022.\u0022}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01NkmE5FGTnuqAA6agRqqc8r","content":"{\u0022result\u0022: \u0022...unknown; tool not called...\u0022}"}
{"role":"user","content":"keep going"}
{"role":"assistant","content":"I apologize for the error. Let me search for the relevant files to understand the existing implementation of function calling tools in CYCOD, and then we can discuss adding custom shell command tools.","tool_calls":[{"id":"toolu_vrtx_01XrBsKsir2trrm1nojx8EWK","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022find . -name \\u0022*.cs\\u0022 | grep -i \\u0022functioncalling\\u0022 | sort\u0022,\u0022timeoutMs\u0022:10000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01XrBsKsir2trrm1nojx8EWK","content":"./src/cycod/ChatClient/FunctionCallingChat.cs\n./src/cycod/FunctionCalling/FunctionCallDetector.cs\n./src/cycod/FunctionCalling/FunctionFactory.cs\n./src/cycod/FunctionCalling/McpFunctionFactory.cs\n./src/cycod/FunctionCallingTools/BackgroundProcessHelperFunctions.cs\n./src/cycod/FunctionCallingTools/CodeExplorationHelperFunctions.cs\n./src/cycod/FunctionCallingTools/CycoDmdCliWrapper.cs\n./src/cycod/FunctionCallingTools/DateAndTimeHelperFunctions.cs\n./src/cycod/FunctionCallingTools/ImageHelperFunctions.cs\n./src/cycod/FunctionCallingTools/ShellCommandToolHelperFunctions.cs\n./src/cycod/FunctionCallingTools/StrReplaceEditorHelperFunctions.cs\n./src/cycod/FunctionCallingTools/ThinkingToolHelperFunction.cs"}
{"role":"assistant","content":"Now let\u0027s look at the MCPs (Model Context Protocols) implementation to understand how they\u0027re defined and registered:","tool_calls":[{"id":"toolu_vrtx_016xtEBLF8LukFXuKsenRYwD","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022find . -name \\u0022*.cs\\u0022 | grep -i \\u0022mcp\\u0022 | sort\u0022,\u0022timeoutMs\u0022:10000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_016xtEBLF8LukFXuKsenRYwD","content":"./src/cycod/CommandLineCommands/McpCommands/McpAddCommand.cs\n./src/cycod/CommandLineCommands/McpCommands/McpBaseCommand.cs\n./src/cycod/CommandLineCommands/McpCommands/McpGetCommand.cs\n./src/cycod/CommandLineCommands/McpCommands/McpListCommand.cs\n./src/cycod/CommandLineCommands/McpCommands/McpRemoveCommand.cs\n./src/cycod/FunctionCalling/McpFunctionFactory.cs\n./src/cycod/McpHelpers/IMcpServerConfigItem.cs\n./src/cycod/McpHelpers/McpClientManager.cs\n./src/cycod/McpHelpers/McpConfigFile.cs\n./src/cycod/McpHelpers/McpDisplayHelpers.cs\n./src/cycod/McpHelpers/McpFileHelpers.cs\n./src/cycod/McpHelpers/McpServerConfig.cs\n./src/cycod/McpHelpers/McpServerConfigItemConverter.cs\n./src/cycod/McpHelpers/SseServerConfig.cs\n./src/cycod/McpHelpers/StdioMcpServerConfig.cs\n./src/cycod/McpHelpers/StdioServerConfig.cs\n./src/mcp/geolocation/Program.cs\n./src/mcp/geolocation/Tools/GeolocationTools.cs\n./src/mcp/geolocation/Tools/HttpClientExt.cs\n./src/mcp/geolocation/obj/Debug/net9.0/.NETCoreApp,Version=v9.0.AssemblyAttributes.cs\n./src/mcp/geolocation/obj/Debug/net9.0/cycod-mcp-geolocation.AssemblyInfo.cs\n./src/mcp/geolocation/obj/Debug/net9.0/cycod-mcp-geolocation.GlobalUsings.g.cs\n./src/mcp/mxlookup/Program.cs\n./src/mcp/mxlookup/Tools/MxLookupHelper.cs\n./src/mcp/mxlookup/Tools/MxLookupTools.cs\n./src/mcp/mxlookup/obj/Debug/net9.0/.NETCoreApp,Version=v9.0.AssemblyAttributes.cs\n./src/mcp/mxlookup/obj/Debug/net9.0/cycod-mcp-mxlookup.AssemblyInfo.cs\n./src/mcp/mxlookup/obj/Debug/net9.0/cycod-mcp-mxlookup.GlobalUsings.g.cs\n./src/mcp/osm/Program.cs\n./src/mcp/osm/Tools/HttpClientExt.cs\n./src/mcp/osm/Tools/OpenStreetMapTools.cs\n./src/mcp/osm/obj/Debug/net9.0/.NETCoreApp,Version=v9.0.AssemblyAttributes.cs\n./src/mcp/osm/obj/Debug/net9.0/cycod-mcp-osm.AssemblyInfo.cs\n./src/mcp/osm/obj/Debug/net9.0/cycod-mcp-osm.GlobalUsings.g.cs\n./src/mcp/weather/Program.cs\n./src/mcp/weather/Tools/HttpClientExt.cs\n./src/mcp/weather/Tools/WeatherTools.cs\n./src/mcp/weather/obj/Debug/net9.0/.NETCoreApp,Version=v9.0.AssemblyAttributes.cs\n./src/mcp/weather/obj/Debug/net9.0/cycod-mcp-weather.AssemblyInfo.cs\n./src/mcp/weather/obj/Debug/net9.0/cycod-mcp-weather.GlobalUsings.g.cs\n./src/mcp/whois/Program.cs\n./src/mcp/whois/Tools/WhoisHelper.cs\n./src/mcp/whois/Tools/WhoisTools.cs\n./src/mcp/whois/obj/Debug/net9.0/.NETCoreApp,Version=v9.0.AssemblyAttributes.cs\n./src/mcp/whois/obj/Debug/net9.0/cycod-mcp-whois.AssemblyInfo.cs\n./src/mcp/whois/obj/Debug/net9.0/cycod-mcp-whois.GlobalUsings.g.cs"}
{"role":"assistant","content":"Let\u0027s look at the function calling tools to understand their implementation:","tool_calls":[{"id":"toolu_vrtx_01UiGpEYrbZHKvDcK7ST299n","function":{"name":"ViewFile","arguments":"{\u0022path\u0022:\u0022./src/cycod/FunctionCallingTools/ShellCommandToolHelperFunctions.cs\u0022,\u0022startLine\u0022:0,\u0022endLine\u0022:50,\u0022lineNumbers\u0022:true}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01UiGpEYrbZHKvDcK7ST299n","content":"1: using System.ComponentModel;\r\n2: \r\n3: public class ShellCommandToolHelperFunctions\r\n4: {\r\n5:     [Description(\u0022Run commands in a bash shell (uses Git Bash on Windows). This persistent session maintains state across commands. \u0022 \u002B\r\n6:         \u0022You can run commands such as Python, Node.js and Go, and install packages with winget (on Windows), pip, npm, or go. \u0022 \u002B\r\n7:         \u0022If a command times out, the session is reset. Otherwise, returns the output of the command. \u0022 \u002B\r\n8:         \u0022WARNING: This is a blocking operation that waits for command completion before returning.\u0022)]\r\n9:     public async Task\u003Cstring\u003E RunBashCommand(\r\n10:         [Description(\u0022The bash command to run.\u0022)] string command,\r\n11:         [Description(\u0022Timeout in milliseconds for the command execution.\u0022)] int timeoutMs = 60000)\r\n12:     {\r\n13:         try\r\n14:         {\r\n15:             var result = await BashShellSession.Instance.ExecuteCommandAsync(command, timeoutMs);\r\n16:             var output = result.MergedOutput;\r\n17: \r\n18:             if (result.IsTimeout)\r\n19:             {\r\n20:                 output = Environment.NewLine \u002B $\u0022\u003Ctimed out and killed process - environment state has been reset\u003E\u0022;\r\n21:             }\r\n22:             else if (result.ExitCode != 0)\r\n23:             {\r\n24:                 output \u002B= Environment.NewLine \u002B $\u0022\u003Cexited with exit code {result.ExitCode}\u003E\u0022;\r\n25:             }\r\n26: \r\n27:             return output;\r\n28:         }\r\n29:         catch (Exception ex)\r\n30:         {\r\n31:             return $\u0022\u003Cexited with error: {ex.Message}\u003E\u0022;\r\n32:         }\r\n33:     }\r\n34: \r\n35:     [Description(\u0022Run commands in a cmd shell on Windows. This persistent session maintains state across commands. \u0022 \u002B\r\n36:         \u0022You can run commands such as Python, Node.js and Go, and install packages with winget, pip, npm, or go. \u0022 \u002B\r\n37:         \u0022If a command times out, the session is reset. Otherwise, returns the output of the command. \u0022 \u002B\r\n38:         \u0022WARNING: This is a blocking operation that waits for command completion before returning.\u0022)]\r\n39:     public async Task\u003Cstring\u003E RunCmdCommand(\r\n40:         [Description(\u0022The cmd command to run.\u0022)] string command,\r\n41:         [Description(\u0022Timeout in milliseconds for the command execution.\u0022)] int timeoutMs = 60000)\r\n42:     {\r\n43:         try\r\n44:         {\r\n45:             var result = await CmdShellSession.Instance.ExecuteCommandAsync(command, timeoutMs);\r\n46:             var output = result.MergedOutput;\r\n47: \r\n48:             if (result.IsTimeout)\r\n49:             {\r\n50:                 output \u002B= Environment.NewLine \u002B $\u0022\u003Ctimed out and killed process - environment state has been reset\u003E\u0022;"}
{"role":"assistant","content":"Calling function(s)...","tool_calls":[{"id":"toolu_vrtx_01D9MZqh9Pu9bNZ4hLPFVCcB","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:100,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycod/FunctionCallingTools/ShellCommandToolHelperFunctions.cs\u0022,\u0022startLine\u0022:50}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01D9MZqh9Pu9bNZ4hLPFVCcB","content":"50:                 output \u002B= Environment.NewLine \u002B $\u0022\u003Ctimed out and killed process - environment state has been reset\u003E\u0022;\r\n51:             }\r\n52:             else if (result.ExitCode != 0)\r\n53:             {\r\n54:                 output \u002B= Environment.NewLine \u002B $\u0022\u003Cexited with exit code {result.ExitCode}\u003E\u0022;\r\n55:             }\r\n56: \r\n57:             return output;\r\n58:         }\r\n59:         catch (Exception ex)\r\n60:         {\r\n61:             return $\u0022\u003Cexited with error: {ex.Message}\u003E\u0022;\r\n62:         }\r\n63:     }\r\n64: \r\n65:     [Description(\u0022Run commands in a PowerShell shell. This persistent session maintains state across commands. \u0022 \u002B\r\n66:         \u0022You can run commands such as Python, Node.js and Go, and install packages with winget (on Windows), pip, npm, or go. \u0022 \u002B\r\n67:         \u0022If a command times out, the session is reset. Otherwise, returns the output of the command.\u0022 \u002B\r\n68:         \u0022WARNING: This is a blocking operation that waits for command completion before returning.\u0022)]\r\n69:     public async Task\u003Cstring\u003E RunPowershellCommand(\r\n70:         [Description(\u0022The PowerShell command to run.\u0022)] string command,\r\n71:         [Description(\u0022Timeout in milliseconds for the command execution.\u0022)] int timeoutMs = 60000)\r\n72:     {\r\n73:         try\r\n74:         {\r\n75:             var result = await PowershellShellSession.Instance.ExecuteCommandAsync(command, timeoutMs);\r\n76:             var output = result.MergedOutput;\r\n77: \r\n78:             if (result.IsTimeout)\r\n79:             {\r\n80:                 output \u002B= Environment.NewLine \u002B $\u0022\u003Ctimed out and killed process - environment state has been reset\u003E\u0022;\r\n81:             }\r\n82:             else if (result.ExitCode != 0)\r\n83:             {\r\n84:                 output \u002B= Environment.NewLine \u002B $\u0022\u003Cexited with exit code {result.ExitCode}\u003E\u0022;\r\n85:             }\r\n86: \r\n87:             return output;\r\n88:         }\r\n89:         catch (Exception ex)\r\n90:         {\r\n91:             return $\u0022\u003Cexited with error: {ex.Message}\u003E\u0022;\r\n92:         }\r\n93:     }\r\n94: }\r\n95: \r\n96: "}
{"role":"assistant","content":"Now let\u0027s look at the test framework to understand how scripts and parameters are specified there:","tool_calls":[{"id":"toolu_vrtx_01HewXJxcXcfCrHY6QAafLJT","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:100,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycodt/TestFramework/README.md\u0022,\u0022startLine\u0022:0}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01HewXJxcXcfCrHY6QAafLJT","content":"1: # \u0060cycodt\u0060\r\n2: \r\n3: \u0060cycodt\u0060 is a YAML-based test framework/runner that can be used to run tests on any command-line tool or script. It is designed to be simple to use and understand, and to be able to run tests in parallel.\r\n4: \r\n5: Example:\r\n6: \r\n7: \u0060\u0060\u0060yaml\r\n8: - name: Ensure nothing to commit in worktree\r\n9:   run: git status\r\n10:   expect-regex: |\r\n11:     On branch master\r\n12:     nothing to commit, working tree clean\r\n13: \u0060\u0060\u0060\r\n14: \r\n15: The test case YAML file contains a list of test cases. Each test case is a dictionary with the following keys:\r\n16: \r\n17: - \u0060tests\u0060, \u0060steps\u0060 (required): A list of test cases to run.\r\n18: * \u0060command\u0060, \u0060script\u0060, \u0060bash\u0060 (required): The command or script to run.\r\n19: * \u0060name\u0060 (required): The name of the test case.\r\n20: - \u0060env\u0060 (optional): A dictionary of environment variables to set before running the command or script.\r\n21: - \u0060input\u0060 (optional): The input to pass to the command or script.\r\n22: - \u0060expect\u0060 (optional): A string that instructs the LLM (e.g. GPT-4) to decide pass/fail based on stdout/stderr.\r\n23: - \u0060expect-regex\u0060 (optional): A list of regular expressions that must be matched in the stdout/stderr output.\r\n24: - \u0060not-expect-regex\u0060 (optional): A list of regular expressions that must not be matched in the stdout/stderr output.\r\n25: - \u0060parallelize\u0060 (optional): Whether the test case should run in parallel with other test cases.\r\n26: - \u0060skipOnFailure\u0060 (optional): Whether the test case should be skipped when it fails.\r\n27: - \u0060tag\u0060/\u0060tags\u0060 (optional): A list of tags to associate with the test case.\r\n28: - \u0060timeout\u0060 (optional): The maximum time allowed to execute the test case, in milliseconds.\r\n29: - \u0060workingDirectory\u0060 (optional): The working directory where the test will be run.\r\n30: - \u0060matrix\u0060, \u0060matrix-file\u0060 (optional): A matrix used to parameterize and/or create multiple variations of a test case.\r\n31: \r\n32: Test cases can be organized into areas, sub-areas, and so on.\r\n33: \r\n34: \u0060\u0060\u0060yaml\r\n35: - area: Area 1\r\n36:   tests:\r\n37: \r\n38:   - name: Test 1\r\n39:     bash: echo \u0022Hello, world!\u0022\r\n40: \r\n41:   - name: Test 2\r\n42:     bash: echo \u0022Goodbye, world!\u0022\r\n43: \u0060\u0060\u0060\r\n44: \r\n45: Test cases can also be grouped into classes. \r\n46: \r\n47: \u0060\u0060\u0060yaml\r\n48: - class: Class 1\r\n49:   tests:\r\n50: \r\n51:   - name: Test 1\r\n52:     bash: echo \u0022Hello, world!\u0022\r\n53: \r\n54:   - name: Test 2\r\n55:     bash: echo \u0022Goodbye, world!\u0022\r\n56: \u0060\u0060\u0060\r\n57: \r\n58: If no class is specified, the default class is \u0022TestCases\u0022.\r\n59: \r\n60: ## \u0060tests\u0060, \u0060steps\u0060\r\n61: \r\n62: Required.\r\n63: \r\n64: When present, specifies a list of test cases to run.\r\n65: \r\n66: By default, for \u0060steps\u0060, all tests will be run sequentially. The full set of tests will be run in parallel with other \u0060steps\u0060 for other test areas, unless \u0060parallelize: false\u0060 is set.\r\n67: \r\n68: Examples:\r\n69: \r\n70: \u0060\u0060\u0060yaml\r\n71: tests:\r\n72: - name: Test 1\r\n73:   bash: echo \u0022Hello, world!\u0022\r\n74: - name: Test 2\r\n75:   bash: echo \u0022Goodbye, world!\u0022\r\n76: \u0060\u0060\u0060\r\n77: \r\n78: \u0060\u0060\u0060yaml\r\n79: steps:\r\n80: - name: Step 1\r\n81:   bash: echo \u0022Hello, world!\u0022\r\n82: - name: Step 2\r\n83:   bash: echo \u0022Goodbye, world!\u0022\r\n84: \u0060\u0060\u0060\r\n85: \r\n86: ## \u0060run\u0060, \u0060script\u0060, \u0060shell\u0060, \u0060bash\u0060, \u0060cmd\u0060, \u0060pwsh\u0060, \u0060powershell\u0060\r\n87: \r\n88: Required.\r\n89: \r\n90: Represents how the test case will be run.\r\n91: \r\n92: If the specified command or script returns an error level of non-zero, the test will fail. If it returns zero, it will pass (given that all \u0027expect\u0027 conditions are also met).\r\n93: \r\n94: Example run command:\r\n95: \r\n96: \u0060\u0060\u0060yaml\r\n97: run: git status\r\n98: \u0060\u0060\u0060\r\n99: \r\n100: Example for a script with a specific shell:"}
{"role":"assistant","content":"Let\u0027s continue exploring:","tool_calls":[{"id":"toolu_vrtx_01EpSs5DVDGNXPwCTtTNY4g1","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:200,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycodt/TestFramework/README.md\u0022,\u0022startLine\u0022:100}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01EpSs5DVDGNXPwCTtTNY4g1","content":"100: Example for a script with a specific shell:\r\n101: \r\n102: \u0060\u0060\u0060yaml\r\n103: script: |\r\n104:   echo \u0022Hello, world!\u0022\r\n105:   echo \u0022Goodbye, world!\u0022\r\n106: shell: bash\r\n107: \u0060\u0060\u0060\r\n108: \r\n109: For convenience, you can use shell-specific shortcuts like \u0060bash\u0060, \u0060cmd\u0060, \u0060pwsh\u0060, or \u0060powershell\u0060:\r\n110: \r\n111: Example for a bash script:\r\n112: \r\n113: \u0060\u0060\u0060yaml\r\n114: bash: |\r\n115:   if [ -f /etc/os-release ]; then \r\n116:     python3 script.py \r\n117:   else \r\n118:     py script.py\r\n119:   fi\r\n120: \u0060\u0060\u0060\r\n121: \r\n122: Example for a PowerShell script:\r\n123: \r\n124: \u0060\u0060\u0060yaml\r\n125: pwsh: |\r\n126:   if ($PSVersionTable.PSVersion.Major -ge 6) {\r\n127:     Write-Host \u0022Running on PowerShell Core\u0022\r\n128:   } else {\r\n129:     Write-Host \u0022Running on Windows PowerShell\u0022\r\n130:   }\r\n131: \u0060\u0060\u0060\r\n132: \r\n133: Example for a Windows PowerShell script:\r\n134: \r\n135: \u0060\u0060\u0060yaml\r\n136: powershell: |\r\n137:   if ($PSVersionTable.PSVersion.Major -ge 6) {\r\n138:     Write-Host \u0022Running on PowerShell Core\u0022\r\n139:   } else {\r\n140:     Write-Host \u0022Running on Windows PowerShell\u0022\r\n141:   }\r\n142: \u0060\u0060\u0060\r\n143: \r\n144: You can also use custom shells, like python, etc. Just specify the shell template and the script.\r\n145: The template will be used to run the script.  \r\n146: - The \u0060{0}\u0060 placeholder will be replaced with a temporary filename where the script is saved  \r\n147: - The \u0060{1}\u0060 placeholder will be replaced with the arguments passed to the script.  \r\n148: \r\n149: \u0060\u0060\u0060yaml\r\n150: shell: python {0} {1}\r\n151: script: |\r\n152:   import sys\r\n153:   print(\u0022Hello from Python\u0022)\r\n154:   print(\u0022Arguments:\u0022, sys.argv)\r\n155: arguments: 1 2 3\r\n156: expect-regex: |\r\n157:   Hello from Python\r\n158:   Arguments: .*, \u00271\u0027, \u00272\u0027, \u00273\u0027\r\n159: \u0060\u0060\u0060\r\n160: \r\n161: ## \u0060env\u0060\r\n162: \r\n163: Optional. Inherits from parent.\r\n164: \r\n165: When present, a dictionary of environment variables to set before running the command or script.\r\n166: \r\n167: Example:\r\n168: \r\n169: \u0060\u0060\u0060yaml\r\n170: env:\r\n171:   JAVA_HOME: /path/to/java\r\n172: \u0060\u0060\u0060\r\n173: \r\n174: ## \u0060input\u0060\r\n175: \r\n176: Optional.\r\n177: \r\n178: When present, will be passed to the command or script as stdin.\r\n179: \r\n180: Example:\r\n181: \r\n182: \u0060\u0060\u0060yaml\r\n183: run: cycod chat\r\n184: input: |\r\n185:   Tell me a joke\r\n186:   Tell me another\r\n187:   exit\r\n188: \u0060\u0060\u0060\r\n189: \r\n190: ## \u0060expect\u0060\r\n191: \r\n192: Optional.\r\n193: \r\n194: Represents instructions given to LLM (e.g. GPT-4) along with stdout/stderr to decide whether the test passes or fails.\r\n195: \r\n196: Example: \r\n197: \r\n198: \u0060\u0060\u0060yaml\r\n199: expect: the output must have exactly two jokes\r\n200: \u0060\u0060\u0060"}
{"role":"assistant","content":"Let\u0027s check how MCPs are registered:","tool_calls":[{"id":"toolu_vrtx_01YY7zTt1Gu8KU3qBEKf34Dv","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:50,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycod/CommandLineCommands/McpCommands/McpAddCommand.cs\u0022,\u0022startLine\u0022:0}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01YY7zTt1Gu8KU3qBEKf34Dv","content":"1: using System;\r\n2: using System.Collections.Generic;\r\n3: using System.IO;\r\n4: using System.Linq;\r\n5: using System.Threading.Tasks;\r\n6: \r\n7: /// \u003Csummary\u003E\r\n8: /// Command to add a new MCP (Model Context Protocol) Server.\r\n9: /// \u003C/summary\u003E\r\n10: class McpAddCommand : McpBaseCommand\r\n11: {\r\n12:     /// \u003Csummary\u003E\r\n13:     /// The name of the MCP server to add.\r\n14:     /// \u003C/summary\u003E\r\n15:     public string? Name { get; set; }\r\n16: \r\n17:     /// \u003Csummary\u003E\r\n18:     /// The command to execute for the MCP server (for stdio transport).\r\n19:     /// \u003C/summary\u003E\r\n20:     public string? Command { get; set; }\r\n21:     \r\n22:     /// \u003Csummary\u003E\r\n23:     /// The URL for the SSE endpoint (for sse transport).\r\n24:     /// \u003C/summary\u003E\r\n25:     public string? Url { get; set; }\r\n26: \r\n27:     /// \u003Csummary\u003E\r\n28:     /// The arguments to pass to the command.\r\n29:     /// \u003C/summary\u003E\r\n30:     public List\u003Cstring\u003E Args { get; set; } = new List\u003Cstring\u003E();\r\n31: \r\n32:     /// \u003Csummary\u003E\r\n33:     /// The transport type for the MCP server (stdio or sse).\r\n34:     /// Defaults to \u0022stdio\u0022 initially, but will be set to \u0022sse\u0022 automatically if a URL is provided.\r\n35:     /// \u003C/summary\u003E\r\n36:     public string? Transport { get; set; } = \u0022stdio\u0022;\r\n37: \r\n38:     /// \u003Csummary\u003E\r\n39:     /// Environment variables for the MCP server (in key=value format).\r\n40:     /// \u003C/summary\u003E\r\n41:     public List\u003Cstring\u003E EnvironmentVars { get; set; } = new List\u003Cstring\u003E();\r\n42: \r\n43:     /// \u003Csummary\u003E\r\n44:     /// Constructor initializes the base command.\r\n45:     /// \u003C/summary\u003E\r\n46:     public McpAddCommand() : base()\r\n47:     {\r\n48:         Scope = ConfigFileScope.Local; // Default to local scope for adding\r\n49:     }\r\n50: "}
{"role":"assistant","content":"Calling function(s)...","tool_calls":[{"id":"toolu_vrtx_014zAE6jLmKChphsuBiNRJN5","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:100,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycod/CommandLineCommands/McpCommands/McpAddCommand.cs\u0022,\u0022startLine\u0022:50}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_014zAE6jLmKChphsuBiNRJN5","content":"50: \r\n51:     /// \u003Csummary\u003E\r\n52:     /// Checks if the command is empty.\r\n53:     /// \u003C/summary\u003E\r\n54:     /// \u003Creturns\u003ETrue if empty, false otherwise.\u003C/returns\u003E\r\n55:     public override bool IsEmpty()\r\n56:     {\r\n57:         var hasName = !string.IsNullOrWhiteSpace(Name);\r\n58:         if (!hasName) return true;\r\n59: \r\n60:         var isStdio = string.IsNullOrWhiteSpace(Transport) || Transport?.ToLower() == \u0022stdio\u0022;\r\n61:         if (isStdio \u0026\u0026 string.IsNullOrWhiteSpace(Command)) return true;\r\n62:         \r\n63:         var isSse = Transport?.ToLower() == \u0022sse\u0022;\r\n64:         if (isSse \u0026\u0026 string.IsNullOrWhiteSpace(Url)) return true;\r\n65:         \r\n66:         return false;\r\n67:     }\r\n68: \r\n69:     /// \u003Csummary\u003E\r\n70:     /// Gets the command name.\r\n71:     /// \u003C/summary\u003E\r\n72:     /// \u003Creturns\u003EThe command name.\u003C/returns\u003E\r\n73:     public override string GetCommandName()\r\n74:     {\r\n75:         return \u0022mcp add\u0022;\r\n76:     }\r\n77: \r\n78:     /// \u003Csummary\u003E\r\n79:     /// Execute the add command.\r\n80:     /// Auto-sets transport to \u0022sse\u0022 if URL is provided and transport isn\u0027t explicitly set.\r\n81:     /// \u003C/summary\u003E\r\n82:     /// \u003Cparam name=\u0022interactive\u0022\u003EWhether the command is running in interactive mode.\u003C/param\u003E\r\n83:     /// \u003Creturns\u003EExit code, 0 for success, non-zero for failure.\u003C/returns\u003E\r\n84:     public override async Task\u003Cobject\u003E ExecuteAsync(bool interactive)\r\n85:     {\r\n86:         return await Task.Run(() =\u003E \r\n87:         {\r\n88:             if (IsEmpty())\r\n89:             {\r\n90:                 throw new InvalidOperationException(\u0022mcp add requires name and either command or url\u0022);\r\n91:             }\r\n92: \r\n93:             return ExecuteAdd(Name!, Command, Args, Transport, EnvironmentVars, Url, Scope ?? ConfigFileScope.Local);\r\n94:         });\r\n95:     }\r\n96: \r\n97:     /// \u003Csummary\u003E\r\n98:     /// Execute the add command with the specified parameters.\r\n99:     /// \u003C/summary\u003E\r\n100:     /// \u003Cparam name=\u0022name\u0022\u003EThe name of the MCP server to add.\u003C/param\u003E"}
{"role":"assistant","content":"Calling function(s)...","tool_calls":[{"id":"toolu_vrtx_014ktQExPNLgfF7Fzawsu9mh","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:150,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycod/CommandLineCommands/McpCommands/McpAddCommand.cs\u0022,\u0022startLine\u0022:100}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_014ktQExPNLgfF7Fzawsu9mh","content":"100:     /// \u003Cparam name=\u0022name\u0022\u003EThe name of the MCP server to add.\u003C/param\u003E\r\n101:     /// \u003Cparam name=\u0022command\u0022\u003EThe command to execute for the server (for stdio).\u003C/param\u003E\r\n102:     /// \u003Cparam name=\u0022args\u0022\u003EArguments to pass to the command.\u003C/param\u003E\r\n103:     /// \u003Cparam name=\u0022transport\u0022\u003EThe transport type (stdio or sse).\u003C/param\u003E\r\n104:     /// \u003Cparam name=\u0022envVars\u0022\u003EEnvironment variables for the server.\u003C/param\u003E\r\n105:     /// \u003Cparam name=\u0022url\u0022\u003EThe URL for the SSE endpoint (for sse).\u003C/param\u003E\r\n106:     /// \u003Cparam name=\u0022scope\u0022\u003EThe scope to add the MCP server to.\u003C/param\u003E\r\n107:     /// \u003Creturns\u003EExit code, 0 for success, non-zero for failure.\u003C/returns\u003E\r\n108:     private int ExecuteAdd(string name, string? command, List\u003Cstring\u003E args, string? transport, List\u003Cstring\u003E envVars, string? url, ConfigFileScope scope)\r\n109:     {\r\n110:         try\r\n111:         {\r\n112:             var isStdio = string.IsNullOrWhiteSpace(transport) || transport?.ToLower() == \u0022stdio\u0022;\r\n113:             var savedFilePath = isStdio\r\n114:                 ? McpFileHelpers.SaveMcpServer(name, command, args, envVars, \u0022stdio\u0022, scope: scope)\r\n115:                 : McpFileHelpers.SaveMcpServer(name, null, null, null, transport!, url: url, scope: scope);\r\n116:             \r\n117:             ConsoleHelpers.WriteLine($\u0022Created MCP server \u0027{name}\u0027 at {savedFilePath}.\u0022, overrideQuiet: true);\r\n118:             return 0;\r\n119:         }\r\n120:         catch (Exception ex)\r\n121:         {\r\n122:             ConsoleHelpers.WriteErrorLine($\u0022Error creating MCP server: {ex.Message}\u0022);\r\n123:             return 1;\r\n124:         }\r\n125:     }\r\n126: }\r\n127: "}
{"role":"assistant","content":"Let\u0027s check the MCP file helpers:","tool_calls":[{"id":"toolu_vrtx_01ALYKYvhXX1UJ39iBmT1zqb","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:50,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycod/McpHelpers/McpFileHelpers.cs\u0022,\u0022startLine\u0022:0}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01ALYKYvhXX1UJ39iBmT1zqb","content":"1: using System;\r\n2: using System.Collections.Generic;\r\n3: using System.IO;\r\n4: using System.Linq;\r\n5: \r\n6: /// \u003Csummary\u003E\r\n7: /// Provides methods for working with MCP (Model Context Protocol) server configuration files across different scopes.\r\n8: /// \u003C/summary\u003E\r\n9: public static class McpFileHelpers\r\n10: {\r\n11:     /// \u003Csummary\u003E\r\n12:     /// Finds the MCP directory in the specified scope.\r\n13:     /// \u003C/summary\u003E\r\n14:     /// \u003Cparam name=\u0022scope\u0022\u003EThe scope to search in\u003C/param\u003E\r\n15:     /// \u003Cparam name=\u0022create\u0022\u003EWhether to create the directory if it doesn\u0027t exist\u003C/param\u003E\r\n16:     /// \u003Creturns\u003EThe path to the MCP directory, or null if not found\u003C/returns\u003E\r\n17:     public static string? FindMcpDirectoryInScope(ConfigFileScope scope, bool create = false)\r\n18:     {\r\n19:         return create\r\n20:             ? ScopeFileHelpers.EnsureDirectoryInScope(McpConfigFile.DefaultFolderName, scope)\r\n21:             : ScopeFileHelpers.FindDirectoryInScope(McpConfigFile.DefaultFolderName, scope);\r\n22:     }\r\n23: \r\n24:     /// \u003Csummary\u003E\r\n25:     /// Saves an MCP server configuration to a file in the specified scope.\r\n26:     /// \u003C/summary\u003E\r\n27:     /// \u003Cparam name=\u0022serverName\u0022\u003EName of the MCP server\u003C/param\u003E\r\n28:     /// \u003Cparam name=\u0022command\u0022\u003ECommand to execute for the server (null for SSE servers)\u003C/param\u003E\r\n29:     /// \u003Cparam name=\u0022args\u0022\u003EArguments to pass to the command\u003C/param\u003E\r\n30:     /// \u003Cparam name=\u0022envVars\u0022\u003EEnvironment variables for the server (key=value format)\u003C/param\u003E\r\n31:     /// \u003Cparam name=\u0022transport\u0022\u003ETransport type (stdio or sse)\u003C/param\u003E\r\n32:     /// \u003Cparam name=\u0022url\u0022\u003EURL for SSE servers (null for stdio servers)\u003C/param\u003E\r\n33:     /// \u003Cparam name=\u0022scope\u0022\u003EThe scope to save the configuration to\u003C/param\u003E\r\n34:     /// \u003Creturns\u003EPath to the saved configuration file\u003C/returns\u003E\r\n35:     public static string SaveMcpServer(\r\n36:         string serverName,\r\n37:         string? command,\r\n38:         IEnumerable\u003Cstring\u003E? args,\r\n39:         IEnumerable\u003Cstring\u003E? envVars,\r\n40:         string transport = \u0022stdio\u0022,\r\n41:         string? url = null,\r\n42:         ConfigFileScope scope = ConfigFileScope.Local)\r\n43:     {\r\n44:         // Get or create the config file for this scope\r\n45:         var configFile = McpConfigFile.FromScope(scope) ?? McpConfigFile.Create(scope);\r\n46: \r\n47:         // Create the server configuration\r\n48:         if (transport.ToLower() == \u0022sse\u0022)\r\n49:         {\r\n50:             configFile.Servers[serverName] = new SseServerConfig"}
{"role":"assistant","content":"Calling function(s)...","tool_calls":[{"id":"toolu_vrtx_01ERkNVtzTbomPN2msKcUzUh","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:100,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycod/McpHelpers/McpFileHelpers.cs\u0022,\u0022startLine\u0022:50}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01ERkNVtzTbomPN2msKcUzUh","content":"50:             configFile.Servers[serverName] = new SseServerConfig\r\n51:             {\r\n52:                 Type = \u0022sse\u0022,\r\n53:                 Url = url,\r\n54:                 ConfigFile = configFile\r\n55:             };\r\n56:         }\r\n57:         else // stdio is default\r\n58:         {\r\n59:             var environmentDict = new Dictionary\u003Cstring, string?\u003E();\r\n60:             if (envVars != null)\r\n61:             {\r\n62:                 foreach (var env in envVars)\r\n63:                 {\r\n64:                     var parts = env.Split(\u0027=\u0027, 2);\r\n65:                     if (parts.Length == 2)\r\n66:                     {\r\n67:                         environmentDict[parts[0]] = parts[1];\r\n68:                     }\r\n69:                 }\r\n70:             }\r\n71: \r\n72:             ProcessHelpers.SplitCommand(command!, out command, out var commandArgs);\r\n73:             var argList = ProcessHelpers.SplitArguments(commandArgs).ToList();\r\n74:             argList.AddRange(args ?? Enumerable.Empty\u003Cstring\u003E());\r\n75: \r\n76:             configFile.Servers[serverName] = new StdioServerConfig\r\n77:             {\r\n78:                 Type = \u0022stdio\u0022,\r\n79:                 Command = command ?? \u0022\u0022,\r\n80:                 Args = argList,\r\n81:                 Env = environmentDict,\r\n82:                 ConfigFile = configFile\r\n83:             };\r\n84:         }\r\n85: \r\n86:         // Save the config file\r\n87:         configFile.Save();\r\n88:         return configFile.FileName;\r\n89:     }\r\n90: \r\n91:     /// \u003Csummary\u003E\r\n92:     /// Gets a server configuration from any scope based on server name.\r\n93:     /// \u003C/summary\u003E\r\n94:     /// \u003Cparam name=\u0022serverName\u0022\u003EThe name of the MCP server to find\u003C/param\u003E\r\n95:     /// \u003Creturns\u003EThe server configuration if found, null otherwise\u003C/returns\u003E\r\n96:     public static IMcpServerConfigItem? GetFromAnyScope(string serverName)\r\n97:     {\r\n98:         // Search in priority order: Local, User, Global\r\n99:         foreach (var scope in new[] { ConfigFileScope.Local, ConfigFileScope.User, ConfigFileScope.Global })\r\n100:         {"}
{"role":"assistant","content":"Let\u0027s check out the function factory to understand how functions are registered and called:","tool_calls":[{"id":"toolu_vrtx_01HdThFytgokL53XtGyw8KQS","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:50,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycod/FunctionCalling/FunctionFactory.cs\u0022,\u0022startLine\u0022:0}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01HdThFytgokL53XtGyw8KQS","content":"1: //\r\n2: // Copyright (c) Microsoft. All rights reserved.\r\n3: // Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n4: //\r\n5: \r\n6: using System.Reflection;\r\n7: using System.Collections;\r\n8: using System.Text;\r\n9: using System.Text.Json;\r\n10: using Microsoft.Extensions.AI;\r\n11: using System.ComponentModel;\r\n12: \r\n13: public class FunctionFactory\r\n14: {\r\n15:     public FunctionFactory()\r\n16:     {\r\n17:     }\r\n18: \r\n19:     public FunctionFactory(Assembly assembly)\r\n20:     {\r\n21:         AddFunctions(assembly);\r\n22:     }\r\n23: \r\n24:     public FunctionFactory(Type type1, params Type[] types)\r\n25:     {\r\n26:         AddFunctions(type1, types);\r\n27:     }\r\n28: \r\n29:     public FunctionFactory(IEnumerable\u003CType\u003E types)\r\n30:     {\r\n31:         AddFunctions(types);\r\n32:     }\r\n33: \r\n34:     public FunctionFactory(Type type)\r\n35:     {\r\n36:         AddFunctions(type);\r\n37:     }\r\n38: \r\n39:     public void AddFunctions(Assembly assembly)\r\n40:     {\r\n41:         AddFunctions(assembly.GetTypes());\r\n42:     }\r\n43: \r\n44:     public void AddFunctions(Type type1, params Type[] types)\r\n45:     {\r\n46:         AddFunctions(new List\u003CType\u003E { type1 });\r\n47:         AddFunctions(types);\r\n48:     }\r\n49: \r\n50:     public void AddFunctions(IEnumerable\u003CType\u003E types)"}
{"role":"assistant","content":"Calling function(s)...","tool_calls":[{"id":"toolu_vrtx_0115Pte3zn3in31mhZTbthcZ","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:100,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycod/FunctionCalling/FunctionFactory.cs\u0022,\u0022startLine\u0022:50}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_0115Pte3zn3in31mhZTbthcZ","content":"50:     public void AddFunctions(IEnumerable\u003CType\u003E types)\r\n51:     {\r\n52:         foreach (var type in types)\r\n53:         {\r\n54:             AddFunctions(type);\r\n55:         }\r\n56:     }\r\n57: \r\n58:     public void AddFunctions(Type type)\r\n59:     {\r\n60:         var methods = type.GetMethods(BindingFlags.Static | BindingFlags.Public);\r\n61:         foreach (var method in methods)\r\n62:         {\r\n63:             AddFunction(method);\r\n64:         }\r\n65:     }\r\n66: \r\n67:     public void AddFunctions(object instance)\r\n68:     {\r\n69:         var type = instance.GetType();\r\n70:         var methods = type.GetMethods(BindingFlags.Instance | BindingFlags.Public);\r\n71:         foreach (var method in methods)\r\n72:         {\r\n73:             AddFunction(method, instance);\r\n74:         }\r\n75:     }\r\n76: \r\n77:     public void AddFunction(MethodInfo method, object? instance = null)\r\n78:     {\r\n79:         var attributes = method.GetCustomAttributes(typeof(DescriptionAttribute), false);\r\n80:         if (attributes.Length \u003E 0)\r\n81:         {\r\n82:             var funcDescriptionAttrib = attributes[0] as DescriptionAttribute;\r\n83:             var funcDescription = funcDescriptionAttrib!.Description;\r\n84: \r\n85:             var readonlyAttrib = method.GetCustomAttribute\u003CReadOnlyAttribute\u003E();\r\n86:             var readOnly = readonlyAttrib?.IsReadOnly;\r\n87: \r\n88:             var aiFunction = AIFunctionFactory.Create(method, instance, method.Name, funcDescription);\r\n89:             AddFunction(aiFunction, method, instance, readOnly);\r\n90:         }\r\n91:     }\r\n92: \r\n93:     public void AddFunction(AIFunction aiFunction)\r\n94:     {\r\n95:         var methodInfo = typeof(AIFunction).GetMethod(nameof(AIFunction.InvokeAsync), BindingFlags.Instance | BindingFlags.Public);\r\n96:         AddFunction(aiFunction, methodInfo!, aiFunction);\r\n97:     }\r\n98: \r\n99:     public void AddFunction(AIFunction aiFunction, MethodInfo method, object? instance = null, bool? readOnly = null)\r\n100:     {"}
{"role":"assistant","content":"Calling function(s)...","tool_calls":[{"id":"toolu_vrtx_01EZG9jJZPXccx5izfRCc8QP","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:150,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycod/FunctionCalling/FunctionFactory.cs\u0022,\u0022startLine\u0022:100}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01EZG9jJZPXccx5izfRCc8QP","content":"100:     {\r\n101:         const int shortDescriptionMacCch = 50;\r\n102:         var shortDescription = aiFunction.Description.Length \u003E shortDescriptionMacCch\r\n103:             ? aiFunction.Description.Substring(0, shortDescriptionMacCch) \u002B \u0022...\u0022\r\n104:             : aiFunction.Description;\r\n105: \r\n106:         ConsoleHelpers.WriteDebugLine($\u0022Adding function \u0027{aiFunction.Name}\u0027 - {shortDescription}\u0022);\r\n107:         _functions.TryAdd(aiFunction.Name, (aiFunction, method, instance, readOnly));\r\n108:         ConsoleHelpers.WriteDebugLine($\u0022Count of functions in factory: {_functions.Count}\u0022);\r\n109:     }\r\n110: \r\n111:     public IEnumerable\u003CAITool\u003E GetAITools()\r\n112:     {\r\n113:         return _functions.Select(x =\u003E x.Value.Function);\r\n114:     }\r\n115: \r\n116:     public bool? IsReadOnlyFunction(string functionName)\r\n117:     {\r\n118:         if (_functions.TryGetValue(functionName, out var function))\r\n119:         {\r\n120:             return function.ReadOnly;\r\n121:         }\r\n122:         return null;\r\n123:     }\r\n124: \r\n125:     public virtual bool TryCallFunction(string functionName, string functionArguments, out object? result)\r\n126:     {\r\n127:         result = null;\r\n128:         if (!string.IsNullOrEmpty(functionName) \u0026\u0026 !string.IsNullOrEmpty(functionArguments))\r\n129:         {\r\n130:             var function = _functions.FirstOrDefault(x =\u003E x.Value.Function.Name == functionName);\r\n131:             if (function.Key != null)\r\n132:             {\r\n133:                 result = TryCallFunction(function.Value.Method, function.Value.Function, functionArguments, function.Value.Instance);\r\n134:                 return true;\r\n135:             }\r\n136:         }\r\n137:         return false;\r\n138:     }\r\n139: \r\n140:     // operator to add to FunctionFactories together\r\n141:     public static FunctionFactory operator \u002B(FunctionFactory a, FunctionFactory b)\r\n142:     {\r\n143:         var newFactory = new FunctionFactory();\r\n144:         a._functions.ToList().ForEach(x =\u003E newFactory._functions.Add(x.Key, x.Value));\r\n145:         b._functions.ToList().ForEach(x =\u003E newFactory._functions.Add(x.Key, x.Value));\r\n146:         return newFactory;\r\n147:     }\r\n148: \r\n149:     private static object? TryCallFunction(MethodInfo methodInfo, AIFunction function, string argumentsAsJson, object? instance)\r\n150:     {"}
{"role":"assistant","content":"Calling function(s)...","tool_calls":[{"id":"toolu_vrtx_01FvFX4Rqw3H7of26nGubXDd","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:200,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycod/FunctionCalling/FunctionFactory.cs\u0022,\u0022startLine\u0022:150}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01FvFX4Rqw3H7of26nGubXDd","content":"150:     {\r\n151:         try\r\n152:         {\r\n153:             return CallFunction(methodInfo, function, argumentsAsJson, instance);\r\n154:         }\r\n155:         catch (Exception ex)\r\n156:         {\r\n157:             ConsoleHelpers.WriteDebugLine($\u0022Error calling function \u0027{function.Name}\u0027: {ex.Message}\u0022);\r\n158:             return \u0022Exception: \u0022 \u002B ex.Message;\r\n159:         }\r\n160:     }\r\n161: \r\n162:     private static object? CallFunction(MethodInfo methodInfo, AIFunction function, string argumentsAsJson, object? instance)\r\n163:     {\r\n164:         var parsed = JsonDocument.Parse(argumentsAsJson).RootElement;\r\n165:         var arguments = new List\u003Cobject?\u003E();\r\n166: \r\n167:         var parameters = methodInfo.GetParameters();\r\n168:         foreach (var parameter in parameters)\r\n169:         {\r\n170:             var parameterName = parameter.Name;\r\n171:             if (parameterName == null) continue;\r\n172: \r\n173:             if (parsed.ValueKind == JsonValueKind.Object \u0026\u0026 parsed.TryGetProperty(parameterName, out var value))\r\n174:             {\r\n175:                 var parameterValue = value.ValueKind == JsonValueKind.String ? value.GetString() : value.GetRawText();\r\n176:                 if (parameterValue == null) continue;\r\n177: \r\n178:                 var argument = ParseParameterValue(parameterValue, parameter.ParameterType);\r\n179:                 arguments.Add(argument);\r\n180:             }\r\n181:             else if (parameter.HasDefaultValue)\r\n182:             {\r\n183:                 arguments.Add(parameter.DefaultValue);  \r\n184:             }\r\n185:         }\r\n186: \r\n187:         var args = arguments.ToArray();\r\n188:         var result = CallFunction(methodInfo, args, instance);\r\n189:         return ConvertFunctionResultToStringOrAIContent(result);\r\n190:     }\r\n191: \r\n192:     private static object? CallFunction(MethodInfo methodInfo, object?[] args, object? instance)\r\n193:     {\r\n194:         var t = methodInfo.ReturnType;\r\n195:         return t == typeof(Task)\r\n196:             ? CallVoidAsyncFunction(methodInfo, args, instance)\r\n197:             : t.IsGenericType \u0026\u0026 t.GetGenericTypeDefinition() == typeof(Task\u003C\u003E)\r\n198:                 ? CallAsyncFunction(methodInfo, args, instance)\r\n199:                 : t.Name != \u0022Void\u0022\r\n200:                     ? CallSyncFunction(methodInfo, args, instance)"}
{"role":"assistant","content":"Let\u0027s look at the McpFunctionFactory to understand how MCP functions are created:","tool_calls":[{"id":"toolu_vrtx_01FcPL7QPegXRhuQawtmmkDQ","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:50,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycod/FunctionCalling/McpFunctionFactory.cs\u0022,\u0022startLine\u0022:0}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01FcPL7QPegXRhuQawtmmkDQ","content":"1: using Microsoft.Extensions.AI;\r\n2: using ModelContextProtocol.Client;\r\n3: using System.Text.Json;\r\n4: \r\n5: /// \u003Csummary\u003E\r\n6: /// Extension of FunctionFactory that adds support for Model Context Protocol (MCP) tools.\r\n7: /// \u003C/summary\u003E\r\n8: public class McpFunctionFactory : FunctionFactory\r\n9: {\r\n10:     /// \u003Csummary\u003E\r\n11:     /// Creates a new McpFunctionFactory.\r\n12:     /// \u003C/summary\u003E\r\n13:     public McpFunctionFactory() : base()\r\n14:     {\r\n15:     }\r\n16: \r\n17:     /// \u003Csummary\u003E\r\n18:     /// Adds all tools from an MCP client as functions to this factory.\r\n19:     /// \u003C/summary\u003E\r\n20:     /// \u003Cparam name=\u0022mcpClient\u0022\u003EThe MCP client containing tools to add.\u003C/param\u003E\r\n21:     /// \u003Cparam name=\u0022clientName\u0022\u003EThe name of the client, used as a prefix for tool names.\u003C/param\u003E\r\n22:     /// \u003Creturns\u003EThe task representing the asynchronous operation.\u003C/returns\u003E\r\n23:     public async Task AddMcpClientToolsAsync(IMcpClient mcpClient, string clientName)\r\n24:     {\r\n25:         if (!_mcpClients.ContainsKey(clientName))\r\n26:         {\r\n27:             _mcpClients[clientName] = mcpClient;\r\n28:         }\r\n29: \r\n30:         // Get the list of tools from the MCP client\r\n31:         var tools = await mcpClient.ListToolsAsync();\r\n32:         ConsoleHelpers.WriteDebugLine($\u0022Found {tools.Count} tools on MCP server \u0027{mcpClient.ServerInfo.Name}\u0027\u0022);\r\n33: \r\n34:         // Add each tool individually\r\n35:         foreach (var tool in tools)\r\n36:         {\r\n37:             AddMcpClientTool(tool, clientName);\r\n38:         }\r\n39:     }\r\n40: \r\n41:     /// \u003Csummary\u003E\r\n42:     /// Adds a specific MCP client tool to this factory.\r\n43:     /// \u003C/summary\u003E\r\n44:     /// \u003Cparam name=\u0022tool\u0022\u003EThe tool to add.\u003C/param\u003E\r\n45:     /// \u003Cparam name=\u0022clientName\u0022\u003EThe name of the client, used as a prefix for tool names.\u003C/param\u003E\r\n46:     public void AddMcpClientTool(McpClientTool tool, string clientName)\r\n47:     {\r\n48:         var newName = $\u0022{clientName}_{tool.Name}\u0022;\r\n49:         var withNewName = tool.WithName(newName);\r\n50: "}
{"role":"assistant","content":"Calling function(s)...","tool_calls":[{"id":"toolu_vrtx_017WxK7FgsEMD2zaQR5UYfxh","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:100,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycod/FunctionCalling/McpFunctionFactory.cs\u0022,\u0022startLine\u0022:50}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_017WxK7FgsEMD2zaQR5UYfxh","content":"50: \r\n51:         _mcpTools[newName] = withNewName;\r\n52: \r\n53:         ConsoleHelpers.WriteDebugLine($\u0022Adding tool \u0027{tool.Name}\u0027 from MCP server \u0027{clientName}\u0027 as {newName}\u0022);\r\n54:         base.AddFunction(withNewName);\r\n55:     }\r\n56:     \r\n57:     /// \u003Csummary\u003E\r\n58:     /// Overrides the TryCallFunction method to handle MCP client tools.\r\n59:     /// \u003C/summary\u003E\r\n60:     /// \u003Cparam name=\u0022functionName\u0022\u003EThe name of the function to call.\u003C/param\u003E\r\n61:     /// \u003Cparam name=\u0022functionArguments\u0022\u003EThe arguments for the function call as a JSON string.\u003C/param\u003E\r\n62:     /// \u003Cparam name=\u0022result\u0022\u003EThe result of the function call, if successful.\u003C/param\u003E\r\n63:     /// \u003Creturns\u003ETrue if the function was found and called successfully, false otherwise.\u003C/returns\u003E\r\n64:     public override bool TryCallFunction(string functionName, string functionArguments, out object? result)\r\n65:     {\r\n66:         result = null;\r\n67: \r\n68:         if (!string.IsNullOrEmpty(functionName) \u0026\u0026 _mcpTools.TryGetValue(functionName, out var tool))\r\n69:         {\r\n70:             ConsoleHelpers.WriteDebugLine($\u0022Found MCP tool \u0027{functionName}\u0027\u0022);\r\n71:             try\r\n72:             {\r\n73:                 var arguments = JsonSerializer.Deserialize\u003CDictionary\u003Cstring, object?\u003E\u003E(functionArguments, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\r\n74:                 arguments ??= new Dictionary\u003Cstring, object?\u003E();\r\n75:                 \r\n76:                 var clientName = functionName.Split(\u0027_\u0027)[0];\r\n77:                 var toolName = functionName.Substring(clientName.Length \u002B 1);\r\n78:                 if (_mcpClients.TryGetValue(clientName, out var client))\r\n79:                 {\r\n80:                     ConsoleHelpers.WriteDebugLine($\u0022Calling MCP tool \u0027{toolName}\u0027 on client \u0027{clientName}\u0027\u0022);\r\n81:                     var response = Task.Run(async () =\u003E await client.CallToolAsync(toolName, arguments)).Result;\r\n82:                     ConsoleHelpers.WriteDebugLine(response.IsError\r\n83:                         ? $\u0022MCP tool \u0027{toolName}\u0027 on \u0060{clientName}\u0060 resulted in ERROR!\u0022\r\n84:                         : $\u0022MCP tool \u0027{toolName}\u0027 on \u0060{clientName}\u0060 resulted in SUCCESS!\u0022);\r\n85: \r\n86:                     result = string.Join(\u0027\\n\u0027, response.Content\r\n87:                         .Where(c =\u003E !string.IsNullOrEmpty(c.Text))\r\n88:                         .Select(c =\u003E c.Text))\r\n89:                         ?? \u0022(no text response)\u0022;\r\n90: \r\n91:                     ConsoleHelpers.WriteDebugLine($\u0022MCP tool \u0027{functionName}\u0027 returned: {result}\u0022);\r\n92:                     return true;\r\n93:                 }\r\n94:                 \r\n95:                 result = $\u0022Error: MCP client not found for tool {functionName}\u0022;\r\n96:                 return false;\r\n97:             }\r\n98:             catch (Exception ex)\r\n99:             {\r\n100:                 result = $\u0022Error calling MCP tool: {ex.Message}\u0022;"}
{"role":"assistant","content":"Based on my exploration of the codebase, I now understand the key components related to your request. Let me synthesize this understanding and discuss the idea of adding custom tools/commands to CYCOD.","tool_calls":[{"id":"toolu_vrtx_01TGtzquGGeysx7yqsh2Pnf3","function":{"name":"Think","arguments":"{\u0022thought\u0022:\u0022# Understanding the Current Implementation and Requirements\\n\\n## Current Tools Implementation in CYCOD\\n\\nCYCOD currently has several ways to add and expose \\u0022tools\\u0022 or \\u0022commands\\u0022:\\n\\n1. **Built-in Function Calling Tools**: Implemented as C# classes with methods annotated with \\u0060[Description]\\u0060 attributes. These include:\\n   - Shell command tools (\\u0060RunBashCommand\\u0060, \\u0060RunCmdCommand\\u0060, \\u0060RunPowershellCommand\\u0060)\\n   - File manipulation tools\\n   - Process management tools\\n   - And others\\n\\n2. **MCP (Model Context Protocol) Servers**: External tools that can be registered and used via the MCP protocol. These are managed through:\\n   - \\u0060mcp add\\u0060 command for registration\\n   - Registration can be for local, user, or global scope\\n   - Can be stdio-based (running a command) or SSE-based (connecting to a URL)\\n   - Used with \\u0060--use-mcps\\u0060 or \\u0060--with-mcp\\u0060 flags\\n\\n3. **Config Settings**: User-configurable values saved in different scopes (local/user/global)\\n\\n4. **Prompts**: Reusable text templates that can be inserted into conversations\\n\\n5. **Aliases**: Command-line shortcuts that can be reused\\n\\n## Test Framework\\n\\nThe \\u0060cycodt\\u0060 test framework already has a way to specify:\\n- Scripts to run\\n- Inputs to provide\\n- Expected outputs\\n- Various shell types (bash, cmd, powershell, python, etc.)\\n- Environment variables\\n- Timeout values\\n\\n## Requirements for Custom Tools/Commands\\n\\nBased on the discussion, the goal is to create a mechanism for users to:\\n1. Register custom shell commands/scripts as named tools\\n2. Provide descriptions and parameter information for these tools\\n3. Make them available for function calling in the LLM\\n4. Similar to MCPs but simpler, focused just on wrapping shell scripts\\n\\n## Design Considerations\\n\\nFor implementing custom shell command tools, we need to consider:\\n\\n1. **Registration Mechanism**:\\n   - Similar to \\u0060mcp add\\u0060 but specifically for shell commands\\n   - Could be something like \\u0060cycod tool add NAME --command \\u0022COMMAND\\u0022 --description \\u0022DESC\\u0022\\u0060\\n   - Support for different shells (bash, cmd, powershell)\\n\\n2. **Parameter Handling**:\\n   - Need to define parameters that can be passed to the script\\n   - Need descriptions for parameters (for LLM understanding)\\n   - Could use a simple schema format or a YAML config\\n\\n3. **Storage**:\\n   - Similar to MCPs, tools should be stored in a config file\\n   - Support for different scopes (local, user, global)\\n\\n4. **Function Calling Integration**:\\n   - Tools need to be exposed to the LLM as function calls\\n   - Parameter validation and transformation\\n   - Proper error handling\\n\\n5. **Security Considerations**:\\n   - Similar to existing shell commands, need to handle permissions\\n   - Auto-approve/auto-deny settings\\n\\n## Potential Implementation Approach\\n\\nA new tool management system could work like this:\\n\\n1. **Command Registration**:\\n   \\u0060\\u0060\\u0060\\n   cycod tool add greet --command \\u0022echo Hello, $NAME!\\u0022 --description \\u0022Greet a person\\u0022 --parameter NAME \\u0022Person to greet\\u0022 --scope user\\n   \\u0060\\u0060\\u0060\\n\\n2. **Storage Format** (YAML or JSON):\\n   \\u0060\\u0060\\u0060yaml\\n   tools:\\n     greet:\\n       description: \\u0022Greet a person\\u0022\\n       command: \\u0022echo Hello, $NAME!\\u0022\\n       shell: bash\\n       parameters:\\n         - name: NAME\\n           description: \\u0022Person to greet\\u0022\\n           required: true\\n       scope: user\\n   \\u0060\\u0060\\u0060\\n\\n3. **Usage**:\\n   - Automatically available to the LLM in function calling\\n   - Parameters passed through function calling get substituted in the command\\n\\n4. **Implementation Path**:\\n   - Create new \\u0060ToolCommands\\u0060 similar to \\u0060McpCommands\\u0060\\n   - Add tool management classes similar to MCP management\\n   - Extend the \\u0060FunctionFactory\\u0060 to include these custom tools\\n   - Potentially leverage the test framework\\u0027s script running capabilities\\n\\nThis would effectively create a layer between the LLM function calling and the shell scripts, with proper parameter passing and documentation.\u0022}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01TGtzquGGeysx7yqsh2Pnf3","content":"Thought logged."}
{"role":"assistant","content":"Now I have a good understanding of what you\u0027re looking for. Let me discuss the idea of adding custom tools/commands to CYCOD.\n\n# Custom Tools/Commands for CYCOD\n\n## Current State\n\nBased on the code I\u0027ve examined, CYCOD already has several ways to extend functionality:\n\n1. **Built-in Function Calling Tools**: These are C# classes with methods that LLMs can call directly (like the file manipulation, shell command tools, etc.)\n\n2. **MCP (Model Context Protocol) Servers**: These are external processes or services that can be registered to provide additional capabilities via the MCP protocol.\n\n3. **Configuration Settings, Prompts, and Aliases**: These allow customizing behavior, storing reusable text templates, and creating command shortcuts.\n\n## The Gap: Custom Shell Command Tools\n\nWhat you\u0027re looking for is a way to easily register and describe custom shell commands/scripts as tools that:\n1. Can be invoked by LLMs through function calling\n2. Have proper descriptions and parameter documentation\n3. Are similar to MCPs in functionality but focused on shell scripts/commands\n\n## Leveraging the Test Framework\n\nThe \u0060cycodt\u0060 test framework already has robust functionality for:\n- Running scripts in various shells (bash, cmd, PowerShell, even Python)\n- Passing parameters and environment variables\n- Handling input/output\n- Implementing timeouts\n\nThis makes it an excellent foundation for the custom tools system you\u0027re envisioning.\n\n## Proposed Implementation\n\nHere\u0027s how we could implement custom tool commands in CYCOD:\n\n### 1. Command-Line Interface\n\nSimilar to MCP registration, but specifically for shell commands:\n\n\u0060\u0060\u0060\ncycod tool add NAME [options]\n\nOPTIONS:\n  --command \u0022COMMAND\u0022          The command or script to run\n  --description \u0022DESC\u0022         Human-readable description of what the tool does\n  --shell bash|cmd|powershell  Shell to use (default: bash)\n  --parameter NAME \u0022DESC\u0022      Define a parameter with name and description\n  --timeout MILLISECONDS       Default timeout (default: 60000)\n  --scope local|user|global    Where to save the tool definition (default: local)\n\u0060\u0060\u0060\n\nExample:\n\u0060\u0060\u0060\ncycod tool add weather-lookup --command \u0022curl -s \u0027wttr.in/$LOCATION?format=3\u0027\u0022 --description \u0022Get weather for a location\u0022 --parameter LOCATION \u0022City or airport code\u0022 --scope user\n\u0060\u0060\u0060\n\n### 2. Storage Format\n\nTools could be stored in YAML or JSON format, similar to MCP configurations:\n\n\u0060\u0060\u0060yaml\n# .cycod/tools/weather-lookup.yaml\nname: weather-lookup\ndescription: Get weather for a location\ncommand: curl -s \u0027wttr.in/$LOCATION?format=3\u0027\nshell: bash\nparameters:\n  - name: LOCATION\n    description: City or airport code\n    required: true\ntimeout: 60000\nscope: user\n\u0060\u0060\u0060\n\n### 3. Function Calling Integration\n\nWhen the LLM uses function calling, the system would:\n1. Identify if the function is a custom tool\n2. Extract and validate parameters\n3. Substitute parameters into the command (e.g., replace \u0060$LOCATION\u0060 with the provided value)\n4. Run the command using the specified shell\n5. Return the output to the LLM\n\n### 4. Tool Management Commands\n\nSimilar to MCP commands, we\u0027d need:\n- \u0060cycod tool list\u0060 - List available tools\n- \u0060cycod tool get NAME\u0060 - Show details of a specific tool\n- \u0060cycod tool add NAME [options]\u0060 - Add a new tool\n- \u0060cycod tool remove NAME\u0060 - Remove a tool\n\n### 5. Security Considerations\n\nTools would be subject to the same security controls as other shell commands:\n- \u0060--auto-approve\u0060 and \u0060--auto-deny\u0060 settings would apply\n- Tools could be categorized as \u0060read\u0060, \u0060write\u0060, or \u0060run\u0060 for permission management\n\n## Implementation Approach\n\n1. Create new command classes for tool management\n2. Implement tool configuration storage (similar to MCP configuration)\n3. Extend the function factory to include custom tools\n4. Create a runtime that leverages the test framework\u0027s script execution capabilities\n\nThis would provide a flexible system where users can easily wrap any shell command or script as a named tool with proper documentation, making it available for LLMs to use through function calling.\n\n## Questions for Discussion\n\n1. Would you prefer a YAML-based or JSON-based format for tool definitions?\n2. How complex should the parameter substitution be? Simple environment variable style (\u0060$PARAM\u0060) or something more sophisticated?\n3. Should tools support multiple shells within one definition, or require separate tool definitions for different shells?\n4. Would you want to support input streams (stdin) as well as command-line parameters?\n5. How should we handle authentication or sensitive parameters in tool definitions?\n\nDoes this align with what you were envisioning? And would you like to prioritize any specific aspects of this implementation?"}
{"role":"user","content":"keep in mind the schema for the test framework. we want these things to be as aligned as possible, but not be stupidly aligned. also, if we\u0027re doingg dumb things (or not ideal said differently :-)) things in test framework, dont\u0027 copy that, make both better... anyway, help me understand your understanding of the comparison of schemas between what we have now for test framework yaml files, and what you\u0027re proposing here? note, we do want the custom tools to be at first single tool per file things... not multiple of them in one file. scopes will be \u0027implied\u0027 by where they are on disk, in whcih scope folder... make sure you understand how scopes work... you can see help on that with \u0060cycod help find scope --expand\u0060. look at those things, consider, also consider your bias, and what mine might be, and come back with an updat eto above with this new info"}
{"role":"assistant","content":"I\u0027ll explore more about the scopes in CYCOD and compare the test framework schema with what I proposed for custom tools. Let me first look at how scopes work in CYCOD.","tool_calls":[{"id":"toolu_vrtx_019JfDzYKQJuJPoAp2MVZYJ3","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022cycod help find scope --expand\u0022,\u0022timeoutMs\u0022:10000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_019JfDzYKQJuJPoAp2MVZYJ3","content":"CYCOD - AI-powered Developer CLI, Version 1.0.0-alpha-20250820.1-DEV-runner-20250820.1627\nCopyright(c) 2025, Rob Chambers. All rights reserved.\n\n## \u0060cycod help alias\u0060\n\n\u0060\u0060\u0060\nCYCOD ALIAS COMMANDS\n\n  These commands allow you to manage CYCOD command aliases.\n\nUSAGE: cycod alias list [--scope]\n   OR: cycod alias get ALIAS_NAME [--scope]\n   OR: cycod alias add ALIAS_NAME CONTENT [--scope]\n   OR: cycod alias delete ALIAS_NAME [--scope]\n\nOPTIONS\n\n  SCOPE OPTIONS\n\n    --global, -g    Use global scope (all users)\n    --user, -u      Use user scope (current user)\n    --local, -l     Use local scope (default for most commands)\n    --any, -a       Include aliases from all scopes (default for \u0027list\u0027 command)\n\nCOMMANDS\n\n    list            List all available aliases\n    get             Display the content of a specific alias\n    add             Create a new alias with raw content (no syntax validation)\n    delete          Delete an alias\n\nSEE ALSO\n\n  cycod help alias list\n  cycod help alias get\n  cycod help alias add\n  cycod help alias delete\n  cycod help aliases\n\u0060\u0060\u0060\n\n## \u0060cycod help aliases\u0060\n\n\u0060\u0060\u0060\nCYCOD ALIASES\n\n  Use aliases to save and reuse sets of options for common commands.\n\nUSAGE: cycod [...] --save-alias ALIAS\n   OR: cycod [...] --save-local-alias ALIAS\n   OR: cycod [...] --save-user-alias ALIAS\n   OR: cycod [...] --save-global-alias ALIAS\n   OR: cycod [...] --ALIAS\n\nOPTIONS\n\n  SAVING ALIASES\n\n    --save-alias ALIAS          Same as --save-local-alias\n    --save-local-alias ALIAS    Save the current options under the specified alias name in the local scope\n    --save-user-alias ALIAS     Save the current options under the specified alias name in the user scope\n    --save-global-alias ALIAS   Save the current options under the specified alias name in the global scope\n\n  USING ALIASES\n\n    --ALIAS                     Use the options saved under the specified alias name.\n                                Example: cycod --get-time\n\n  SCOPE SEARCH ORDER\n  \n    When looking for an alias, CycoD searches in the local scope first, then the user scope,\n    and finally the global scope.\n\nSEE ALSO\n\n  cycod help\n  cycod help examples\n  cycod help options\n\u0060\u0060\u0060\n\n## \u0060cycod help config\u0060\n\n\u0060\u0060\u0060\nCYCOD CONFIG COMMANDS\n\n  The \u0027config\u0027 commands allow you to manage CYCOD configuration settings.\n\n  CYCOD supports three configuration scopes:\n    - Global: Applied to all users on the computer\n    - User: Applied to current user across all folders\n    - Local: Applied only to the current directory\n\nUSAGE: cycod config list [--scope]\n   OR: cycod config get KEY [--scope]\n   OR: cycod config set KEY VALUE [--scope]\n   OR: cycod config clear KEY [--scope]\n   OR: cycod config add KEY VALUE [--scope]\n   OR: cycod config remove KEY VALUE [--scope]\n\nOPTIONS\n\n  SCOPE OPTIONS\n\n    --global, -g    Use global scope (all users)\n    --user, -u      Use user scope (current user)\n    --local, -l     Use local scope (default for most commands)\n    --any, -a       Include settings from all scopes (default for \u0027list\u0027 command)\n\nCOMMANDS\n\n    list            List configuration settings\n    get             Get the value of a configuration setting\n    set             Set the value of a configuration setting\n    clear           Clear a configuration setting\n    add             Add a value to a list setting\n    remove          Remove a value from a list setting\n\nSEE ALSO\n\n  cycod help config list\n  cycod help config get\n  cycod help config set\n  cycod help config clear\n  cycod help config add\n  cycod help config remove\n  cycod help configuration\n  cycod help use openai\n  cycod help use azure openai\n  cycod help use github copilot\n  cycod help use anthropic\n\u0060\u0060\u0060\n\n## \u0060cycod help configuration\u0060\n\n\u0060\u0060\u0060\nCYCOD CONFIGURATION FEATURES\n\n  CycoD offers multiple configuration features for different needs:\n  - Aliases: Command-line shortcuts\n  - Prompts: In-chat text templates\n  - Configs: Persistent settings\n  - Profiles: Bundled configurations\n\n  All features use a common scoping system (local, user, global).\n\nSCOPING SYSTEM\n\n  LOCAL SCOPE\n    - Stored in .cycod/[feature] directory of current location\n    - Only applies to the current directory\n    - Takes precedence over user and global scopes\n\n  USER SCOPE\n    - Stored in user\u0027s .cycod/[feature] directory\n    - Applies to the current user in any directory\n    - Takes precedence over global scope\n\n  GLOBAL SCOPE\n    - Stored in system-wide configuration\n    - Available to all users on the system\n\nALIASES\n\n  PURPOSE\n    Command-line shortcuts for launching CycoD with specific parameters.\n\n  USAGE\n    cycod --aliasname\n    \n  CREATION\n    cycod [...] --save-alias ALIAS            Local scope (default)\n    cycod [...] --save-user-alias ALIAS       User scope\n    cycod [...] --save-global-alias ALIAS     Global scope\n\n  MANAGEMENT\n    cycod alias list                          List all aliases\n    cycod alias get ALIAS_NAME                Show an alias\n    cycod alias delete ALIAS_NAME             Delete an alias\n\nCUSTOM PROMPTS\n\n  PURPOSE\n    Text templates for quick insertion into chat conversations.\n\n  USAGE\n    In a chat session: /promptname\n    \n  CREATION\n    cycod prompt create NAME \u0022TEXT\u0022           Local scope (default)\n    cycod prompt create NAME \u0022TEXT\u0022 --user    User scope\n    cycod prompt create NAME \u0022TEXT\u0022 --global  Global scope\n\n  MANAGEMENT\n    cycod prompt list                         List all prompts\n    cycod prompt get PROMPT_NAME              Show a prompt\n    cycod prompt delete PROMPT_NAME           Delete a prompt\n\nCONFIG FILES\n\n  PURPOSE\n    Store persistent settings for the application.\n\n  MANAGEMENT\n    cycod config list                         List all settings\n    cycod config get KEY                      Show a setting\n    cycod config set KEY VALUE                Change a setting\n    cycod config clear KEY                    Remove a setting\n    cycod config add KEY VALUE                Add to a list setting\n    cycod config remove KEY VALUE             Remove from a list setting\n\n  SCOPE OPTIONS\n    --local, -l     Local scope (default for most commands)\n    --user, -u      User scope (current user)\n    --global, -g    Global scope (all users)\n    --any, -a       All scopes (default for \u0027list\u0027 and \u0027get\u0027 commands)\n\nPROFILES\n\n  PURPOSE\n    Collections of settings that can be loaded as a unit.\n\n  USAGE\n    cycod --profile PROFILENAME\n    \n  STORAGE\n    Profiles are YAML files stored in:\n    - .cycod/profiles/ (local)\n    - ~/.cycod/profiles/ (user)\n    - [system]/.cycod/profiles/ (global)\n\nWHEN TO USE EACH FEATURE\n\n  ALIASES\n    When you want to save command-line options for reuse.\n    Example: cycod --python-expert\n\n  PROMPTS\n    When you need quick access to text templates during chat.\n    Example: /code-review\n\n  CONFIG\n    For persistent application settings.\n    Example: cycod config set default-model gpt-4o\n\n  PROFILES\n    When you want to switch between sets of configurations.\n    Example: cycod --profile development\n\nSEE ALSO\n\n  cycod help alias\n  cycod help prompt\n  cycod help config\n  cycod help options\n  cycod help settings\n  cycod help use github copilot\n  cycod help use anthropic\n  cycod help use azure openai\n  cycod help use bedrock\n  cycod help use gemini\n  cycod help use grok\n  cycod help use openai\n  cycod help function calls\n  cycod help timeouts\n\u0060\u0060\u0060\n\n## \u0060cycod help mcp\u0060\n\n\u0060\u0060\u0060\nCYCOD MCP COMMANDS\n\n  These commands allow you to manage Model Context Protocol (MCP) server registrations.\n\n  MCP servers provide capabilities like database access, API integrations, or tool execution.\n\nUSAGE: cycod mcp list [--scope]\n   OR: cycod mcp get SERVER_NAME [--scope]\n   OR: cycod mcp add SERVER_NAME --command \u0022COMMAND ARGS\u0022 [--scope]\n   OR: cycod mcp add SERVER_NAME --url URL [--scope]\n   OR: cycod mcp remove SERVER_NAME [--scope]\n\nOPTIONS\n\n  SCOPE OPTIONS\n\n    --global, -g    Manage regrations from global scope (all users)\n    --user, -u      Manage regrations from user scope (current user)\n    --local, -l     Manage regrations from local scope (default for most commands)\n    --any, -a       Manage regrations from from all scopes (default for \u0027list\u0027 and \u0027get\u0027 commands)\n\nCOMMANDS\n\n    list            List all registered MCP servers\n    get             Display the details of a specific registered MCP server\n    add             Create a new MCP server registration\n    remove          Delete an MCP server registration\n\nSEE ALSO\n\n  cycod help options\n  cycod help mcp list\n  cycod help mcp get\n  cycod help mcp add\n  cycod help mcp remove\n\u0060\u0060\u0060\n\n## \u0060cycod help options\u0060\n\n\u0060\u0060\u0060\nUSAGE: cycod [...]\n\n  MODEL INPUTS\n    --system-prompt \u0022PROMPT|NAME\u0022         Replace system prompt given to AI model\n    --add-system-prompt \u0022PROMPT|NAME\u0022     Add text to the system prompt, to re-inforce critical instructions\n    --add-user-prompt \u0022PROMPT|NAME\u0022       Add user prompt(s), prepended to the first input/question/instruction\n    --prompt \u0022NAME\u0022                       Alias for --add-user-prompt\n\n    --input \u0022LINE1\u0022 \u0022LINE2\u0022 ...           Provide one or more lines of inputs to the AI model.\n    --question ...                        Alias for --interactive false --quiet --input\n    --instruction ...                     Alias for --input\n\n    --inputs \u0022INPUT1\u0022 \u0022INPUT2\u0022 ...        Provide one or more inputs, sequentially, to the AI model.\n    --questions ...                       Alias for --interactive false --quiet --inputs\n    --instructions ...                    Alias for --inputs\n    \n    --image FILE [FILE2 ...]              Include image files in the conversation (supports glob patterns)\n\n    --use-templates TRUE/FALSE            Use template processing in model inputs above (default: true)\n    --no-templates                        Alias for --use-templates false\n\n    --use-mcps [NAME1 [...]]              Use pre-registered Model Context Protocol servers (default name: *)\n    --with-mcp \u0022COMMAND [ARGS...]\u0022        Use an external Model Context Protocol server wo/ registration\n    --no-mcps                             Do not use Model Context Protocol servers\n\n  CHAT HISTORY                            (see: cycod help chat history)\n    --continue                            Continue the most recent chat history\n    --chat-history [FILE]                 Load from and save to the same JSONL file\n    --input-chat-history [FILE]           Load chat history from the specified JSONL file\n    --output-chat-history [FILE]          Save chat history to the specified file\n    --output-trajectory [FILE]            Save chat history in human readable trajectory format\n\n  FUNCTION CALLING                        (see: cycod help function calls)\n    --auto-approve NAME1 [...]            Automatically approve function calls by name\n    --auto-approve read/write/run/*       Automatically approve all function calls of the specified type\n    --auto-deny NAME1 [...]               Automatically deny function calls by name\n    --auto-deny read/write/run/*          Automatically deny all function calls of the specified type\n\n  MODEL OPTIONS\n    --max-prompt-tokens TOKENS            Maximum prompt token target (managed by CYCOD)\n    --max-output-tokens TOKENS            Maximum AI output tokens (provided to AI model)\n    --max-tool-tokens TOKENS              Maximum tool output tokens target (managed by CYCOD)\n    --max-chat-tokens TOKENS              Maximum total chat tokens target (managed by CYCOD)\n\n  MODEL PROVIDERS\n    --use-copilot                         Prefer use of GitHub Copilot\n    --use-azure-openai                    Prefer use of Azure OpenAI API as the chat provider\n    --use-anthropic                       Prefer use of Anthropic Claude\n    --use-bedrock                         Prefer use of AWS Bedrock\n    --use-gemini                          Prefer use of Google Gemini\n    --use-grok                            Prefer use of Grok (x.ai)\n    --use-openai                          Prefer use of OpenAI API as the chat provider\n\n  ANTHROPIC OPTIONS                       (see: cycod help use anthropic)\n    --anthropic-api-key KEY               Use a specific API key for Anthropic\n    --anthropic-model-name NAME           Use a specific chat model (default: claude-sonnet-4)\n\n  AWS BEDROCK                             (see: cycod help use aws bedrock)\n    --aws-bedrock-api-key KEY             Use a specific authentication key\n    --aws-bedrock-api-secret SECRET       Use a specific authentication secret\n    --aws-bedrock-region REGION           Use a specific AWS region for Bedrock\n    --aws-bedrock-model-id ID             Use a specific Bedrock model ID\n\n  AZURE OPENAI OPTIONS                    (see: cycod help use azure openai) \n    --azure-openai-api-key KEY            Use a specific authentication key\n    --azure-openai-endpoint URL           Use a specific API endpoint\n    --azure-openai-chat-deployment NAME   Use a specific chat model deployment\n\n  GOOGLE GEMINI                           (see: cycod help use gemini)\n    --google-gemini-api-key KEY           Use a specific API key\n    --google-gemini-model-id ID           Use a specific Gemini model ID\n\n  GROK OPTIONS                            (see: cycod help use grok)\n    --grok-api-key KEY                    Use a specific API key\n    --grok-endpoint URL                   Use a specific API endpoint (default: https://api.x.ai/v1)\n    --grok-model-name NAME                Use a specific model (default: grok-3)\n\n  OPENAI OPTIONS                          (see: cycod help use openai)\n    --openai-api-key KEY                  Use a specific API key\n    --openai-chat-model-name NAME         Use a specific chat model (default: gpt-4o)\n\n  COPILOT OPTIONS                         (see: cycod help use github copilot)\n    --copilot-model-name NAME             Use a specific model by name (default: claude-sonnet-4)\n    --copilot-api-endpoint URL            Use a specific API endpoint (default: https://api.githubcopilot.com)\n    --github-token TOKEN                  Use a specific GitHub authentication tok\n\n  CONFIGURATION\n    --config FILE1 [FILE2 [...]]          Load configuration from YAML or INI files\n    --profile NAME                        Load a specific profile\u0027s configuration from .cycod/profiles/NAME.yaml\n      \n  ALIASES                                 (see: cycod help aliases)\n    --save-alias ALIAS                    Same as --save-user-alias\n    --save-local-alias ALIAS              Save current options as an alias in local scope\n    --save-user-alias ALIAS               Save current options as an alias in user scope\n    --save-global-alias ALIAS             Save current options as an alias in global scope\n    --{ALIAS}                             Use options saved under the specified alias name\n\n  VARIABLES\n    --var NAME=VALUE                      Set a variable for template substitution\n    --vars NAME1=VALUE1 NAME2=VALUE2 ...  Set multiple variables for template substitution\n    --foreach var NAME in VALUE1 [...]    Define a loop variable with multiple values (expands to multiple commands)\n    --foreach var NAME in @FILE           Define a loop variable with values from a file (one per line)\n    --foreach var NAME in #..#            Define a loop variable with a numeric range (e.g., 1..5)\n\n  ADDITIONAL OPTIONS\n    --interactive TRUE/FALSE              Allow interactive use (default: true, unless stdin redirected)\n    --threads COUNT                       Number of parallel threads for non-interactive mode (default: CPU core count)\n    --folder PATH                         Change to the specified folder path before executing commands\n    --cwd PATH                            Same as --folder\n    --debug                               Turn on diagnostics/debug outputs\n    --quiet                               Turn off all but the most critical console outputs\n    --verbose                             Turn on additional diagnostics/debug outputs\n    --chat-completion-timeout SECONDS     Set a timeout in seconds for chat completion API calls (see: cycod help timeouts)\n\nSEE ALSO\n\n  cycod help\n  cycod help examples\n  cycod help provider\n  cycod help settings\n  cycod help function calls\n  cycod help timeouts\n  cycod help config\n  cycod help alias\n\n\u0060\u0060\u0060\n\n## \u0060cycod help prompt\u0060\n\n\u0060\u0060\u0060\nCYCOD PROMPT COMMANDS\n\n  These commands allow you to manage custom CYCOD prompts.\n\nUSAGE: cycod prompt list [--scope]\n   OR: cycod prompt get PROMPT_NAME [--scope]\n   OR: cycod prompt delete PROMPT_NAME [--scope]\n   OR: cycod prompt create PROMPT_NAME PROMPT_TEXT [--scope]\n\nOPTIONS\n\n  SCOPE OPTIONS\n\n    --global, -g    Use global scope (all users)\n    --user, -u      Use user scope (current user)\n    --local, -l     Use local scope (default for most commands)\n    --any, -a       Include prompts from all scopes (default for \u0027list\u0027 and \u0027get\u0027 commands)\n\nCOMMANDS\n\n    list            List all available prompts\n    get             Display the content of a specific prompt\n    delete          Delete a prompt\n    create          Create a new prompt\n\nSEE ALSO\n\n  cycod help prompt list\n  cycod help prompt get\n  cycod help prompt delete\n  cycod help prompt create\n  cycod help prompts\n\u0060\u0060\u0060\n\n## \u0060cycod help prompts\u0060\n\n\u0060\u0060\u0060\nCYCOD PROMPTS\n\n  Custom prompts are reusable text templates that can be quickly inserted\n  into your chat conversations by typing /promptname.\n\nUSING PROMPTS\n\n  In any chat session, type a forward slash (/) followed by a prompt name:\n\n    /explain\n    /translate\n    /summarize\n\n  You can also view available prompts by typing a slash and\n  pressing TAB to see prompt suggestions.\n\nPROMPT STORAGE\n\n  Prompts are stored in different locations based on scope:\n\n  - Local: In the .cycod/prompts directory of your current working directory\n  - User: In the .cycod/prompts directory of your user profile\n  - Global: In a system-wide directory available to all users\n\nMANAGING PROMPTS\n\n  Create a new prompt:\n    cycod prompt create myprompt \u0022This is my custom prompt text\u0022\n\n  List all available prompts:\n    cycod prompt list\n\n  View a specific prompt:\n    cycod prompt get myprompt\n\n  Delete a prompt:\n    cycod prompt delete myprompt\n\nEXAMPLES\n\n  EXAMPLE 1: Creating and using a code review prompt\n\n    cycod prompt create review \u0022Please review this code and suggest improvements:\n    1. Identify any bugs or edge cases\n    2. Suggest performance optimizations\n    3. Comment on style and readability\u0022\n\n    Then in chat, you can use:\n    /review\n    [paste code here]\n\n  EXAMPLE 2: Creating a translate prompt for quick translations\n\n    cycod prompt create translate \u0022Translate the following text to Spanish:\u0022 --user\n\n    Then in any chat from any directory:\n    /translate\n    [paste text to translate]\n\nSEE ALSO\n\n  cycod help prompt\n  cycod help prompt create\n  cycod help prompt list\n  cycod help prompt get\n  cycod help prompt delete\n\u0060\u0060\u0060\n\n## \u0060cycod help alias add\u0060\n\n\u0060\u0060\u0060\nCYCOD ALIAS ADD COMMAND\n\n  Creates a new alias with raw content without syntax validation.\n\nUSAGE: cycod alias add ALIAS_NAME \u0022CONTENT\u0022 [--scope]\n\nDESCRIPTION\n\n  The \u0027alias add\u0027 command creates a new alias that can be used with the --ALIAS_NAME\n  syntax. Unlike aliases created with --save-alias, aliases created with this command\n  don\u0027t undergo syntax validation, making them suitable for creating template-like\n  aliases or aliases with incomplete commands.\n\n  The content should be command-line arguments (without the \u0027cycod\u0027 prefix) that will\n  be inserted when the alias is used.\n\nPARAMETERS\n\n  ALIAS_NAME       Name of the alias to create\n\n  CONTENT          Command-line arguments to include in the alias\n                   Enclose in quotes if it contains spaces or special characters\n\n  SCOPE OPTIONS\n\n    --global, -g   Save in global scope (available to all users)\n    --user, -u     Save in user scope (available to current user in any directory)\n    --local, -l    Save in local scope (current directory) - DEFAULT\n\nEXAMPLES\n\n  # Create a local alias for code prompts\n  cycod alias add code-prompt \u0022--add-system-prompt @/prompts/code-system-prompt.md --instruction\u0022\n\n  # Create a user-scoped alias for Python programming\n  cycod alias add python-expert --user \u0022--system-prompt \\\u0022You are a Python expert\\\u0022\u0022\n\n  # Create a global alias for Linux administration\n  cycod alias add linux-admin --global \u0022--system-prompt \\\u0022You are a Linux administrator\\\u0022\u0022\n\nUSAGE EXAMPLES\n\n  # Use the alias with required parameters\n  cycod --code-prompt \u0022Write a sorting algorithm\u0022\n\n  # Use the alias with other options\n  cycod --verbose --code-prompt \u0022Write a sorting algorithm\u0022\n\n  # Place the alias anywhere in the command line\n  cycod --input \u0022Let\u0027s talk about\u0022 --code-prompt \u0022sorting algorithms\u0022\n\nSEE ALSO\n\n  cycod help alias\n  cycod help alias list\n  cycod help alias get\n  cycod help alias delete\n  cycod help aliases\n\u0060\u0060\u0060\n\n## \u0060cycod help alias delete\u0060\n\n\u0060\u0060\u0060\nCYCOD ALIAS DELETE\n\n  Delete an alias from a specific scope.\n\nUSAGE: cycod alias delete ALIAS_NAME [--scope]\n\nARGUMENTS\n\n  ALIAS_NAME        The name of the alias to delete.\n\nOPTIONS\n\n  SCOPE OPTIONS\n\n    --global, -g    Delete the alias from global scope (all users)\n    --user, -u      Delete the alias from user scope (current user)\n    --local, -l     Delete the alias from local scope (current directory)\n    --any, -a       Delete the alias from the first scope it\u0027s found in (default)\n\nEXAMPLES\n\n  EXAMPLE 1: Delete an alias from any scope\n\n    cycod alias delete my-alias\n\n  EXAMPLE 2: Delete an alias from user scope\n\n    cycod alias delete my-alias --user\n\nSEE ALSO\n\n  cycod help alias\n  cycod help aliases\n\u0060\u0060\u0060\n\n## \u0060cycod help alias get\u0060\n\n\u0060\u0060\u0060\nCYCOD ALIAS GET\n\n  Display the content of a specific alias.\n\nUSAGE: cycod alias get ALIAS_NAME [--scope]\n\nARGUMENTS\n\n  ALIAS_NAME        The name of the alias to view.\n\nOPTIONS\n\n  SCOPE OPTIONS\n\n    --global, -g    Look for the alias in global scope (all users)\n    --user, -u      Look for the alias in user scope (current user)\n    --local, -l     Look for the alias in local scope (current directory)\n    --any, -a       Look for the alias in any scope (default)\n\nEXAMPLES\n\n  EXAMPLE 1: Get an alias from any scope\n\n    cycod alias get my-alias\n\n  EXAMPLE 2: Get an alias from user scope\n\n    cycod alias get my-alias --user\n\nSEE ALSO\n\n  cycod help alias\n  cycod help aliases\n\u0060\u0060\u0060\n\n## \u0060cycod help alias list\u0060\n\n\u0060\u0060\u0060\nCYCOD ALIAS LIST\n\n  List all available aliases across all scopes or in a specific scope.\n\nUSAGE: cycod alias list [--scope]\n\nOPTIONS\n\n  SCOPE OPTIONS\n\n    --global, -g    List only global aliases (all users)\n    --user, -u      List only user aliases (current user)\n    --local, -l     List only local aliases (current directory)\n    --any, -a       List aliases from all scopes (default)\n\nEXAMPLES\n\n  EXAMPLE 1: List all aliases from all scopes\n\n    cycod alias list\n\n  EXAMPLE 2: List only user aliases\n\n    cycod alias list --user\n\nSEE ALSO\n\n  cycod help alias\n  cycod help aliases\n\u0060\u0060\u0060\n\n## \u0060cycod help chat history\u0060\n\n\u0060\u0060\u0060\nCYCOD CHAT HISTORY\n\n  CycoD provides two ways to save your conversation history:\n\n  1. Chat History (JSONL format) - Machine-readable format for reloading context\n  2. Trajectory (formatted text) - Human-readable format for reviewing conversations\n\nAUTOMATIC SAVING\n\n  By default, CycoD automatically saves both your chat history and trajectory\n  files to a \u0027history\u0027 directory under your user profile:\n\n    - Windows: %USERPROFILE%\\.cycod\\history\\\n    - Mac/Linux: ~/.cycod/history\\\n\n  Files are saved with timestamp-based names:\n    - Chat history: chat-history-{time}.jsonl\n    - Trajectory: trajectory-{time}.jsonl\n\nMANAGE AUTO-SAVING\n\n  You can disable automatic saving using the config command with the appropriate scope:\n\n  DISABLE FOR THE CURRENT DIRECTORY ONLY (LOCAL SCOPE):\n    cycod config set App.AutoSaveChatHistory false --local\n    cycod config set App.AutoSaveTrajectory false --local\n\n  DISABLE FOR ALL DIRECTORIES FOR CURRENT USER (USER SCOPE):\n    cycod config set App.AutoSaveChatHistory false --user\n    cycod config set App.AutoSaveTrajectory false --user\n\n  DISABLE FOR ALL USERS ON THIS COMPUTER (GLOBAL SCOPE):\n    cycod config set App.AutoSaveChatHistory false --global\n    cycod config set App.AutoSaveTrajectory false --global\n\n  To re-enable automatic saving, use the same commands with \u0027true\u0027 instead of \u0027false\u0027.\n\n  CHOOSING THE RIGHT SCOPE:\n    - Use --local when you want privacy only for a specific project\n    - Use --user when you want to disable history for all your projects\n    - Use --global when managing a shared system or setting company policy\n\n  VERIFY YOUR SETTINGS:\n    cycod config get App.AutoSaveChatHistory\n    cycod config get App.AutoSaveTrajectory\n\nMANUAL SAVING\n\n  You can also specify output paths explicitly using CLI options:\n\n    --output-chat-history \u003Cpath\u003E    Save chat history to specified file\n    --output-trajectory \u003Cpath\u003E      Save trajectory to specified file\n\n  When you provide these options, they take precedence over automatic saving.\n\nLOADING HISTORY\n\n  To continue a previous conversation, load a chat history using:\n\n    --input-chat-history \u003Cpath\u003E     Load chat history from specified file\n    --continue                      Continue the most recent chat history\n\nTOKEN MANAGEMENT\n\n  CycoD automatically manages token usage for long conversations:\n\n    --max-chat-tokens \u003Cnumber\u003E     Set a target for maximum total chat tokens\n\n  When loading or continuing chat histories, CycoD will automatically trim the\n  history to stay under the token target. This prevents errors from exceeding\n  model context limits while preserving the most relevant conversation parts.\n\n  CycoD optimizes this by:\n  - Trimming before loading chat histories\n  - Trimming during the conversation as needed\n  - Preserving essential context while removing less important details\n  - Focusing on keeping the most recent messages intact\n\nSEE ALSO\n\n  cycod help\n  cycod help config\n  cycod help options\n  cycod help settings\n\u0060\u0060\u0060\n\n## \u0060cycod help config add\u0060\n\n\u0060\u0060\u0060\nCYCOD CONFIG ADD\n\n  Add a value to a list configuration setting.\n\nUSAGE: cycod config add KEY VALUE [--scope]\n\nARGUMENTS\n\n  KEY              The name of the configuration setting\n  VALUE            The value to add to the list\n\nOPTIONS\n\n  SCOPE OPTIONS\n\n    --global, -g    Use global scope (all users)\n    --user, -u      Use user scope (current user)\n    --local, -l     Use local scope (default)\n\nEXAMPLES\n\n  EXAMPLE 1: Add a custom feature flag to a list in local configuration\n\n    cycod config add CUSTOM_FEATURES experimental_mode\n\n  EXAMPLE 2: Add a trusted domain to a global list\n\n    cycod config add TRUSTED_DOMAINS example.com --global\n\nNOTE: The CYCOD core environment variables (OPENAI_API_KEY, AZURE_OPENAI_ENDPOINT, etc.)\n      are typically set as single values, not lists. This command is useful for\n      custom list-type configuration settings in your own scripts.\n\nSEE ALSO\n\n  cycod help config\n  cycod help config list\n  cycod help config remove\n\u0060\u0060\u0060\n\n## \u0060cycod help config clear\u0060\n\n\u0060\u0060\u0060\nCYCOD CONFIG CLEAR\n\n  Clear a configuration setting (remove it completely).\n\nUSAGE: cycod config clear KEY [--scope]\n\nARGUMENTS\n\n  KEY              The name of the configuration setting to clear\n\nOPTIONS\n\n  SCOPE OPTIONS\n\n    --global, -g    Use global scope (all users)\n    --user, -u      Use user scope (current user)\n    --local, -l     Use local scope (default)\n\nEXAMPLES\n\n  EXAMPLE 1: Clear the auto approval of function calls\n\n    cycod config clear App.AutoApprove\n\n  EXAMPLE 2: Clear the OpenAI model name in local configuration\n\n    cycod config clear OPENAI_CHAT_MODEL_NAME\n\n  EXAMPLE 3: Clear the OpenAI API key in user configuration\n\n    cycod config clear OPENAI_API_KEY --user\n\nSEE ALSO\n\n  cycod help config\n  cycod help config set\n\u0060\u0060\u0060\n\n## \u0060cycod help config get\u0060\n\n\u0060\u0060\u0060\nCYCOD CONFIG GET\n\n  Get the value of a configuration setting.\n\nUSAGE: cycod config get KEY [--scope]\n\nARGUMENTS\n\n  KEY              The name of the configuration setting to retrieve\n\nOPTIONS\n\n  SCOPE OPTIONS\n\n    --global, -g    Use global scope (all users)\n    --user, -u      Use user scope (current user)\n    --local, -l     Use local scope (default)\n    --any, -a       Get from any scope (searches local, then user, then global)\n\nEXAMPLES\n\n  EXAMPLE 1: Get the OpenAI model name from local configuration\n\n    cycod config get OPENAI_CHAT_MODEL_NAME\n\n  EXAMPLE 2: Get the OpenAI API key from user configuration\n\n    cycod config get OPENAI_API_KEY --user\n\n  EXAMPLE 3: Get the Azure OpenAI deployment from any configuration scope\n\n    cycod config get AZURE_OPENAI_CHAT_DEPLOYMENT --any\n\nSEE ALSO\n\n  cycod help config\n  cycod help config list\n\u0060\u0060\u0060\n\n## \u0060cycod help config list\u0060\n\n\u0060\u0060\u0060\nCYCOD CONFIG LIST\n\n  List all configuration settings.\n\nUSAGE: cycod config list [--scope]\n\nOPTIONS\n\n  SCOPE OPTIONS\n\n    --global, -g    List only global configuration settings (all users)\n    --user, -u      List only user configuration settings (current user)\n    --local, -l     List only local configuration settings (current directory)\n    --any, -a       List settings from all scopes (default)\n\nEXAMPLES\n\n  EXAMPLE 1: List all configuration settings from all scopes\n\n    cycod config list\n\n  EXAMPLE 2: List only user configuration settings\n\n    cycod config list --user\n\nSEE ALSO\n\n  cycod help config\n  cycod help config get\n\u0060\u0060\u0060\n\n## \u0060cycod help config remove\u0060\n\n\u0060\u0060\u0060\nCYCOD CONFIG REMOVE\n\n  Remove a value from a list configuration setting.\n\nUSAGE: cycod config remove KEY VALUE [--scope]\n\nARGUMENTS\n\n  KEY              The name of the configuration setting\n  VALUE            The value to remove from the list\n\nOPTIONS\n\n  SCOPE OPTIONS\n\n    --global, -g    Use global scope (all users)\n    --user, -u      Use user scope (current user)\n    --local, -l     Use local scope (default)\n\nEXAMPLES\n\n  EXAMPLE 1: Remove a custom feature flag from a list in local configuration\n\n    cycod config remove CUSTOM_FEATURES experimental_mode\n\n  EXAMPLE 2: Remove a trusted domain from a global list\n\n    cycod config remove TRUSTED_DOMAINS example.com --global\n\nNOTE: The CYCOD core environment variables (OPENAI_API_KEY, AZURE_OPENAI_ENDPOINT, etc.)\n      are typically set as single values, not lists. This command is useful for\n      custom list-type configuration settings in your own scripts.\n\nSEE ALSO\n\n  cycod help config\n  cycod help config add\n\u0060\u0060\u0060\n\n## \u0060cycod help config set\u0060\n\n\u0060\u0060\u0060\nCYCOD CONFIG SET\n\n  Set the value of a configuration setting.\n\nUSAGE: cycod config set KEY VALUE [--scope]\n\nARGUMENTS\n\n  KEY              The name of the configuration setting\n  VALUE            The value to set\n\nOPTIONS\n\n  SCOPE OPTIONS\n\n    --global, -g    Use global scope (all users)\n    --user, -u      Use user scope (current user)\n    --local, -l     Use local scope (default)\n\nEXAMPLES\n\n  EXAMPLE 1: Automatically approve read-only function calls\n\n    cycod config set App.AutoApprove read\n\n  EXAMPLE 2: Set the default OpenAI model in local configuration\n\n    cycod config set OPENAI_CHAT_MODEL_NAME gpt-4-turbo\n\n  EXAMPLE 3: Set the OpenAI API key in user configuration\n\n    cycod config set OPENAI_API_KEY sk-1234567890abcdef --user\n\n  EXAMPLE 4: Set the Azure OpenAI endpoint in global configuration\n\n    cycod config set AZURE_OPENAI_ENDPOINT https://your-resource.openai.azure.com\n\nSEE ALSO\n\n  cycod help config\n  cycod help config get\n  cycod help config clear\n\u0060\u0060\u0060\n\n## \u0060cycod help function calls\u0060\n\n\u0060\u0060\u0060\nCYCOD FUNCTION CALLS\n\n  When the AI assistant wants to perform actions like reading or writing files or\n  executing commands, it uses function calls. CycoD lets you control which\n  functions you want to automatically approve or deny.\n\nFUNCTION CALL TYPES\n\n  CycoD function calls generally fall into three categories:\n\n  * read - Functions that read content (ViewFile, ListFiles, etc.)\n  * write - Functions that modify content (CreateFile, StrReplace, etc.)\n  * run - Functions that execute commands (RunBashCommand, RunCmdCommand, etc.)\n\nCONTROLLING FUNCTION PERMISSIONS\n\n  AUTO-APPROVE SETTINGS\n\n    Use the --auto-approve option to automatically allow specific function calls\n    without prompting for permission each time.\n\n    USAGE: cycod --auto-approve PATTERN1 [PATTERN2 [...]]\n\n    PATTERNS:\n      * function name - Approve a specific function by name (e.g., \u0022ViewFile\u0022)\n      * read - Approve all read-only functions\n      * write - Approve all write functions\n      * run - Approve all command execution functions\n      * * - Approve all functions\n\n    EXAMPLES:\n\n      EXAMPLE 1: Automatically approve read-only functions\n\n        cycod --auto-approve read\n\n      EXAMPLE 2: Automatically approve specific functions\n\n        cycod --auto-approve ViewFile ListFiles\n\n      EXAMPLE 3: Automatically approve all file operations but not command execution\n\n        cycod --auto-approve read write\n\n      EXAMPLE 4: Automatically approve all functions (use with caution)\n\n        cycod --auto-approve *\n\n  AUTO-DENY SETTINGS\n\n    Use the --auto-deny option to automatically block specific function calls\n    without prompting.\n\n    USAGE: cycod --auto-deny PATTERN1 [PATTERN2 [...]]\n\n    PATTERNS:\n      * function name - Deny a specific function by name (e.g., \u0022RunBashCommand\u0022)\n      * read - Deny all read-only functions\n      * write - Deny all write functions\n      * run - Deny all command execution functions\n\n    EXAMPLES:\n\n      EXAMPLE 1: Automatically deny all command execution\n\n        cycod --auto-deny run\n\n      EXAMPLE 2: Automatically deny specific functions\n\n        cycod --auto-deny CreateFile DeleteFile\n\n      EXAMPLE 3: Automatically deny all write operations\n\n        cycod --auto-deny write\n\nPERSISTENT CONFIGURATION\n\n  You can make your function call preferences persistent using the config commands:\n\n  EXAMPLE 1: Always auto-approve read-only functions\n\n    cycod config set App.AutoApprove read\n\n  EXAMPLE 2: Always auto-deny command execution functions\n\n    cycod config set App.AutoDeny run\n\n  EXAMPLE 3: Setting multiple auto-approvals\n\n    cycod config add App.AutoApprove read\n    cycod config add App.AutoApprove write\n\n  EXAMPLE 4: Clear all auto-approvals\n\n    cycod config clear App.AutoApprove\n\nENVIRONMENT VARIABLES\n\n  You can also set these options using environment variables:\n\n  CYCOD_AUTO_APPROVE - Space-separated list of auto-approved patterns\n  CYCOD_AUTO_DENY - Space-separated list of auto-denied patterns\n\nPRIORITY RULES\n\n  When both auto-approve and auto-deny settings apply to the same function:\n  1. Auto-deny takes precedence over auto-approve\n  2. If neither applies, CycoD will prompt you for permission\n\nSECURITY CONSIDERATIONS\n\n  * Use --auto-approve sparingly, especially for write and run functions\n  * Use --auto-deny for any functions you want to always restrict\n  * Consider using the --local scope for project-specific settings\n  * Use --user or --global scopes for your general preferences\n\nSEE ALSO\n\n  cycod help use app\n  cycod help options\n  cycod help config\n\u0060\u0060\u0060\n\n## \u0060cycod help mcp add\u0060\n\n\u0060\u0060\u0060\nCYCOD MCP ADD\n\n  Adds a new Model Context Protocol (MCP) server registration.\n  \nUSAGE: cycod mcp add SERVER_NAME --command \u0022COMMAND ARGS\u0022 [...]\n   OR: cycod mcp add SERVER_NAME --url URL [...]\n\n  Where SERVER_NAME is the name for the new MCP server registration.\n\nOPTIONS\n\n  STDIO SERVERS\n\n    --command       The command to execute to start the MCP server (for STDIO transport)\n    --arg ARG       An argument to pass to the command (can be used multiple times)\n    --args \u0022ARGS\u0022   Multiple arguments to pass to the command\n    --env, -e       An environment variable in KEY=VALUE format (can be used multiple times)\n\n  SSE SERVERS\n\n    --url           The URL for the SSE endpoint (for SSE transport)\n\n  SCOPE OPTIONS\n\n    --global, -g    Add registration to global scope (all users)\n    --user, -u      Add registration to user scope (current user)\n    --local, -l     Add registration to local scope (current directory, default)\n\nEXAMPLES\n\n  EXAMPLE 1: Register a basic stdio MCP server registration\n\n    cycod mcp add weather --command cycod-mcp-weather\n\n  EXAMPLE 2: Register an SSE MCP server registration\n\n    cycod mcp add my-sse-mcp --url https://example.com/sse-endpoint\n\nSEE ALSO\n\n  cycod help mcp\n  cycod help mcp get\n\u0060\u0060\u0060\n\n## \u0060cycod help mcp get\u0060\n\n\u0060\u0060\u0060\nCYCOD MCP GET\n\n  Display the details of a specific Model Context Protocol (MCP) server registration.\n\nUSAGE: cycod mcp get SERVER_NAME [--scope]\n\nOPTIONS\n\n  SERVER_NAME       The name of the MCP server registration to display\n\n  SCOPE OPTIONS\n\n    --global, -g    Get registration only from global scope (all users)\n    --user, -u      Get registration only from user scope (current user)\n    --local, -l     Get registration only from local scope (current directory)\n    --any, -a       Get registration from all scopes (default)\n\nEXAMPLES\n\n  EXAMPLE 1: Display an MCP server registration from any scope\n\n    cycod mcp get weather\n\n  EXAMPLE 2: Display an MCP server registration from user scope\n\n    cycod mcp get weather-api --user\n\nSEE ALSO\n\n  cycod help mcp\n  cycod help mcp list\n\u0060\u0060\u0060\n\n## \u0060cycod help mcp list\u0060\n\n\u0060\u0060\u0060\nCYCOD MCP LIST\n\n  List all registered Model Context Protocol (MCP) server registrations.\n\nUSAGE: cycod mcp list [--scope]\n\nOPTIONS\n\n  SCOPE OPTIONS\n\n    --global, -g    List MCP server registrations only from global scope (all users)\n    --user, -u      List MCP server registrations only from user scope (current user)\n    --local, -l     List MCP server registrations only from local scope (current directory)\n    --any, -a       List MCP server registrations from all scopes (default)\n\nEXAMPLES\n\n  EXAMPLE 1: List all registered MCP server registrations\n\n    cycod mcp list\n\n  EXAMPLE 2: List only MCP server registrations from user scope\n\n    cycod mcp list --user\n\nSEE ALSO\n\n  cycod help mcp\n  cycod help mcp get\n\u0060\u0060\u0060\n\n## \u0060cycod help mcp remove\u0060\n\n\u0060\u0060\u0060\nCYCOD MCP REMOVE\n\n  Delete a Model Context Protocol (MCP) server registration.\n\nUSAGE: cycod mcp remove SERVER_NAME [--scope]\n\nOPTIONS\n\n  SERVER_NAME       The name of the MCP server registration to remove\n\n  SCOPE OPTIONS\n\n    --global, -g    Remove registration only from global scope (all users)\n    --user, -u      Remove registration only from user scope (current user)\n    --local, -l     Remove registration only from local scope (current directory)\n    --any, -a       Remove registration from first matching scope (default)\n\nEXAMPLES\n\n  EXAMPLE 1: Remove an MCP server registration from any scope\n\n    cycod mcp remove weather\n\n  EXAMPLE 2: Remove an MCP server registration only from the user scope\n\n    cycod mcp remove weather --user\n\nSEE ALSO\n\n  cycod help mcp\n  cycod help mcp list\n\u0060\u0060\u0060\n\n## \u0060cycod help prompt create\u0060\n\n\u0060\u0060\u0060\nCYCOD PROMPT CREATE\n\n  Create a new custom prompt.\n\nUSAGE: cycod prompt create PROMPT_NAME PROMPT_TEXT [--scope]\n\nOPTIONS\n\n  PROMPT_NAME      The name for the new prompt (used as /PROMPT_NAME in chat)\n  PROMPT_TEXT      The content of the prompt\n\n  SCOPE OPTIONS\n\n    --global, -g    Create in global scope (all users)\n    --user, -u      Create in user scope (current user)\n    --local, -l     Create in local scope (default)\n\nEXAMPLES\n\n  EXAMPLE 1: Create a simple prompt in local scope\n\n    cycod prompt create summarize \u0022Please summarize the following text in three bullet points:\u0022\n\n  EXAMPLE 2: Create a prompt in user scope (available in all directories)\n\n    cycod prompt create explain \u0022Explain the following like I\u0027m five:\u0022 --user\n\n  EXAMPLE 3: Create a prompt with multiline text\n\n    cycod prompt create translate \u0022Translate the following text to Spanish:\n    Then format the translation with bullet points for each sentence.\n    Finally, provide pronunciation tips.\u0022\n\nNOTES\n\n  - Prompt names cannot contain spaces or special characters\n  - Leading slashes (/) will be automatically removed from prompt names\n  - Once created, prompts can be used in chat by typing /PROMPT_NAME\n  - Prompts cannot be created if a prompt with the same name already exists\n\nSEE ALSO\n\n  cycod help prompt\n  cycod help prompts\n\u0060\u0060\u0060\n\n## \u0060cycod help prompt delete\u0060\n\n\u0060\u0060\u0060\nCYCOD PROMPT DELETE\n\n  Delete a specific prompt.\n\nUSAGE: cycod prompt delete PROMPT_NAME [--scope]\n\nOPTIONS\n\n  PROMPT_NAME      The name of the prompt to delete\n\n  SCOPE OPTIONS\n\n    --global, -g    Delete only from global scope (all users)\n    --user, -u      Delete only from user scope (current user)\n    --local, -l     Delete only from local scope (current directory)\n    --any, -a       Delete from any scope where found (default)\n\nEXAMPLES\n\n  EXAMPLE 1: Delete a prompt from any scope\n\n    cycod prompt delete myPrompt\n\n  EXAMPLE 2: Delete a prompt only if it exists in the user scope\n\n    cycod prompt delete myPrompt --user\n\nNOTES\n\n  When a prompt is found and deleted, the command:\n  - Deletes the main prompt file\n  - Deletes any referenced files (if the prompt uses external content)\n  - Displays the paths of all deleted files\n\nSEE ALSO\n\n  cycod help prompt\n  cycod help prompts\n\u0060\u0060\u0060\n\n## \u0060cycod help prompt get\u0060\n\n\u0060\u0060\u0060\nCYCOD PROMPT GET\n\n  Display the content of a specific prompt.\n\nUSAGE: cycod prompt get PROMPT_NAME [--scope]\n\nOPTIONS\n\n  PROMPT_NAME      The name of the prompt to display\n\n  SCOPE OPTIONS\n\n    --global, -g    Look only in global scope (all users)\n    --user, -u      Look only in user scope (current user)\n    --local, -l     Look only in local scope (current directory)\n    --any, -a       Look in all scopes (default)\n\nEXAMPLES\n\n  EXAMPLE 1: Display a prompt from any scope\n\n    cycod prompt get myPrompt\n\n  EXAMPLE 2: Display a prompt only if it exists in the user scope\n\n    cycod prompt get myPrompt --user\n\nNOTES\n\n  When a prompt is found, the command displays:\n  - The prompt name\n  - The file location and scope\n  - The prompt content\n  - Usage example for the prompt in chat\n\nSEE ALSO\n\n  cycod help prompt\n  cycod help prompts\n\u0060\u0060\u0060\n\n## \u0060cycod help prompt list\u0060\n\n\u0060\u0060\u0060\nCYCOD PROMPT LIST\n\n  List all available prompts across all scopes or in a specific scope.\n\nUSAGE: cycod prompt list [--scope]\n\nOPTIONS\n\n  SCOPE OPTIONS\n\n    --global, -g    List only global prompts (all users)\n    --user, -u      List only user prompts (current user)\n    --local, -l     List only local prompts (current directory)\n    --any, -a       List prompts from all scopes (default)\n\nEXAMPLES\n\n  EXAMPLE 1: List all prompts from all scopes\n\n    cycod prompt list\n\n  EXAMPLE 2: List only user prompts\n\n    cycod prompt list --user\n\nSEE ALSO\n\n  cycod help prompt\n  cycod help prompts\n\u0060\u0060\u0060\n"}
{"role":"assistant","content":"Now let\u0027s look at the schema used in the test framework more closely:","tool_calls":[{"id":"toolu_vrtx_01PQRdj41ACYGX5AYmooUf6k","function":{"name":"Think","arguments":"{\u0022thought\u0022:\u0022# Comparing the Test Framework YAML Schema with Proposed Custom Tool Schema\\n\\n## Understanding Scope in CYCOD\\n\\nFrom the detailed help, I can see that CYCOD has a consistent approach to scopes:\\n\\n1. **Local Scope**:\\n   - Stored in \\u0060.cycod/[feature]\\u0060 directory in the current location\\n   - Only applies to the current directory\\n   - Takes precedence over user and global scopes\\n\\n2. **User Scope**:\\n   - Stored in user\\u0027s \\u0060.cycod/[feature]\\u0060 directory\\n   - Applies to the current user in any directory\\n   - Takes precedence over global scope\\n\\n3. **Global Scope**:\\n   - Stored in system-wide configuration\\n   - Available to all users on the system\\n\\n4. **Scope Search Order**:\\n   - When looking for an item, CYCOD searches in the local scope first, then the user scope, and finally the global scope.\\n\\n5. **Storage on Disk**:\\n   - Items are stored in their respective scope folders, such as:\\n     - Local: \\u0060./.cycod/[feature]/\\u0060\\n     - User: \\u0060~/.cycod/[feature]/\\u0060\\n     - Global: \\u0060/etc/cycod/[feature]/\\u0060 or \\u0060C:\\\\ProgramData\\\\cycod\\\\[feature]\\\\\\u0060\\n\\n## Test Framework Schema\\n\\nThe test framework (cycodt) uses a YAML-based schema with these key components:\\n\\n1. **Test Case Structure**:\\n   - \\u0060name\\u0060: The name of the test case (required)\\n   - \\u0060run\\u0060, \\u0060script\\u0060, \\u0060bash\\u0060, etc.: The command or script to run (required)\\n   - \\u0060env\\u0060: Environment variables to set\\n   - \\u0060input\\u0060: Input to pass to the command\\n   - \\u0060expect\\u0060, \\u0060expect-regex\\u0060, \\u0060not-expect-regex\\u0060: Expected output validation\\n   - \\u0060timeout\\u0060: Maximum execution time in milliseconds\\n   - \\u0060workingDirectory\\u0060: Where to run the test\\n\\n2. **Script Execution**:\\n   - Different ways to specify how to run scripts:\\n     - \\u0060run\\u0060: Direct command execution\\n     - \\u0060script\\u0060 \\u002B \\u0060shell\\u0060: Custom script with a specific shell\\n     - Shell shortcuts: \\u0060bash\\u0060, \\u0060cmd\\u0060, \\u0060pwsh\\u0060, \\u0060powershell\\u0060\\n     - Custom shell templates: \\u0060shell: python {0} {1}\\u0060\\n\\n3. **Organization**:\\n   - Tests can be grouped in areas, sub-areas, and classes\\n   - Test cases can be run in parallel or sequentially\\n\\n4. **Parameter Substitution**:\\n   - Matrix-based parameter substitution using \\u0060${{ matrix.VALUE }}\\u0060\\n   - Supports multiple variations of tests with different parameter values\\n\\n## Initial Proposal for Custom Tools\\n\\nMy initial proposal suggested:\\n\\n1. **Command-Line Interface**:\\n   \\u0060\\u0060\\u0060\\n   cycod tool add NAME [options]\\n   \\u0060\\u0060\\u0060\\n\\n2. **Storage Format (YAML)**:\\n   \\u0060\\u0060\\u0060yaml\\n   name: weather-lookup\\n   description: Get weather for a location\\n   command: curl -s \\u0027wttr.in/$LOCATION?format=3\\u0027\\n   shell: bash\\n   parameters:\\n     - name: LOCATION\\n       description: City or airport code\\n       required: true\\n   timeout: 60000\\n   scope: user\\n   \\u0060\\u0060\\u0060\\n\\n3. **Parameter Substitution**: Simple environment variable style (\\u0060$PARAM\\u0060)\\n\\n## Refinements Based on Test Framework and CYCOD Patterns\\n\\nConsidering the CYCOD scoping system and the test framework schema:\\n\\n1. **Storage Location**:\\n   - Tools should be stored in their respective scope folders:\\n     - \\u0060./.cycod/tools/\\u0060 (local)\\n     - \\u0060~/.cycod/tools/\\u0060 (user)\\n     - System-wide location for global\\n   - Each tool should be in a separate file, as mentioned in the requirements\\n\\n2. **File Format**:\\n   - Use YAML format consistent with other CYCOD configurations\\n   - Filename should match the tool name (e.g., \\u0060weather-lookup.yaml\\u0060)\\n\\n3. **Schema Alignment with Test Framework**:\\n   - Use similar fields where applicable:\\n     - \\u0060name\\u0060: The name of the tool\\n     - \\u0060description\\u0060: Human-readable description (for LLM)\\n     - \\u0060run\\u0060, \\u0060script\\u0060, \\u0060bash\\u0060, etc.: Use the same execution methods as the test framework\\n     - \\u0060env\\u0060: Environment variables to set\\n     - \\u0060timeout\\u0060: Maximum execution time in milliseconds\\n     - \\u0060workingDirectory\\u0060: Where to run the command\\n\\n4. **Parameter Definition**:\\n   - Define parameters in a format suitable for function calling\\n   - Include name, description, type, required status\\n   - Consider aligning with OpenAPI/JSON Schema for compatibility with function calling\\n\\n5. **Parameter Substitution**:\\n   - Consider supporting both styles:\\n     - Simple environment variable style (\\u0060$PARAM\\u0060) \\n     - Test framework style (\\u0060${{ parameters.VALUE }}\\u0060)\\n   - This would allow more complex substitution patterns\\n\\n## Refined Schema Proposal\\n\\nBased on these considerations, a refined schema could look like:\\n\\n\\u0060\\u0060\\u0060yaml\\n# Tool definition YAML\\nname: weather-lookup\\ndescription: Get weather for a location\\n# Use the same execution methods as test framework\\nbash: curl -s \\u0027wttr.in/${{ parameters.LOCATION }}?format=3\\u0027\\n# Or alternatively:\\n# run: curl -s \\u0027wttr.in/${{ parameters.LOCATION }}?format=3\\u0027\\n# Or:\\n# script: |\\n#   curl -s \\u0027wttr.in/${{ parameters.LOCATION }}?format=3\\u0027\\n# shell: bash\\n\\n# Parameters for function calling\\nparameters:\\n  LOCATION:\\n    description: City or airport code\\n    type: string\\n    required: true\\n\\n# Optional settings\\ntimeout: 60000\\nworkingDirectory: ~/weather-scripts\\nenv:\\n  HTTP_PROXY: http://proxy.example.com:8080\\n\\u0060\\u0060\\u0060\\n\\n## Command Line Interface Refinement\\n\\nThe command line interface should follow the CYCOD pattern for other features:\\n\\n\\u0060\\u0060\\u0060\\ncycod tool add NAME [options]\\ncycod tool get NAME [--scope]\\ncycod tool list [--scope]\\ncycod tool remove NAME [--scope]\\n\\u0060\\u0060\\u0060\\n\\nWhere options include:\\n- \\u0060--description \\u0022DESC\\u0022\\u0060 - Description of the tool\\n- \\u0060--bash \\u0022COMMAND\\u0022\\u0060 or \\u0060--run \\u0022COMMAND\\u0022\\u0060 or \\u0060--script \\u0022SCRIPT\\u0022\\u0060 \\u002B \\u0060--shell SHELL\\u0060\\n- \\u0060--parameter NAME \\u0022DESC\\u0022\\u0060 - Define a parameter (can be used multiple times)\\n- \\u0060--parameter-type NAME TYPE\\u0060 - Define parameter type\\n- \\u0060--parameter-required NAME true/false\\u0060 - Define if parameter is required\\n- \\u0060--timeout MILLISECONDS\\u0060 - Default timeout\\n- \\u0060--working-directory DIR\\u0060 - Working directory\\n- \\u0060--env KEY=VALUE\\u0060 - Environment variables (can be used multiple times)\\n- \\u0060--scope local|user|global\\u0060 - Where to save the tool definition\\n\\nThis approach:\\n1. Aligns closely with the test framework\\u0027s schema for script execution\\n2. Follows CYCOD\\u0027s consistent approach to scopes\\n3. Provides a clear, consistent interface for tool management\\n4. Supports advanced functionality like environment variables and working directories\\n5. Stores each tool in a separate file as requested\u0022}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01PQRdj41ACYGX5AYmooUf6k","content":"Thought logged."}
{"role":"assistant","content":"Now let\u0027s check more details about the test framework to better understand its schema:","tool_calls":[{"id":"toolu_vrtx_01X5PC7VagejbHUwfHjQdSKa","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022find . -path \\u0022*/cycodt*\\u0022 -name \\u0022*.cs\\u0022 | head -n 10\u0022,\u0022timeoutMs\u0022:5000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01X5PC7VagejbHUwfHjQdSKa","content":"./src/cycodt/CommandLine/CycoDtCommandLineOptions.cs\n./src/cycodt/CommandLineCommands/ExpectCommands/ExpectBaseCommand.cs\n./src/cycodt/CommandLineCommands/ExpectCommands/ExpectCheckCommand.cs\n./src/cycodt/CommandLineCommands/ExpectCommands/ExpectFormatCommand.cs\n./src/cycodt/CommandLineCommands/TestCommands/TestBaseCommand.cs\n./src/cycodt/CommandLineCommands/TestCommands/TestListCommand.cs\n./src/cycodt/CommandLineCommands/TestCommands/TestRunCommand.cs\n./src/cycodt/CycoDtProgramInfo.cs\n./src/cycodt/CycoDtProgramRunner.cs\n./src/cycodt/obj/Debug/net9.0/.NETCoreApp,Version=v9.0.AssemblyAttributes.cs"}
{"role":"assistant","content":"Let\u0027s look at the test runner implementation to better understand how scripts are handled:","tool_calls":[{"id":"toolu_vrtx_01EvZ3FySfm4k8BPeKrA6eHa","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022find . -path \\u0022*/cycodt*\\u0022 -name \\u0022*.cs\\u0022 | grep -i \\u0022TestRunner\\\\\\\\|TestCase\\\\\\\\|Script\\u0022\u0022,\u0022timeoutMs\u0022:5000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01EvZ3FySfm4k8BPeKrA6eHa","content":"./src/cycodt/TestFramework/RunnableTestCase.cs\n./src/cycodt/TestFramework/RunnableTestCaseItem.cs\n./src/cycodt/TestFramework/YamlTestCaseFilter.cs\n./src/cycodt/TestFramework/YamlTestCaseMatrixHelper.cs\n./src/cycodt/TestFramework/YamlTestCaseParseContext.cs\n./src/cycodt/TestFramework/YamlTestCaseParser.cs\n./src/cycodt/TestFramework/YamlTestCaseRunner.cs"}
{"role":"assistant","content":"Let\u0027s examine the test case parser and runner:","tool_calls":[{"id":"toolu_vrtx_01JaETpKMShuJMmRDVCfSuYH","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:50,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycodt/TestFramework/RunnableTestCase.cs\u0022,\u0022startLine\u0022:0}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01JaETpKMShuJMmRDVCfSuYH","content":"1: using Microsoft.VisualStudio.TestPlatform.ObjectModel;\r\n2: \r\n3: public class RunnableTestCase\r\n4: {\r\n5:     public RunnableTestCase(TestCase test) :\r\n6:         this(test, MatrixFromTest(test))\r\n7:     {\r\n8:     }\r\n9: \r\n10:     public RunnableTestCase(TestCase test, List\u003CDictionary\u003Cstring, string\u003E\u003E matrix)\r\n11:     {\r\n12:         _test = test;\r\n13:         _matrix = matrix;\r\n14: \r\n15:         foreach (var matrixItem in _matrix)\r\n16:         {\r\n17:             _items.Add(new RunnableTestCaseItem(this, matrixItem));\r\n18:         }\r\n19:     }\r\n20: \r\n21:     public TestCase Test { get { return _test; } }\r\n22: \r\n23:     public IEnumerable\u003CRunnableTestCaseItem\u003E Items { get { return _items; } }\r\n24: \r\n25:     public bool IsRunning { get { return _started \u0026\u0026 !_stopped; } }\r\n26:     public bool IsFinished { get { return _started \u0026\u0026 _stopped; } }\r\n27: \r\n28:     public void RecordStart(IYamlTestFrameworkHost host, RunnableTestCaseItem item)\r\n29:     {\r\n30:         Logger.Log($\u0022RunnableTestCase.RecordStart({_test.DisplayName})\u0022);\r\n31: \r\n32:         if (_stopped) throw new InvalidOperationException(\u0022Cannot start a stopped test case.\u0022);\r\n33:         if (_started) return;\r\n34: \r\n35:         host.RecordStart(_test);\r\n36: \r\n37:         _started = true;\r\n38:     }\r\n39: \r\n40:     public void RecordResults(IYamlTestFrameworkHost host, RunnableTestCaseItem runnableTestCaseItem, IList\u003CTestResult\u003E results)\r\n41:     {\r\n42:         Logger.Log($\u0022RunnableTestCase.RecordResults({_test.DisplayName})\u0022);\r\n43: \r\n44:         if (!_started) throw new InvalidOperationException(\u0022Cannot record results for a test case that has not been started.\u0022);\r\n45:         if (_stopped) throw new InvalidOperationException(\u0022Cannot record results for a test case that has been stopped.\u0022);\r\n46: \r\n47:         foreach (var result in results)\r\n48:         {\r\n49:             host.RecordResult(result);\r\n50:         }"}
{"role":"assistant","content":"Let\u0027s examine the YAML test case parser:","tool_calls":[{"id":"toolu_vrtx_01Kdu59PfybYX836eGcPj39e","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:50,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycodt/TestFramework/YamlTestCaseParser.cs\u0022,\u0022startLine\u0022:0}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01Kdu59PfybYX836eGcPj39e","content":"1: using System.Text;\r\n2: using Microsoft.VisualStudio.TestPlatform.ObjectModel;\r\n3: using YamlDotNet.RepresentationModel;\r\n4: \r\n5: public partial class YamlTestCaseParser\r\n6: {\r\n7:     public static IEnumerable\u003CTestCase\u003E TestCasesFromYaml(string source, FileInfo file)\r\n8:     {\r\n9:         var defaultTags = YamlTagHelpers.FindAndGetDefaultTags(file.Directory!);\r\n10: \r\n11:         var workingDirectory = GetScalarString(null, defaultTags, \u0022workingDirectory\u0022);\r\n12:         workingDirectory = UpdateWorkingDirectory(file.Directory!.FullName, workingDirectory);\r\n13: \r\n14:         var context = new YamlTestCaseParseContext() {\r\n15:             Source = source,\r\n16:             File = file,\r\n17:             Area = GetRootArea(file),\r\n18:             Class = GetScalarString(null, defaultTags, \u0022class\u0022, defaultClassName)!,\r\n19:             Tags = defaultTags,\r\n20:             Environment = YamlEnvHelpers.GetDefaultEnvironment(true, workingDirectory),\r\n21:             WorkingDirectory = workingDirectory,\r\n22:             Matrix = YamlTestCaseMatrixHelpers.GetNewMatrix()\r\n23:         };\r\n24: \r\n25:         var parsed = YamlHelpers.ParseYamlStream(file.FullName);\r\n26:         return TestCasesFromYamlStream(context, parsed).ToList();\r\n27:     }\r\n28: \r\n29:     #region private methods\r\n30: \r\n31:     private static IEnumerable\u003CTestCase\u003E TestCasesFromYamlStream(YamlTestCaseParseContext context, YamlStream parsed)\r\n32:     {\r\n33:         var tests = new List\u003CTestCase\u003E();\r\n34: \r\n35:         var docs = parsed?.Documents;\r\n36:         if (docs == null) return tests;\r\n37: \r\n38:         foreach (var document in docs)\r\n39:         {\r\n40:             var fromDocument = TestCasesFromYamlDocumentRootNode(context, document.RootNode);\r\n41:             if (fromDocument != null)\r\n42:             {\r\n43:                 tests.AddRange(fromDocument);\r\n44:             }\r\n45:         }\r\n46:         return tests;\r\n47:     }\r\n48: \r\n49:     private static IEnumerable\u003CTestCase\u003E? TestCasesFromYamlDocumentRootNode(YamlTestCaseParseContext context, YamlNode node)\r\n50:     {"}
{"role":"assistant","content":"Let\u0027s look at how scripts are executed:","tool_calls":[{"id":"toolu_vrtx_013sAUApyY4RnJXqQeEBPmvv","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:70,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycodt/TestFramework/YamlTestCaseRunner.cs\u0022,\u0022startLine\u0022:0}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_013sAUApyY4RnJXqQeEBPmvv","content":"1: using System.Diagnostics;\r\n2: using System.Runtime.InteropServices;\r\n3: using System.Text;\r\n4: using System.Text.Json;\r\n5: using Microsoft.VisualStudio.TestPlatform.ObjectModel;\r\n6: \r\n7: public class YamlTestCaseRunner\r\n8: {\r\n9:     public static IEnumerable\u003CTestResult\u003E TestCaseGetResults(TestCase test, string cli, string? runProcess, string? script, string? shell, string? arguments, string? input, string? expectGpt, string? expectRegex, string? notExpectRegex, string? env, string? workingDirectory, int timeout, int expectExitCode, bool skipOnFailure, string? @foreach)\r\n10:     {\r\n11:         Logger.Log($\u0022YamlTestCaseRunner.TestCaseGetResults: ENTER\u0022);\r\n12: \r\n13:         foreach (var foreachItem in ExpandForEachGroups(@foreach))\r\n14:         {\r\n15:             var result = TestCaseGetResult(test, cli, runProcess, script, shell, foreachItem, arguments, input, expectGpt, expectRegex, notExpectRegex, env, workingDirectory!, timeout, expectExitCode, skipOnFailure);\r\n16:             if (!string.IsNullOrEmpty(foreachItem) \u0026\u0026 foreachItem != \u0022{}\u0022)\r\n17:             {\r\n18:                 result.DisplayName = GetTestResultDisplayName(test.DisplayName, foreachItem);\r\n19:             }\r\n20:             yield return result;\r\n21:         }\r\n22: \r\n23:         Logger.Log($\u0022YamlTestCaseRunner.TestCaseGetResults: EXIT\u0022);\r\n24:     }\r\n25: \r\n26:     #region private methods\r\n27: \r\n28:     private static TestResult TestCaseGetResult(TestCase test, string cli, string? runProcess, string? script, string? shell, string? foreachItem, string? arguments, string? input, string? expectGpt, string? expectRegex, string? notExpectRegex, string? env, string workingDirectory, int timeout, int expectExitCode, bool skipOnFailure)\r\n29:     {\r\n30:         var start = DateTime.Now;\r\n31: \r\n32:         var outcome = RunTestCase(skipOnFailure, cli, runProcess, script, shell, foreachItem, arguments, input, expectGpt, expectRegex, notExpectRegex, env, workingDirectory, timeout, expectExitCode, out string stdOut, out string stdErr, out string errorMessage, out string stackTrace, out string additional, out string debugTrace);\r\n33: \r\n34:         var stop = DateTime.Now;\r\n35:         return CreateTestResult(test, start, stop, stdOut, stdErr, errorMessage, stackTrace, additional, debugTrace, outcome);\r\n36:     }\r\n37: \r\n38:     private static string GetTestResultDisplayName(string testDisplayName, string json)\r\n39:     {\r\n40:         var testResultDisplayName = testDisplayName;\r\n41: \r\n42:         var document = JsonDocument.Parse(json);\r\n43:         if(document.RootElement.ValueKind == JsonValueKind.Object)\r\n44:         {\r\n45:             var root = document.RootElement;\r\n46:             foreach(var property in root.EnumerateObject())\r\n47:             {\r\n48:                 var keys = property.Name.Split(new char[] { \u0027\\t\u0027 });\r\n49:                 var values = property.Value.GetString()!.Split(new char[] { \u0027\\t\u0027 });\r\n50: \r\n51:                 for (int i = 0; i \u003C keys.Length; i\u002B\u002B)\r\n52:                 {\r\n53:                     if (testResultDisplayName.Contains(\u0022{\u0022 \u002B keys[i] \u002B \u0022}\u0022))\r\n54:                     {\r\n55:                         testResultDisplayName = testResultDisplayName.Replace(\u0022{\u0022 \u002Bkeys[i] \u002B \u0022}\u0022, values[i]);\r\n56:                     }\r\n57:                 }\r\n58:             }\r\n59:         }\r\n60: \r\n61:         // if the testDisplayName was not templatized, ie, it had no {}\r\n62:         if (testResultDisplayName == testDisplayName)\r\n63:         {\r\n64:             return $\u0022{testDisplayName}: {RedactSensitiveDataFromForeachItem(json)}\u0022;\r\n65:         }\r\n66: \r\n67:         return testResultDisplayName;\r\n68:     }\r\n69: \r\n70:     private static string RedactSensitiveDataFromForeachItem(string foreachItem)"}
{"role":"assistant","content":"Let\u0027s look at how the script execution is handled:","tool_calls":[{"id":"toolu_vrtx_01Q1tnmYrTeBc8PcRzWbjmuR","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022grep -A 30 \\u0022RunTestCase\\u0022 ./src/cycodt/TestFramework/YamlTestCaseRunner.cs\u0022,\u0022timeoutMs\u0022:5000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01Q1tnmYrTeBc8PcRzWbjmuR","content":"        var outcome = RunTestCase(skipOnFailure, cli, runProcess, script, shell, foreachItem, arguments, input, expectGpt, expectRegex, notExpectRegex, env, workingDirectory, timeout, expectExitCode, out string stdOut, out string stdErr, out string errorMessage, out string stackTrace, out string additional, out string debugTrace);\n\n        var stop = DateTime.Now;\n        return CreateTestResult(test, start, stop, stdOut, stdErr, errorMessage, stackTrace, additional, debugTrace, outcome);\n    }\n\n    private static string GetTestResultDisplayName(string testDisplayName, string json)\n    {\n        var testResultDisplayName = testDisplayName;\n\n        var document = JsonDocument.Parse(json);\n        if(document.RootElement.ValueKind == JsonValueKind.Object)\n        {\n            var root = document.RootElement;\n            foreach(var property in root.EnumerateObject())\n            {\n                var keys = property.Name.Split(new char[] { \u0027\\t\u0027 });\n                var values = property.Value.GetString()!.Split(new char[] { \u0027\\t\u0027 });\n\n                for (int i = 0; i \u003C keys.Length; i\u002B\u002B)\n                {\n                    if (testResultDisplayName.Contains(\u0022{\u0022 \u002B keys[i] \u002B \u0022}\u0022))\n                    {\n                        testResultDisplayName = testResultDisplayName.Replace(\u0022{\u0022 \u002Bkeys[i] \u002B \u0022}\u0022, values[i]);\n                    }\n                }\n            }\n        }\n\n        // if the testDisplayName was not templatized, ie, it had no {}\n        if (testResultDisplayName == testDisplayName)\n--\n    private static TestOutcome RunTestCase(bool skipOnFailure, string cli, string? runProcess, string? script, string? shell, string? @foreach, string? arguments, string? input, string? expectGpt, string? expectRegex, string? notExpectRegex, string? env, string workingDirectory, int timeout, int expectExitCode, out string stdOut, out string stdErr, out string errorMessage, out string stackTrace, out string additional, out string debugTrace)\n    {\n        var outcome = TestOutcome.None;\n\n        additional = $\u0022START TIME: {DateTime.Now}\u0022;\n        debugTrace = \u0022\u0022;\n        stackTrace = script ?? string.Empty;\n\n        var merged = string.Empty;\n        stdOut = string.Empty;\n        stdErr = string.Empty;\n\n        try\n        {\n            var isRun = !string.IsNullOrEmpty(runProcess) || string.IsNullOrEmpty(script);\n            var isScript = !string.IsNullOrEmpty(script) \u0026\u0026 string.IsNullOrEmpty(runProcess);\n            var ok = isRun || isScript;\n            if (!ok) throw new Exception(\u0022Neither run nor script specified!\u0022);\n\n            var kvs = KeyValuePairsFromJson(arguments, true);\n            kvs.AddRange(KeyValuePairsFromJson(@foreach, false));\n            stackTrace = UpdateStackTrace(stackTrace, runProcess, kvs);\n\n            var startArgs = GetKeyValueArgs(kvs);\n            var envVars = YamlEnvHelpers.GetEnvironmentFromMultiLineString(env);\n\n            var result = isRun\n                ? ProcessHelpers.RunProcess($\u0022{runProcess} {startArgs}\u0022, workingDirectory, envVars, input, timeout)\n                : ProcessHelpers.RunShellScript(shell ?? \u0022cmd\u0022, script!, startArgs, workingDirectory, envVars, input, timeout);\n\n            stdOut = result!.StandardOutput;"}
{"role":"assistant","content":"Based on my detailed exploration, I\u0027m now ready to provide a more informed and refined proposal for custom tool commands in CYCOD, aligning better with both the test framework schema and the CYCOD scoping patterns.\n\n# Refined Custom Tools Proposal for CYCOD\n\nAfter analyzing the CYCOD scoping system and the test framework schema, I can now provide a more aligned proposal for implementing custom tools/commands in CYCOD.\n\n## Key Insights from Analysis\n\n1. **CYCOD Scoping System**:\n   - Three scopes: local, user, and global\n   - Files stored in \u0060.cycod/[feature]/\u0060 directories at appropriate scope levels\n   - Consistent lookup pattern from local \u2192 user \u2192 global\n\n2. **Test Framework Schema**:\n   - Flexible script execution with multiple shell options\n   - Parameter substitution via JSON objects/matrices\n   - Environment variable support\n   - Timeout and working directory settings\n\n## Refined Schema for Custom Tools\n\nI propose a schema that aligns closely with the test framework while being optimized for function calling:\n\n\u0060\u0060\u0060yaml\n# Tool definition YAML (.cycod/tools/weather-lookup.yaml)\nname: weather-lookup\ndescription: Get weather for a location\n\n# Use the same execution methods as test framework\n# Option 1: Direct command\nrun: curl -s \u0027wttr.in/${LOCATION}?format=3\u0027\n\n# OR Option 2: Script with shell specification\n# script: |\n#   curl -s \u0027wttr.in/${LOCATION}?format=3\u0027\n# shell: bash\n\n# OR Option 3: Shell-specific shortcut\n# bash: curl -s \u0027wttr.in/${LOCATION}?format=3\u0027\n\n# Parameters for function calling (JSON Schema format)\nparameters:\n  type: object\n  properties:\n    LOCATION:\n      type: string\n      description: City or airport code\n  required: [LOCATION]\n\n# Optional settings\ntimeout: 60000\nworkingDirectory: ~/weather-scripts\nenv:\n  HTTP_PROXY: http://proxy.example.com:8080\n\u0060\u0060\u0060\n\nThis schema:\n1. Uses the same command/script execution options as the test framework\n2. Uses JSON Schema format for parameter definitions (aligns with function calling)\n3. Supports the same options for timeouts, environment variables, etc.\n4. Uses simple parameter substitution with \u0060${PARAM}\u0060 syntax for clarity\n\n## Command Line Interface\n\nThe interface should follow CYCOD\u0027s established patterns:\n\n\u0060\u0060\u0060\ncycod tool add NAME [options]\ncycod tool get NAME [--scope]\ncycod tool list [--scope]\ncycod tool remove NAME [--scope]\n\u0060\u0060\u0060\n\nWhere options include:\n- \u0060--description \u0022DESC\u0022\u0060 - Human-readable description of the tool\n- \u0060--run \u0022COMMAND\u0022\u0060 or \u0060--bash \u0022COMMAND\u0022\u0060 or \u0060--script \u0022SCRIPT\u0022\u0060 \u002B \u0060--shell SHELL\u0060 - How to execute the tool\n- \u0060--parameter NAME \u0022DESC\u0022 [--type TYPE] [--required]\u0060 - Define a parameter (can be used multiple times)\n- \u0060--timeout MILLISECONDS\u0060 - Default timeout\n- \u0060--working-directory DIR\u0060 - Working directory for command execution\n- \u0060--env KEY=VALUE\u0060 - Environment variables (can be used multiple times)\n- \u0060--scope local|user|global\u0060 - Where to save the tool definition (default: local)\n\nExample usage:\n\u0060\u0060\u0060\ncycod tool add weather-lookup --description \u0022Get weather for a location\u0022 --bash \u0022curl -s \u0027wttr.in/\\${LOCATION}?format=3\u0027\u0022 --parameter LOCATION \u0022City or airport code\u0022 --type string --required --scope user\n\u0060\u0060\u0060\n\n## Storage Implementation\n\nEach tool would be stored as a single YAML file:\n- Local: \u0060./.cycod/tools/weather-lookup.yaml\u0060\n- User: \u0060~/.cycod/tools/weather-lookup.yaml\u0060\n- Global: System-wide location depending on OS\n\nThis follows the same pattern as prompts, aliases, and other CYCOD features.\n\n## Function Calling Integration\n\nWhen the LLM requests to call a custom tool:\n1. Look up the tool definition in scopes (local \u2192 user \u2192 global)\n2. Validate parameters against the JSON Schema\n3. Substitute parameters into the command/script\n4. Execute using the appropriate shell and settings\n5. Return the output to the LLM\n\n## Benefits of This Approach\n\n1. **Consistency with CYCOD**: Follows the same patterns as other CYCOD features\n2. **Alignment with Test Framework**: Leverages the same script execution mechanisms\n3. **Simplicity**: Easy to understand and use\n4. **Flexibility**: Supports multiple shell types and execution methods\n5. **Function Calling Compatibility**: Uses JSON Schema for parameter definitions\n6. **Security**: Works with existing auto-approve/auto-deny mechanisms\n\n## Example Tool Definitions\n\n### Simple Weather Tool\n\u0060\u0060\u0060yaml\nname: weather\ndescription: Get current weather for a location\nbash: curl -s \u0022wttr.in/${LOCATION}?format=3\u0022\nparameters:\n  type: object\n  properties:\n    LOCATION:\n      type: string\n      description: City name or airport code\n  required: [LOCATION]\ntimeout: 10000\n\u0060\u0060\u0060\n\n### GitHub Repository Info Tool\n\u0060\u0060\u0060yaml\nname: github-repo-info\ndescription: Get information about a GitHub repository\nbash: |\n  curl -s -H \u0022Accept: application/vnd.github.v3\u002Bjson\u0022 \\\n  \u0022https://api.github.com/repos/${OWNER}/${REPO}\u0022\nparameters:\n  type: object\n  properties:\n    OWNER:\n      type: string\n      description: Repository owner username\n    REPO:\n      type: string\n      description: Repository name\n  required: [OWNER, REPO]\ntimeout: 15000\n\u0060\u0060\u0060\n\n### File Search Tool\n\u0060\u0060\u0060yaml\nname: find-files\ndescription: Find files matching a pattern\npowershell: |\n  Get-ChildItem -Path \u0022${PATH}\u0022 -Filter \u0022${PATTERN}\u0022 -Recurse | \n  Select-Object FullName, Length, LastWriteTime | \n  Format-Table -AutoSize\nparameters:\n  type: object\n  properties:\n    PATH:\n      type: string\n      description: Directory path to search\n      default: \u0022.\u0022\n    PATTERN:\n      type: string\n      description: File pattern to match (e.g., *.txt)\n  required: [PATTERN]\n\u0060\u0060\u0060\n\nThis approach provides a consistent, flexible way to define custom shell command tools while aligning with existing CYCOD patterns and leveraging the robust script execution capabilities of the test framework."}
{"role":"user","content":"i like the direction. why the parameters having a properties of type oject? why not just jump into the other things immediately? help me understand"}
{"role":"assistant","content":"You\u0027re right, and that\u0027s a great question about the parameter structure. Let me clarify why I proposed that structure and explore a simpler alternative.\n\n## Parameter Structure: Current Proposal vs. Simplified\n\n### Current Proposed Structure (JSON Schema format):\n\u0060\u0060\u0060yaml\nparameters:\n  type: object\n  properties:\n    LOCATION:\n      type: string\n      description: City or airport code\n  required: [LOCATION]\n\u0060\u0060\u0060\n\n### Simplified Structure:\n\u0060\u0060\u0060yaml\nparameters:\n  LOCATION:\n    type: string\n    description: City or airport code\n    required: true\n\u0060\u0060\u0060\n\n## Explanation\n\nThe \u0060type: object\u0060 with \u0060properties\u0060 approach comes from standard JSON Schema format, which is commonly used in OpenAPI specifications and function calling interfaces like OpenAI\u0027s. However, it does introduce unnecessary nesting that makes both authoring and reading the tool definitions more complex than needed.\n\nYour point is excellent - we can simplify this structure significantly while maintaining all the necessary information. The simplified structure:\n\n1. Is more concise and readable\n2. Still captures all the needed metadata (type, description, required status)\n3. Makes it easier to author tool definitions manually\n4. Is still easily convertible to JSON Schema format for function calling if needed\n\n## Revised Schema Example\n\nHere\u0027s a revised weather tool example with the simplified parameter structure:\n\n\u0060\u0060\u0060yaml\nname: weather-lookup\ndescription: Get weather for a location\n\n# Command execution\nbash: curl -s \u0027wttr.in/${LOCATION}?format=3\u0027\n\n# Simplified parameters\nparameters:\n  LOCATION:\n    type: string\n    description: City or airport code\n    required: true\n\n# Optional settings\ntimeout: 60000\n\u0060\u0060\u0060\n\nThis is much cleaner and aligns better with how parameters would be defined when creating tools via the command line:\n\n\u0060\u0060\u0060\ncycod tool add weather-lookup --description \u0022Get weather for a location\u0022 \\\n  --bash \u0022curl -s \u0027wttr.in/\\${LOCATION}?format=3\u0027\u0022 \\\n  --parameter LOCATION \u0022City or airport code\u0022 --type string --required\n\u0060\u0060\u0060\n\n## Additional Parameter Properties\n\nThe simplified structure also makes it easier to add other parameter properties if needed:\n\n\u0060\u0060\u0060yaml\nparameters:\n  LOCATION:\n    type: string\n    description: City or airport code\n    required: true\n    default: \u0022New York\u0022\n    enum: [\u0022New York\u0022, \u0022London\u0022, \u0022Tokyo\u0022, \u0022Sydney\u0022]\n  FORMAT:\n    type: string\n    description: Output format\n    required: false\n    default: \u00223\u0022\n\u0060\u0060\u0060\n\nThis approach gives us the flexibility to add validation rules and defaults without the extra nesting that makes the schema harder to read and write.\n\n## Internal Implementation Note\n\nWhen implementing this in code, we could still convert to standard JSON Schema format internally for function calling, but keep the user-facing YAML format simpler and more straightforward.\n\nDoes this simplified parameter structure make more sense? It maintains all the functionality while making tool definitions more concise and easier to work with."}
{"role":"user","content":"gotcha. that\u0027s good. ok, now tell me how this schema is \u0027different\u0027 than the test framework one. ask me questions about things to help us have the conversation... maybe tell me stuff, and ask me a few questions to start"}
{"role":"assistant","content":"# Comparing Custom Tools Schema with Test Framework Schema\n\nLet me highlight the key differences between the proposed custom tools schema and the test framework schema, then ask some questions to guide our conversation.\n\n## Key Differences\n\n### 1. Purpose and Structure\n- **Test Framework**: Focused on test cases with validation (\u0060expect-regex\u0060, \u0060not-expect-regex\u0060, etc.)\n- **Custom Tools**: Focused on defining callable functions with parameters and documentation\n\n### 2. Parameter Handling\n- **Test Framework**: Uses matrix expansion with \u0060${{ matrix.VALUE }}\u0060 syntax\n- **Custom Tools**: Uses direct parameter substitution with \u0060${PARAMETER}\u0060 syntax\n\n### 3. Organization\n- **Test Framework**: Supports hierarchical organization (areas, subareas, classes)\n- **Custom Tools**: Each tool defined in a separate file, flat organization\n\n### 4. Validation\n- **Test Framework**: Includes test validation mechanisms (\u0060expect-regex\u0060, etc.)\n- **Custom Tools**: No validation of output (just returns whatever the command produces)\n\n### 5. Parameter Definition\n- **Test Framework**: Parameters defined through matrices, not explicitly documented\n- **Custom Tools**: Explicit parameter definitions with types, descriptions, and required flags\n\n## Questions\n\n1. **Parameter Substitution**: Do you prefer the \u0060${PARAMETER}\u0060 syntax I proposed, or would you rather use the test framework\u0027s \u0060${{ parameters.VALUE }}\u0060 syntax for consistency?\n\n2. **Output Handling**: Should custom tools support any kind of output processing or filtering before returning results to the LLM?\n\n3. **Input Handling**: The test framework supports providing input to commands via stdin. Should we explicitly support this for custom tools as well?\n\n4. **Error Handling**: How should tools handle and report errors? Should they return exit codes or just capture stderr?\n\n5. **Parameter Validation**: Should the system validate parameter types before substitution (e.g., ensure a number parameter is actually a number)?\n\nI\u0027m particularly interested in your thoughts on the parameter substitution syntax, as that\u0027s one of the more visible differences between the two schemas."}
{"role":"user","content":"1. hmm... good question. in cycod other places we also have substitution (search for ReplaceValues, or Interpolat). look into that and then we\u0027ll continue this part of the discussion. 2. good question. there should be other types of \u0027thinggs\u0027 that you can do besides shell scripts in the future (maybe take a look at a related project we\u0027ll crib from in the future, but not now (it\u0027s ok to look at it though), called macaroni. start reading some stuff here: C:\\src\\macaroni\\docs\\macaroni.md). It has multiple kinds of \u0022executors\u0022, and it also has substituion via \u0022resolvers\u0022 ... and each executor can have \u0027output\u0027 that can be used via substitution in the future executor steps... this idea, is simlar to what i want to have happen eventually with \u0027commands/tools\u0027 in cycod ... 3. yes, i believe we hsould allow for this. 4. we should have some control over that, like some sort of ignore failure/exit code things or similar. do we have something like that in the test framework now? would that work here? idk... what you think? 5. no, i don\u0027t think we need that. ... let\u0027s continue on these questions if you have more questions or i gave not enough above... "}
{"role":"assistant","content":"Let me explore the substitution mechanisms in CYCOD and look at the Macaroni project to better understand your vision for custom tools.","tool_calls":[{"id":"toolu_vrtx_01XdAzDyGezGm384dtRyTi7H","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022find . -path \\u0022*/cycod*\\u0022 -name \\u0022*.cs\\u0022 | grep -i \\u0022ReplaceValues\\\\\\\\|Interpolat\\u0022\u0022,\u0022timeoutMs\u0022:5000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01XdAzDyGezGm384dtRyTi7H","content":"./src/cycodt/TestFramework/PropertyInterpolationHelpers.cs"}
{"role":"assistant","content":"Let\u0027s look at the property interpolation helpers:","tool_calls":[{"id":"toolu_vrtx_011sdQVem6SqUCTR8zHv3g3b","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:50,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycodt/TestFramework/PropertyInterpolationHelpers.cs\u0022,\u0022startLine\u0022:0}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_011sdQVem6SqUCTR8zHv3g3b","content":"1: public static class PropertyInterpolationHelpers\r\n2: {\r\n3:     public static string Interpolate(string text, Dictionary\u003Cstring, string\u003E properties, bool escapeJson = false)\r\n4:     {\r\n5:         if (string.IsNullOrEmpty(text)) return text;\r\n6:         if (!text.Contains(\u0022${{\u0022) || !text.Contains(\u0022}}\u0022)) return text;\r\n7: \r\n8:         var index = 0;\r\n9:         var start = text.IndexOf(\u0022${{\u0022, index);\r\n10:         while (start \u003E= 0)\r\n11:         {\r\n12:             var end = text.IndexOf(\u0022}}\u0022, start);\r\n13:             if (end \u003C 0) break;\r\n14: \r\n15:             var key = text.Substring(start \u002B 3, end - start - 3).Trim();\r\n16:             if (properties.ContainsKey(key))\r\n17:             {\r\n18:                 var value = properties[key];\r\n19:                 if (escapeJson) value = EscapeJson(value);\r\n20:                 text = text.Substring(0, start) \u002B value \u002B text.Substring(end \u002B 2);\r\n21:             }\r\n22:             else if (key.StartsWith(\u0022matrix.\u0022))\r\n23:             {\r\n24:                 key = key.Substring(7);\r\n25:                 if (properties.ContainsKey(key))\r\n26:                 {\r\n27:                     var value = properties[key];\r\n28:                     if (escapeJson) value = EscapeJson(value);\r\n29:                     text = text.Substring(0, start) \u002B value \u002B text.Substring(end \u002B 2);\r\n30:                 }\r\n31:             }\r\n32: \r\n33:             index = start \u002B 1;\r\n34:             start = text.IndexOf(\u0022${{\u0022, index);\r\n35:         }\r\n36: \r\n37:         return text;\r\n38:     }\r\n39: \r\n40:     private static string EscapeJson(string text)\r\n41:     {\r\n42:         var asJsonString = System.Text.Json.JsonSerializer.Serialize(text);\r\n43:         return asJsonString[1..^1];\r\n44:     }\r\n45: }\r\n46: "}
{"role":"assistant","content":"Now let\u0027s check for other value replacement mechanisms in CYCOD:","tool_calls":[{"id":"toolu_vrtx_017fkSjfc96w2ASzMcqAWmML","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022find . -path \\u0022*/cycod*\\u0022 -name \\u0022*.cs\\u0022 | xargs grep -l \\u0022Replace\\u0022 | head -n 10\u0022,\u0022timeoutMs\u0022:5000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_017fkSjfc96w2ASzMcqAWmML","content":"./src/cycod/CommandLineCommands/ChatCommand.cs\n./src/cycod/FunctionCallingTools/StrReplaceEditorHelperFunctions.cs\n./src/cycod/Helpers/ChatMessageHelpers.cs\n./src/cycod/Helpers/CopilotTokenRefreshPolicy.cs\n./src/cycod/Helpers/LogTrafficEventPolicy.cs\n./src/cycod/Helpers/LogTrafficHttpMessageHandler.cs\n./src/cycod/Helpers/TrajectoryFormatter.cs\n./src/cycod/McpHelpers/McpClientManager.cs\n./src/cycodmd/AiInstructionProcessor.cs\n./src/cycodmd/Program.cs"}
{"role":"assistant","content":"Let\u0027s look at how template substitution is done in the ChatCommand:","tool_calls":[{"id":"toolu_vrtx_01MYEF5ohBJCMPW1V9Sq9iR3","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022grep -A 20 -B 20 \\u0022Replace\\u0022 ./src/cycod/CommandLineCommands/ChatCommand.cs | head -n 40\u0022,\u0022timeoutMs\u0022:5000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01MYEF5ohBJCMPW1V9Sq9iR3","content":"        return clone;\n    }\n\n    public override async Task\u003Cobject\u003E ExecuteAsync(bool interactive)\n    {\n        // Setup the named values\n        _namedValues = new TemplateVariables(Variables);\n        \n        // Initialize slash command handlers\n        _cycoDmdCommandHandler = new SlashCycoDmdCommandHandler(this);\n\n        // Transfer known settings to the command\n        var maxOutputTokens = ConfigStore.Instance.GetFromAnyScope(KnownSettings.AppMaxOutputTokens).AsInt(defaultValue: 0);\n        if (maxOutputTokens \u003E 0) MaxOutputTokens = maxOutputTokens;\n\n        MaxPromptTokenTarget = ConfigStore.Instance.GetFromAnyScope(KnownSettings.AppMaxPromptTokens).AsInt(DefaultMaxPromptTokenTarget);\n        MaxToolTokenTarget = ConfigStore.Instance.GetFromAnyScope(KnownSettings.AppMaxToolTokens).AsInt(DefaultMaxToolTokenTarget);\n        MaxChatTokenTarget = ConfigStore.Instance.GetFromAnyScope(KnownSettings.AppMaxChatTokens).AsInt(DefaultMaxChatTokenTarget);\n\n        // Ground the filenames (in case they\u0027re templatized, or auto-save is enabled).\n        InputChatHistory = ChatHistoryFileHelpers.GroundInputChatHistoryFileName(InputChatHistory, LoadMostRecentChatHistory)?.ReplaceValues(_namedValues);\n        AutoSaveOutputChatHistory = ChatHistoryFileHelpers.GroundAutoSaveChatHistoryFileName()?.ReplaceValues(_namedValues);\n        AutoSaveOutputTrajectory = ChatHistoryFileHelpers.GroundAutoSaveTrajectoryFileName()?.ReplaceValues(_namedValues);\n        OutputChatHistory = OutputChatHistory != null ? FileHelpers.GetFileNameFromTemplate(OutputChatHistory, OutputChatHistory)?.ReplaceValues(_namedValues) : null;\n        OutputTrajectory = OutputTrajectory != null ? FileHelpers.GetFileNameFromTemplate(OutputTrajectory, OutputTrajectory)?.ReplaceValues(_namedValues) : null;\n        \n        // Initialize trajectory files\n        _trajectoryFile = new TrajectoryFile(OutputTrajectory);\n        _autoSaveTrajectoryFile = new TrajectoryFile(AutoSaveOutputTrajectory);\n\n        // Ground the system prompt, added user messages, and InputInstructions.\n        SystemPrompt = GroundSystemPrompt();\n        UserPromptAdds = GroundUserPromptAdds();\n        InputInstructions = GroundInputInstructions();\n\n        // Create the function factory and add functions.\n        var factory = new McpFunctionFactory();\n        factory.AddFunctions(new DateAndTimeHelperFunctions());\n        factory.AddFunctions(new ShellCommandToolHelperFunctions());\n        factory.AddFunctions(new BackgroundProcessHelperFunctions());"}
{"role":"assistant","content":"Now let\u0027s look at the ReplaceValues extension method:","tool_calls":[{"id":"toolu_vrtx_01GbxoM73MF3thia6eJirF21","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022find . -path \\u0022*/cycod*\\u0022 -name \\u0022*.cs\\u0022 | xargs grep -l \\u0022ReplaceValues\\u0022 | head -n 10\u0022,\u0022timeoutMs\u0022:5000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01GbxoM73MF3thia6eJirF21","content":"./src/cycod/CommandLineCommands/ChatCommand.cs"}
{"role":"assistant","content":"Let\u0027s look at the TemplateVariables class:","tool_calls":[{"id":"toolu_vrtx_01QeRqKBN46eNb9jsoZDLuwt","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022find . -path \\u0022*/cycod*\\u0022 -name \\u0022*.cs\\u0022 | grep -l \\u0022TemplateVariables\\u0022\u0022,\u0022timeoutMs\u0022:5000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01QeRqKBN46eNb9jsoZDLuwt","content":"(standard input)"}
{"role":"assistant","content":"Let\u0027s try another approach:","tool_calls":[{"id":"toolu_vrtx_01AjhFP8PrZkx7Z12RrH4UTa","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022find . -path \\u0022*/cycod*\\u0022 -name \\u0022*.cs\\u0022 | xargs grep -l \\u0022template\\u0022 | head -n 10\u0022,\u0022timeoutMs\u0022:5000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01AjhFP8PrZkx7Z12RrH4UTa","content":"./src/cycod/CommandLine/CycoDevCommandLineOptions.cs\n./src/cycod/CommandLineCommands/ChatCommand.cs\n./src/cycod/FunctionCallingTools/CycoDmdCliWrapper.cs\n./src/cycodmd/AiInstructionProcessor.cs\n./tests/cycod/Helpers/FileHelpersTests.cs\n./tests/cycod/Helpers/MarkdownHelpersTests.cs\n./tests/cycod/Templates/TemplateHelpersTests.cs"}
{"role":"assistant","content":"Let\u0027s look at the template tests:","tool_calls":[{"id":"toolu_vrtx_01EzettWTPRpmskYCmBZhXG5","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:50,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./tests/cycod/Templates/TemplateHelpersTests.cs\u0022,\u0022startLine\u0022:0}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01EzettWTPRpmskYCmBZhXG5","content":"1: \r\n2: using Microsoft.VisualStudio.TestTools.UnitTesting;\r\n3: using System;\r\n4: using System.Text;\r\n5: \r\n6: [TestClass]\r\n7: public class TemplateHelpersTests\r\n8: {\r\n9:     private TemplateVariables? _variables;\r\n10: \r\n11:     [TestInitialize]\r\n12:     public void Setup()\r\n13:     {\r\n14:         _variables = new TemplateVariables();\r\n15:         _variables!.Set(\u0022name\u0022, \u0022John\u0022);\r\n16:         _variables!.Set(\u0022age\u0022, \u002230\u0022);\r\n17:     }\r\n18: \r\n19:     #region Basic Template Processing Tests\r\n20: \r\n21:     [TestMethod]\r\n22:     public void ProcessTemplate_SimpleVariableSubstitution_ReplacesVariables()\r\n23:     {\r\n24:         // Arrange\r\n25:         var template = \u0022Hello, {name}! You are {age} years old.\u0022;\r\n26:         \r\n27:         // Act\r\n28:         var result = TemplateHelpers.ProcessTemplate(template, _variables!);\r\n29:         \r\n30:         // Assert\r\n31:         Assert.AreEqual(\u0022Hello, John! You are 30 years old.\u0022, result);\r\n32:     }\r\n33: \r\n34:     [TestMethod]\r\n35:     public void ProcessTemplate_VariableNotFound_LeavesPlaceholder()\r\n36:     {\r\n37:         // Arrange\r\n38:         var template = \u0022Hello, {name}! Your email is {email}.\u0022;\r\n39:         \r\n40:         // Act\r\n41:         var result = TemplateHelpers.ProcessTemplate(template, _variables!);\r\n42:         \r\n43:         // Assert\r\n44:         Assert.AreEqual(\u0022Hello, John! Your email is {email}.\u0022, result);\r\n45:     }\r\n46: \r\n47:     [TestMethod]\r\n48:     public void ProcessTemplate_MultipleOccurrencesOfVariable_ReplacesAll()\r\n49:     {\r\n50:         // Arrange"}
{"role":"assistant","content":"Now let\u0027s look at the TemplateHelpers class:","tool_calls":[{"id":"toolu_vrtx_01UfgBVZYVSdcoXk9yuTtZMT","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022find . -path \\u0022*/cycod*\\u0022 -name \\u0022*.cs\\u0022 | grep -l \\u0022TemplateHelpers\\u0022\u0022,\u0022timeoutMs\u0022:5000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01UfgBVZYVSdcoXk9yuTtZMT","content":"(standard input)"}
{"role":"assistant","content":"Let\u0027s look at the \u0060ReplaceValues\u0060 extension method:","tool_calls":[{"id":"toolu_vrtx_01MLCEzXudPu9emnFui9rnoa","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022find . -path \\u0022*/cycod*\\u0022 -name \\u0022*.cs\\u0022 | xargs grep -A 10 -B 10 \\u0022ReplaceValues\\u0022 | head -n 20\u0022,\u0022timeoutMs\u0022:5000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01MLCEzXudPu9emnFui9rnoa","content":"./src/cycod/CommandLineCommands/ChatCommand.cs-\n./src/cycod/CommandLineCommands/ChatCommand.cs-        // Transfer known settings to the command\n./src/cycod/CommandLineCommands/ChatCommand.cs-        var maxOutputTokens = ConfigStore.Instance.GetFromAnyScope(KnownSettings.AppMaxOutputTokens).AsInt(defaultValue: 0);\n./src/cycod/CommandLineCommands/ChatCommand.cs-        if (maxOutputTokens \u003E 0) MaxOutputTokens = maxOutputTokens;\n./src/cycod/CommandLineCommands/ChatCommand.cs-\n./src/cycod/CommandLineCommands/ChatCommand.cs-        MaxPromptTokenTarget = ConfigStore.Instance.GetFromAnyScope(KnownSettings.AppMaxPromptTokens).AsInt(DefaultMaxPromptTokenTarget);\n./src/cycod/CommandLineCommands/ChatCommand.cs-        MaxToolTokenTarget = ConfigStore.Instance.GetFromAnyScope(KnownSettings.AppMaxToolTokens).AsInt(DefaultMaxToolTokenTarget);\n./src/cycod/CommandLineCommands/ChatCommand.cs-        MaxChatTokenTarget = ConfigStore.Instance.GetFromAnyScope(KnownSettings.AppMaxChatTokens).AsInt(DefaultMaxChatTokenTarget);\n./src/cycod/CommandLineCommands/ChatCommand.cs-\n./src/cycod/CommandLineCommands/ChatCommand.cs-        // Ground the filenames (in case they\u0027re templatized, or auto-save is enabled).\n./src/cycod/CommandLineCommands/ChatCommand.cs:        InputChatHistory = ChatHistoryFileHelpers.GroundInputChatHistoryFileName(InputChatHistory, LoadMostRecentChatHistory)?.ReplaceValues(_namedValues);\n./src/cycod/CommandLineCommands/ChatCommand.cs:        AutoSaveOutputChatHistory = ChatHistoryFileHelpers.GroundAutoSaveChatHistoryFileName()?.ReplaceValues(_namedValues);\n./src/cycod/CommandLineCommands/ChatCommand.cs:        AutoSaveOutputTrajectory = ChatHistoryFileHelpers.GroundAutoSaveTrajectoryFileName()?.ReplaceValues(_namedValues);\n./src/cycod/CommandLineCommands/ChatCommand.cs:        OutputChatHistory = OutputChatHistory != null ? FileHelpers.GetFileNameFromTemplate(OutputChatHistory, OutputChatHistory)?.ReplaceValues(_namedValues) : null;\n./src/cycod/CommandLineCommands/ChatCommand.cs:        OutputTrajectory = OutputTrajectory != null ? FileHelpers.GetFileNameFromTemplate(OutputTrajectory, OutputTrajectory)?.ReplaceValues(_namedValues) : null;\n./src/cycod/CommandLineCommands/ChatCommand.cs-        \n./src/cycod/CommandLineCommands/ChatCommand.cs-        // Initialize trajectory files\n./src/cycod/CommandLineCommands/ChatCommand.cs-        _trajectoryFile = new TrajectoryFile(OutputTrajectory);\n./src/cycod/CommandLineCommands/ChatCommand.cs-        _autoSaveTrajectoryFile = new TrajectoryFile(AutoSaveOutputTrajectory);\n./src/cycod/CommandLineCommands/ChatCommand.cs-"}
{"role":"assistant","content":"Now let\u0027s look at the Macaroni documentation to understand that approach:","tool_calls":[{"id":"toolu_vrtx_01G9cpF6hMvy3eNgxWukqaNQ","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022cat C:/src/macaroni/docs/macaroni.md | head -n 50\u0022,\u0022timeoutMs\u0022:5000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01G9cpF6hMvy3eNgxWukqaNQ","content":"# **macaro**ni\n... to make **macaro**s (aka macros) ...\n\n## _What is a **macro**?_\nA *macro* is an \u0022action\u0022 or set of \u0022actions\u0022 that you can use to perform repetitive, time consuming, difficult, or hard to access tasks.\n\n## _What is **macaro**ni?_\n\n*Macaro*ni is a high performance, user friendly *macro system*, designed to be used on PCs, Phones, and IoT devices.\n*Macaro*ni integrates w/ and utilizes open ai, carbon speech sdk, carbon vision sdk, as well as other Azure Cognitive Services.\n*Macaro*ni is a modern dotnet 6.0 open source application, written in C# 10.0, for _Hackathon 2022_.\n\n![macaroni image](blockly.png)\n\n## _What is a **command**?_\nA \u0060command\u0060 is *macaro*ni\u0027s representation of a macro, using three key concepts: \u0060condition\u0060s, \u0060trigger\u0060s, and \u0060executor\u0060s.\n\nWhen a command\u0027s \u0060condition\u0060 is \u0060true\u0060, the \u0060command\u0060 is enabled, and thus \u0060trigger\u0060able.\nWhen a command\u0027s \u0060trigger\u0060 is activated, the \u0060command\u0060 \u0060execute\u0060s it\u0027s list of \u0060executor\u0060s, one by one.\n\n## _What is a **command set**?_\n\nA \u0060command set\u0060 is a collection of one or more \u0060command\u0060s and related data.\nA \u0060command set\u0060 is persisted or transfered as YAML, discovered in local storage, or downloaded from websites.\nA \u0060command set\u0060 is typically authored w/ a custom UI or w/ a text editor in YAML, optimized for human authoring and readability.\n\nExample \u0060command set\u0060, w/ 1 \u0060command\u0060, using \u0060phrase\u0060 and \u0060hotkey\u0060 triggers, and using \u0060sendKeys\u0060, \u0060speak\u0060, \u0060analyze\u0060, and \u0060clipboard\u0060 executors:\n\u0060\u0060\u0060yaml\nkeyword: copilot\ncommands:\n\n- name: demo\n\n  triggers:\n  - phrase: smart snippet\n  - hotkey: {ctrl-shift-win-s}\n\n  execute:\n  - speak: select area on screen\n  - clipboard: # clear the clipboard\n  - sendKeys: {shift-win-s} # invoke snippet\n  - wait:\n      clipboard:\n        format: image\n  - analyze: {clipboard.image}\n  - clipboard:\n      set: {analyze.text}\n\u0060\u0060\u0060\n\n\u0026nbsp;"}
{"role":"assistant","content":"Calling function(s)...","tool_calls":[{"id":"toolu_vrtx_014fzueYPaUptXsp3VNgQds3","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022cat C:/src/macaroni/docs/macaroni.md | grep -A 20 \\u0022substitution\\\\|resolver\\u0022\u0022,\u0022timeoutMs\u0022:5000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_014fzueYPaUptXsp3VNgQds3","content":"[\u0060json\u0060](actions/json.executor.md)                | Parses a json string, making typical json expressions available via resolvers         | \u2705\n[\u0060log\u0060](actions/log.executor.md)                  | Logs a string to the application log (for diagnostics)                                | \u2705\n\n|  |  |  |\n|--|--|--|\n[\u0060insert\u0060](actions/insert.executor.md)            | Inserts text into the application in focus                              | \u2705\n[\u0060sendKeys\u0060](actions/sendKeys.executor.md)        | Sends keystrokes to the application in focus                            | \u2705\n[\u0060mouse\u0060](actions/mouse.executor.md)              | Simulates mouse movement, right/left/middle clicking, \u002Bscroll wheel     | \u26A0\uFE0F\n\n|  |  |  |\n|--|--|--|\n[\u0060emulate\u0060](actions/emulate.executor.md)          | Emulates a \u0060phrase\u0060 is if the user spoke it                                           | \u2705\n[\u0060listen\u0060](actions/listen.executor.md)            | Controls if speech is \u0022listening\u0022, \u0022not listening\u0022 or \u0022listening for keyword\u0022         | \u2705\n[\u0060play\u0060](actions/play.executor.md)                | Plays a \u0060beep\u0060 or short sound clip from a \u0060file\u0060                                      | \u2705\n\n|  |  |  |\n|--|--|--|\n[\u0060alert\u0060](actions/alert.executor.md)              | Display message box with \u0060text\u0060 (default) and optional \u0060title\u0060 and \u0060image\u0060            | \u2705\n[\u0060confirm\u0060](actions/confirm.executor.md)          | Displays yes/no message with \u0060text\u0060 (default) and optional \u0060title\u0060 and \u0060image\u0060        | \u2705\n[\u0060display\u0060](actions/display.executor.md)          | Displays text in a transient way (text feedback)                                      | \u2705\n[\u0060pick\u0060](actions/pick.executor.md)                | Displays a selection experience, allowing user to pick from list of items             | \u2705"}
{"role":"assistant","content":"Calling function(s)...","tool_calls":[{"id":"toolu_vrtx_01PrYKGqC6QYwx24net1xoEx","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022grep -r \\u0022substitution\\u0022 C:/src/macaroni/docs/\u0022,\u0022timeoutMs\u0022:5000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01PrYKGqC6QYwx24net1xoEx","content":"\r\n\u003Cexited with exit code 1\u003E"}
{"role":"assistant","content":"Let\u0027s look for \u0027resolve\u0027 patterns in Macaroni:","tool_calls":[{"id":"toolu_vrtx_01PDq7ywK3HAZMxTJqFTxQZs","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022grep -r \\u0022resolve\\u0022 C:/src/macaroni/docs/ | head -n 20\u0022,\u0022timeoutMs\u0022:5000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01PDq7ywK3HAZMxTJqFTxQZs","content":"C:/src/macaroni/docs/actions/json.executor.md:The \u0060json\u0060 executor parses a json string, making typical json expressions available via resolvers\nC:/src/macaroni/docs/actions/mouse.executor.md:- relative positions can either be specified in (x,y) form, or can use resolvers, such as:\nC:/src/macaroni/docs/actions/pick.executor.md:**Status**: \u2705 IMPLEMENTED (note: \u0060pick.index\u0060 resolver is not yet implemented)  \nC:/src/macaroni/docs/macaroni.md:[\u0060json\u0060](actions/json.executor.md)                | Parses a json string, making typical json expressions available via resolvers         | \u2705\nC:/src/macaroni/docs/macaroni.pptx companion document.md:resolvers \u002B variables\u200B\nC:/src/macaroni/docs/macaroni.pptx companion document.md:Introducing the concept of resolvers; resolvers are snippets that will be replaced by something else during the action execution\nC:/src/macaroni/docs/macaroni.pptx companion document.md:In this example, we show the use of the \u0060{clipboard.text}\u0060 resolver used with both the \u0060display\u0060 and the \u0060alert\u0060 actions.\nC:/src/macaroni/docs/macaroni.pptx companion document.md:This slide and the next demonstrate the use of a variable resolver; variables can be declared as simple strings.\nC:/src/macaroni/docs/macaroni.pptx companion document.md:item with the \u0060{contact.value}\u0060 resolver.\nC:/src/macaroni/docs/macaroni.pptx companion document.md:phrase triggers, and then in the action it uses that same string syntax to resolve what the user actually said to populate the subject\nC:/src/macaroni/docs/macaroni.pptx companion document.md:uses the \u0060{clipboard.text}\u0060 resolver to search the web using google for whatever is currently on the clipboard. \nC:/src/macaroni/docs/macaroni.pptx companion document.md:Specifically, it uses the \u0060prompt\u0060 action to ask display a dialog for the user to edit a template piece of text, which is itself a macro in YAML format. Once the user finishes with the prompt, the macro uses the \u0060clipboard\u0060 action to store what was entered into the prompt dialog box using the clipboard\u0027s resolver: \u0060{clipboard.text}\u0060.\nC:/src/macaroni/docs/macaroni.pptx companion document.md:Then, it uses the \u0060file\u0060 action to write a file with the name specified in the second prompt using that same \u0060{prompt.text}\u0060 resolver as the \u0060name\u0060 attribute and the content of the first prompt which was saved on the clipboard as the \u0060write\u0060 attribute. \nC:/src/macaroni/docs/macaroni.pptx companion document.md:on the selected file, using the \u0060{pick.text.value}\u0060 resolver. The \u0060.value\u0060 suffix indicates to use the semantic value instead of the display name for the file. \nC:/src/macaroni/docs/macaroni.pptx companion document.md:Specifically, it creates a list variable called \u0060macros\u0060 for the files stored in the \u0022My Documents \\ macros\u0022 folder, by using another a folder resolver\nC:/src/macaroni/docs/macaroni.pptx companion document.md:by using \u0060{folders.MyDocuments}\u0060 as the resolver. \nC:/src/macaroni/docs/training/docs.md:| \uD83D\uDD17 [hello-app-resolvers](hello-app-resolvers.md) | Shows how commands can obtain information at runtime from the application \u003Cbr/\u003E - \u0060ConfigureResolvers\u0060/\u0060AddResolver\u0060 to add dynamic resolution of named \u0060state\u0060 to value\nC:/src/macaroni/docs/training/hello-app-resolvers.md:# hello world application, with resolvers\nC:/src/macaroni/docs/training/hello-app-resolvers.md:            .ConfigureResolvers(resolvers =\u003E resolvers\nC:/src/macaroni/docs/training/hello-app-resolvers.md:.ConfigureResolvers(resolvers =\u003E resolvers"}
{"role":"assistant","content":"Let\u0027s look at one of the Macaroni resolver examples:","tool_calls":[{"id":"toolu_vrtx_01MyB54mg9T2a2gpPZvLCqN1","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:50,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022C:/src/macaroni/docs/training/hello-app-resolvers.md\u0022,\u0022startLine\u0022:0}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01MyB54mg9T2a2gpPZvLCqN1","content":"1: # hello world application, with resolvers\r\n2: \r\n3: \u0060\u0060\u0060yaml\r\n4: - triggers:\r\n5:   - phrase: How fast am i going\r\n6:   execute:\r\n7:   - speak: You are going {/vehicle/speed/current} miles per hour\r\n8: \u0060\u0060\u0060\r\n9: \r\n10: ## C#\r\n11: \r\n12: \u0060\u0060\u0060C#\r\n13:     public static void InitAndRunCommandSystem(string path, IDictionary\u003Cstring, string\u003E secretMap, WaitHandle[] waitHandles)\r\n14:     {\r\n15:         var builder = CommandSystem.CreateBuilder()\r\n16:             .ConfigureSources(sources =\u003E {\r\n17:                 sources.UseDefaultFolderMonitor(false);\r\n18:                 sources.AddFolder(path);\r\n19:             })\r\n20:             .ConfigureSecrets(secrets =\u003E {\r\n21:                 secretMap.ForEach(secret =\u003E secrets.AddSecret(secret.Key, secret.Value));\r\n22:             })\r\n23:             .ConfigureResolvers(resolvers =\u003E resolvers\r\n24:                 .AddResolver(\u0022/vehicle/speed/current\u0022, () =\u003E GetCurrentSpeed())\r\n25:             )\r\n26:         );\r\n27: \r\n28:         var commandSystem = builder.Build();\r\n29:         var running = Task.Run(() =\u003E commandSystem.Run());\r\n30: \r\n31:         WaitHandle.WaitAll(waitHandles); // wait until time to exit\r\n32: \r\n33:         commandSystem.StopAsync();\r\n34:         running.Wait();\r\n35:     }\r\n36: \u0060\u0060\u0060\r\n37: \r\n38: specifically:\r\n39: \r\n40: \u0060\u0060\u0060C#\r\n41: .ConfigureResolvers(resolvers =\u003E resolvers\r\n42:     .AddResolver(\u0022/vehicle/speed/current\u0022, () =\u003E GetCurrentSpeed())\r\n43: )\r\n44: \u0060\u0060\u0060\r\n45: \r\n46: and:\r\n47: \r\n48: \u0060\u0060\u0060yaml\r\n49: - speak: You are going {/vehicle/speed/current} miles per hour\r\n50: \u0060\u0060\u0060"}
{"role":"assistant","content":"Based on my research into CYCOD\u0027s template substitution mechanisms and the Macaroni project, I now have a better understanding of how we should approach parameter substitution for custom tools. Let me continue our discussion with updated insights.\n\n# Updated Custom Tools Proposal with Substitution Insights\n\n## Parameter Substitution Options\n\nI found several substitution mechanisms in the codebase:\n\n1. **CYCOD Template System**:\n   - Uses curly braces: \u0060{name}\u0060 for simple variable substitution\n\n2. **Test Framework Interpolation**:\n   - Uses \u0060${{ matrix.VALUE }}\u0060 syntax for matrix value substitution\n\n3. **Macaroni Resolvers**:\n   - Uses curly braces: \u0060{/vehicle/speed/current}\u0060 to resolve dynamic values\n\nThese different approaches have their own advantages:\n- Simple \u0060{name}\u0060 is clean and easy to read\n- \u0060${{ parameters.NAME }}\u0060 is explicit about the source of values\n- Resolver-style allows for dynamic computed values\n\n## Addressing Your Questions\n\n### 1. Parameter Substitution Syntax\n\nBased on my research, we have a few options:\n\n- **Simple Approach**: \u0060{PARAMETER}\u0060 (like CYCOD templates)\n- **Test Framework Style**: \u0060${{ parameters.PARAMETER }}\u0060 (like matrix substitution)\n- **Hybrid Approach**: Support both formats for flexibility\n\nI recommend the simple \u0060{PARAMETER}\u0060 format for custom tools to maintain consistency with CYCOD\u0027s existing template system, while being easier to read and write.\n\n### 2. Output Handling in Custom Tools\n\nLooking at Macaroni\u0027s approach with executors and resolvers, I see the value in having tools that can both:\n- Execute commands\n- Make their output available for substitution in future commands\n\nThis would enable chaining tools together, where one tool\u0027s output becomes another tool\u0027s input. For this to work, we\u0027d need:\n\n1. A way to capture output\n2. A naming mechanism (like \u0060{tool_name.output}\u0060) to reference that output\n\n### 3. Input Handling\n\nYes, supporting stdin would be valuable. We could include an optional \u0060input\u0060 field in the tool definition:\n\n\u0060\u0060\u0060yaml\nname: format-json\ndescription: Format JSON for readability\nbash: python -m json.tool\ninput: ${JSON_DATA}  # Data to pass to stdin\nparameters:\n  JSON_DATA:\n    type: string\n    description: JSON data to format\n    required: true\n\u0060\u0060\u0060\n\n### 4. Error Handling\n\nLooking at the test framework, it has several error-handling mechanisms:\n\n- \u0060expect-exit-code\u0060: Specifies the expected exit code\n- \u0060skipOnFailure\u0060: Whether to skip a test when it fails\n\nFor custom tools, we could include similar options:\n\n\u0060\u0060\u0060yaml\nname: risky-tool\ndescription: A tool that might fail\nbash: some-command-that-might-fail\nignore-errors: true  # Continue even if command fails\nexpect-exit-code: 0  # Explicitly expect success\n\u0060\u0060\u0060\n\n### 5. Parameter Validation\n\nI agree that we don\u0027t need strict type validation before substitution. The shell will handle any type conversion issues, and adding validation would make the system more complex without much benefit.\n\n## Revised Tool Schema Example\n\nBased on these insights, here\u0027s a revised custom tool schema example:\n\n\u0060\u0060\u0060yaml\nname: weather-lookup\ndescription: Get weather for a location\n\n# Command execution with simple parameter substitution\nbash: curl -s \u0027wttr.in/{LOCATION}?format=3\u0027\n\n# Parameters definition\nparameters:\n  LOCATION:\n    type: string\n    description: City or airport code\n    required: true\n\n# Optional settings\ntimeout: 60000\nworking-directory: ~/weather-scripts\nignore-errors: false\nexpect-exit-code: 0\ninput: null  # No stdin input\n\u0060\u0060\u0060\n\n## Additional Questions\n\n1. **Tool Output Capturing**: Should we support capturing command output for use in other tools, similar to Macaroni\u0027s resolver approach?\n\n2. **Tool Chaining**: Would you like to support running multiple tools in sequence, where the output of one tool can be used as input to another?\n\n3. **Default Values**: Should parameters support default values? For example:\n   \u0060\u0060\u0060yaml\n   parameters:\n     FORMAT:\n       type: string\n       description: Output format\n       required: false\n       default: \u00223\u0022\n   \u0060\u0060\u0060\n\n4. **Environment Scoping**: Should tools be able to specify which environments they work in (Windows, macOS, Linux)?\n\n5. **Tool Categories**: Would you like tools to have categories or tags for organization and filtering?\n\nWhat are your thoughts on these updated proposals and additional questions?"}
{"role":"user","content":"not sure we need expect-exit-code ... 1. yes, we should allow that. 2. yes, i guess a \u0027tool\u0027 can have \u0027steps\u0027 (smilar to executors in macaroni)... i guess many tools will only have one step, but others might have multilpe steps. 2. yes. like macaroni w/ resolvers ... 3. yes. defaults are imperative. 4. we do that in test framework, right? if so, yes. if not, maybe still yes... what you think? i guess similar is the idea of tags... we\u0027ll want to discuss tags more in a bit... isn\u0027t there a thing in test framework where some stuff is excluded by default via tag or similar and it can be re-included? i don\u0027t recall, but you probably know or can find out. 5. kind of, and i was consideringg using tags for that... cause on \u0027approval\u0027 of stuff, users can currently use/approve automatically read only things (read) or write things (write) or everything and/or runnable things (*, run) and maybe in future mcps... i\u0027d expect that there\u0027s similar here... where things coudl be tagged as read-only, read-write, read-write-run, or custom names... so you could approve by name, or one of those categories, or any kind of custom category you\u0027d want. make sense? more questions? "}
{"role":"assistant","content":"Thanks for your feedback! Let me address your points and expand on the tool design with this new information.","tool_calls":[{"id":"toolu_vrtx_019PPMkGQpkaCZbiKzqkrr3S","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022grep -r \\u0022tag\\u0022 ./src/cycodt/TestFramework/ | head -n 20\u0022,\u0022timeoutMs\u0022:5000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_019PPMkGQpkaCZbiKzqkrr3S","content":"./src/cycodt/TestFramework/README.md:- \u0060tag\u0060/\u0060tags\u0060 (optional): A list of tags to associate with the test case.\n./src/cycodt/TestFramework/README.md:## \u0060tag\u0060/\u0060tags\u0060\n./src/cycodt/TestFramework/README.md:When present, specifies a list of tags to associate with the test case.\n./src/cycodt/TestFramework/README.md:Tags accumulate from parent to child, so if a tag is specified in a parent, it will be inherited by all children.\n./src/cycodt/TestFramework/README.md:tag: skip\n./src/cycodt/TestFramework/README.md:tags:\n./src/cycodt/TestFramework/README.md:tags: [echo]\n./src/cycodt/TestFramework/README.md:  tags: [hello]\n./src/cycodt/TestFramework/README.md:  tags: [bye]\n./src/cycodt/TestFramework/YamlTagHelpers.cs:        Logger.Log($\u0022Loading default tags from {defaultsFile}\u0022);\n./src/cycodt/TestFramework/YamlTagHelpers.cs:            var tagsNode = parsed.Documents[0].RootNode;\n./src/cycodt/TestFramework/YamlTagHelpers.cs:            if (tagsNode != null)\n./src/cycodt/TestFramework/YamlTagHelpers.cs:                defaultTags = UpdateCopyTags(defaultTags, null, tagsNode);\n./src/cycodt/TestFramework/YamlTagHelpers.cs:    public static Dictionary\u003Cstring, List\u003Cstring\u003E\u003E UpdateCopyTags(Dictionary\u003Cstring, List\u003Cstring\u003E\u003E tags, YamlMappingNode mapping)\n./src/cycodt/TestFramework/YamlTagHelpers.cs:        var tagNode = mapping.Children.ContainsKey(\u0022tag\u0022) ? mapping.Children[\u0022tag\u0022] : null;\n./src/cycodt/TestFramework/YamlTagHelpers.cs:        var tagsNode = mapping.Children.ContainsKey(\u0022tags\u0022) ? mapping.Children[\u0022tags\u0022] : null;\n./src/cycodt/TestFramework/YamlTagHelpers.cs:        if (tagNode == null \u0026\u0026 tagsNode == null \u0026\u0026 optionalNode == null) return tags;\n./src/cycodt/TestFramework/YamlTagHelpers.cs:        tags = UpdateCopyTags(tags, tagNode, tagsNode);\n./src/cycodt/TestFramework/YamlTagHelpers.cs:        if (updateOptionalTag) tags = AddOptionalTag(tags, optionalNode!);\n./src/cycodt/TestFramework/YamlTagHelpers.cs:        return tags;"}
{"role":"assistant","content":"Let\u0027s check for platform filtering in the test framework:","tool_calls":[{"id":"toolu_vrtx_01PeazeK4MRRzepyhzKxDT1U","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022grep -r \\u0022platform\\\\|windows\\\\|linux\\\\|mac\\u0022 ./src/cycodt/TestFramework/ | head -n 20\u0022,\u0022timeoutMs\u0022:5000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01PeazeK4MRRzepyhzKxDT1U","content":"./src/cycodt/TestFramework/TrxXmlTestReporter.cs:        var machineName = Environment.MachineName;\n./src/cycodt/TestFramework/TrxXmlTestReporter.cs:        var userAtMachine = userName.Split(\u0027\\\\\u0027, \u0027/\u0027).Last() \u002B \u0022@\u0022 \u002B machineName;\n./src/cycodt/TestFramework/TrxXmlTestReporter.cs:            writer.WriteAttributeString(\u0022computerName\u0022, machineName);"}
{"role":"assistant","content":"Let me check if test filtering by tag is implemented in the command line options:","tool_calls":[{"id":"toolu_vrtx_01WuBHWYB5zrxZz4uFShRMFQ","function":{"name":"RunBashCommand","arguments":"{\u0022command\u0022:\u0022grep -r \\u0022filter\\u0022 ./src/cycodt/CommandLine* | head -n 20\u0022,\u0022timeoutMs\u0022:5000}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01WuBHWYB5zrxZz4uFShRMFQ","content":"./src/cycodt/CommandLineCommands/TestCommands/TestBaseCommand.cs:        var filters = GetTestFilters();\n./src/cycodt/CommandLineCommands/TestCommands/TestBaseCommand.cs:        var filtered = YamlTestCaseFilter.FilterTestCases(withOrWithoutOptional, filters).ToList();\n./src/cycodt/CommandLineCommands/TestCommands/TestBaseCommand.cs:        return filtered;\n./src/cycodt/CommandLineCommands/TestCommands/TestBaseCommand.cs:        var filters = new List\u003Cstring\u003E();\n./src/cycodt/CommandLineCommands/TestCommands/TestBaseCommand.cs:        filters.AddRange(Tests);\n./src/cycodt/CommandLineCommands/TestCommands/TestBaseCommand.cs:            filters.Add($\u0022\u002B{item}\u0022);\n./src/cycodt/CommandLineCommands/TestCommands/TestBaseCommand.cs:            filters.Add($\u0022-{item}\u0022);\n./src/cycodt/CommandLineCommands/TestCommands/TestBaseCommand.cs:        return filters;"}
{"role":"assistant","content":"Let\u0027s check the test filter implementation:","tool_calls":[{"id":"toolu_vrtx_01VBURnvnKDmPKYAUEKXwm2k","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:50,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycodt/TestFramework/YamlTestCaseFilter.cs\u0022,\u0022startLine\u0022:0}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01VBURnvnKDmPKYAUEKXwm2k","content":"1: using Microsoft.VisualStudio.TestPlatform.ObjectModel;\r\n2: using Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter;\r\n3: \r\n4: public class YamlTestCaseFilter\r\n5: {\r\n6:     public static IEnumerable\u003CTestCase\u003E FilterTestCases(IEnumerable\u003CTestCase\u003E tests, IEnumerable\u003Cstring\u003E criteria)\r\n7:     {\r\n8:         // example 1: \u0022ai init openai\u0022 \u0022ai init speech\u0022 -skip -nightly\r\n9:         // \u003E test must contain either:\r\n10:         // \u003E   * \u0022ai\u0022, \u0022init\u0022, and \u0022openai\u0022 in EXACTLY that order in any one single field/property, or\r\n11:         // \u003E   * \u0022ai\u0022, \u0022init\u0022, and \u0022speech\u0022 in EXACTLY that order in any one single field/property\r\n12:         // \u003E test must not contain \u0022skip\u0022 in any field/property\r\n13:         // \u003E test must not contain \u0022nightly\u0022 in any field/property\r\n14: \r\n15:         // example 2: \u002Bai \u002Binit \u002Bopenai -skip -nightly\r\n16:         // \u003E test must contain ALL three of \u0022ai\u0022, \u0022init\u0022, and \u0022openai\u0022 in any field/property\r\n17:         // \u003E   * they do NOT need to be in the same field/property\r\n18:         // \u003E test must not contain \u0022skip\u0022 in any field/property\r\n19:         // \u003E test must not contain \u0022nightly\u0022 in any field/property\r\n20: \r\n21:         // example 3: \u0022ai dev new\u0022 \u0022ai init speech\u0022 \u002Bjava \u002Bbuild -skip\r\n22:         // \u003E test must contain, either:\r\n23:         // \u003E   * \u0022ai\u0022, \u0022init\u0022, and \u0022openai\u0022 in EXACTLY that order in any one single field/property, or\r\n24:         // \u003E   * \u0022ai\u0022, \u0022init\u0022, and \u0022speech\u0022 in EXACTLY that order in any one single field/property\r\n25:         // \u003E test must contain \u0022java\u0022 in any field/property\r\n26:         // \u003E test must contain \u0022build\u0022 in any field/property\r\n27:         // \u003E test must not contain \u0022skip\u0022 in any field/property\r\n28: \r\n29:         var sourceCriteria = new List\u003Cstring\u003E();\r\n30:         var mustMatchCriteria = new List\u003Cstring\u003E();\r\n31:         var mustNotMatchCriteria = new List\u003Cstring\u003E();\r\n32: \r\n33:         foreach (var criterion in criteria)\r\n34:         {\r\n35:             var isMustMatch = criterion.StartsWith(\u0022\u002B\u0022);\r\n36:             var isMustNotMatch = criterion.StartsWith(\u0022-\u0022);\r\n37:             var isSource = !isMustMatch \u0026\u0026 !isMustNotMatch;\r\n38: \r\n39:             if (isSource) sourceCriteria.Add(criterion);\r\n40:             if (isMustMatch) mustMatchCriteria.Add(criterion.Substring(1));\r\n41:             if (isMustNotMatch) mustNotMatchCriteria.Add(criterion.Substring(1));\r\n42:         }\r\n43: \r\n44:         var unfiltered = sourceCriteria.Count \u003E 0\r\n45:             ? tests.Where(test =\u003E\r\n46:                 sourceCriteria.Any(criterion =\u003E\r\n47:                     TestContainsText(test, criterion)))\r\n48:             : tests;\r\n49: \r\n50:         if (mustMatchCriteria.Count \u003E 0)"}
{"role":"assistant","content":"Calling function(s)...","tool_calls":[{"id":"toolu_vrtx_01K1WFKq5HEVD1gzdihnYEVm","function":{"name":"ViewFile","arguments":"{\u0022endLine\u0022:100,\u0022lineNumbers\u0022:true,\u0022path\u0022:\u0022./src/cycodt/TestFramework/YamlTestCaseFilter.cs\u0022,\u0022startLine\u0022:50}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_01K1WFKq5HEVD1gzdihnYEVm","content":"50:         if (mustMatchCriteria.Count \u003E 0)\r\n51:         {\r\n52:             unfiltered = unfiltered.Where(test =\u003E\r\n53:                 mustMatchCriteria.All(criterion =\u003E\r\n54:                     TestContainsText(test, criterion)));\r\n55:         }\r\n56: \r\n57:         if (mustNotMatchCriteria.Count \u003E 0)\r\n58:         {\r\n59:             unfiltered = unfiltered.Where(test =\u003E\r\n60:                 mustNotMatchCriteria.All(criterion =\u003E\r\n61:                     !TestContainsText(test, criterion)));\r\n62:         }\r\n63: \r\n64:         return unfiltered;\r\n65:     }\r\n66: \r\n67:     public static IEnumerable\u003CTestCase\u003E FilterTestCases(IEnumerable\u003CTestCase\u003E tests, IRunContext runContext)\r\n68:     {\r\n69:         tests = tests.ToList(); // force enumeration\r\n70:         \r\n71:         var names = GetSupportedFilterableNames(tests);\r\n72:         var filter = runContext.GetTestCaseFilter(names, null);\r\n73:         return tests.Where(test =\u003E filter == null || filter.MatchTestCase(test, name =\u003E GetPropertyValue(test, name))).ToList();\r\n74:     }\r\n75: \r\n76:     private static HashSet\u003Cstring\u003E GetSupportedFilterableNames(IEnumerable\u003CTestCase\u003E tests)\r\n77:     {\r\n78:         var filterable = new HashSet\u003Cstring\u003E(supportedFilterProperties);\r\n79:         foreach (var test in tests)\r\n80:         {\r\n81:             foreach (var trait in test.Traits)\r\n82:             {\r\n83:                 filterable.Add(trait.Name);\r\n84:             }\r\n85:         }\r\n86: \r\n87:         if (filterable.Contains(\u0022tag\u0022)) filterable.Add(\u0022tags\u0022);\r\n88: \r\n89:         return filterable;\r\n90:     }\r\n91: \r\n92:     private static object? GetPropertyValue(TestCase test, string name)\r\n93:     {\r\n94:         switch (name.ToLower())\r\n95:         {\r\n96:             case \u0022name\u0022:\r\n97:             case \u0022displayname\u0022: return test.DisplayName;\r\n98: \r\n99:             case \u0022fqn\u0022:\r\n100:             case \u0022fullyqualifiedname\u0022: return test.FullyQualifiedName;"}
{"role":"assistant","content":"Based on my research, I now have a better understanding of how the test framework handles tags and filtering. Let\u0027s update the custom tools proposal.\n\n# Enhanced Custom Tools Proposal\n\nBased on your feedback and my additional research, here\u0027s an enhanced proposal for custom tools in CYCOD:\n\n## Multi-Step Tools with Output Capturing\n\nSimilar to Macaroni\u0027s executors, custom tools can have multiple steps, with output from one step available to subsequent steps:\n\n\u0060\u0060\u0060yaml\nname: github-commit-stats\ndescription: Get statistics for recent commits in a GitHub repository\nsteps:\n  - name: fetch-commits\n    bash: curl -s \u0022https://api.github.com/repos/{OWNER}/{REPO}/commits?per_page=10\u0022\n    # Output stored as {github-commit-stats.fetch-commits.output}\n    \n  - name: count-authors\n    bash: echo \u0027{github-commit-stats.fetch-commits.output}\u0027 | jq \u0027group_by(.commit.author.name) | map({author: .[0].commit.author.name, count: length}) | sort_by(.count) | reverse\u0027\n    # Final output is from this step\n\u0060\u0060\u0060\n\n## Parameter Definition with Defaults\n\nParameters can now have default values:\n\n\u0060\u0060\u0060yaml\nparameters:\n  OWNER:\n    type: string\n    description: Repository owner username\n    required: true\n  REPO:\n    type: string\n    description: Repository name\n    required: true\n  FORMAT:\n    type: string\n    description: Output format (json, text)\n    required: false\n    default: \u0022json\u0022\n\u0060\u0060\u0060\n\n## Platform Targeting and Tags\n\nTools can specify which platforms they work on and include tags for categorization:\n\n\u0060\u0060\u0060yaml\nplatforms: [windows, linux, macos]  # Only include platforms the tool works on\ntags: [github, api, read]  # Tags for categorization and security approval\n\u0060\u0060\u0060\n\nThe \u0060tags\u0060 field is particularly important for security approval, allowing users to auto-approve tools with specific tags:\n\n\u0060\u0060\u0060\ncycod --auto-approve tool:read    # Auto-approve all tools tagged as \u0027read\u0027\ncycod --auto-approve tool:github  # Auto-approve all tools tagged as \u0027github\u0027\n\u0060\u0060\u0060\n\n## Error Handling and Input Support\n\nTools can specify how to handle errors and whether to accept stdin input:\n\n\u0060\u0060\u0060yaml\nignore-errors: false   # Whether to continue even if a step fails\ninput: \u0022{DATA}\u0022        # Data to pass to the command via stdin\n\u0060\u0060\u0060\n\n## Complete Schema Example\n\nHere\u0027s a comprehensive example of the enhanced tool schema:\n\n\u0060\u0060\u0060yaml\nname: weather-lookup\ndescription: Get weather for a location\n\n# Single step tool example\nbash: curl -s \u0027wttr.in/{LOCATION}?format={FORMAT}\u0027\n\n# OR multi-step tool example\n# steps:\n#   - name: fetch-weather\n#     bash: curl -s \u0027wttr.in/{LOCATION}?format={FORMAT}\u0027\n#   - name: format-output\n#     bash: echo \u0027{weather-lookup.fetch-weather.output}\u0027 | grep -v \u0022Follow\u0022\n\n# Parameters with defaults\nparameters:\n  LOCATION:\n    type: string\n    description: City or airport code\n    required: true\n  FORMAT:\n    type: string\n    description: Output format\n    required: false\n    default: \u00223\u0022\n\n# Optional settings\ntimeout: 60000\nworking-directory: ~/weather-scripts\nplatforms: [windows, linux, macos]\ntags: [weather, api, read]\nignore-errors: false\ninput: null  # No stdin input\n\u0060\u0060\u0060\n\n## Command Line Interface for Tool Management\n\n\u0060\u0060\u0060\ncycod tool add NAME [options]\ncycod tool get NAME [--scope]\ncycod tool list [--scope]\ncycod tool remove NAME [--scope]\n\u0060\u0060\u0060\n\nWhere options now include:\n- \u0060--description \u0022DESC\u0022\u0060 - Human-readable description of the tool\n- \u0060--bash \u0022COMMAND\u0022\u0060 or similar shell options - Simple single-step tool\n- \u0060--step NAME \u0022COMMAND\u0022\u0060 - Define a step (can be used multiple times for multi-step tools)\n- \u0060--parameter NAME \u0022DESC\u0022 [--type TYPE] [--required] [--default VALUE]\u0060 - Define a parameter\n- \u0060--platform PLATFORM\u0060 - Specify supported platforms (can be used multiple times)\n- \u0060--tag TAG\u0060 - Add a tag (can be used multiple times)\n- \u0060--timeout MILLISECONDS\u0060 - Default timeout\n- \u0060--working-directory DIR\u0060 - Working directory for command execution\n- \u0060--ignore-errors\u0060 - Whether to continue if a step fails\n- \u0060--input \u0022INPUT\u0022\u0060 - Data to pass via stdin\n- \u0060--scope local|user|global\u0060 - Where to save the tool definition (default: local)\n\n## Additional Considerations\n\n1. **Tool Approval System**\n   - Tools would be subject to the same auto-approve/auto-deny system as other functions\n   - The \u0060tags\u0060 field provides a way to categorize tools for approval\n   - Tools would show up in the function calling interface with their parameters and descriptions\n\n2. **Step Output Reference**\n   - The syntax \u0060{tool-name.step-name.output}\u0060 provides a way to reference output from previous steps\n   - The final tool output is the output of the last step (or the only step for single-step tools)\n\n3. **Default Parameter Values**\n   - Parameters with defaults don\u0027t need to be specified when calling the tool\n   - Default values are substituted when the parameter is not provided\n\n## Questions\n\n1. Does this enhanced proposal address your requirements for multi-step tools with output capturing?\n\n2. Is the tag-based approach for categorization and security approval what you had in mind?\n\n3. Should tools be able to define their own function categories (read, write, run) for security approval, or should that be inferred from the tags?\n\n4. For multi-step tools, should we allow conditional execution of steps (like \u0022only run this step if previous step succeeded\u0022)?"}
{"role":"user","content":"for parameters from cli option, could we support name=value kinda syntax after the --parameter? but also have name and description requierd... if nothting else supplied, intelligent defaults, but you could also have default=5 or you could have required=true, or both, and/or type=stringg, etc... thoughts?  also 1. Loving it! 2. yes! 3. from tags. 4. conditional next steps on failure of prev? i like the idea... don\u0027t we kind of have that with \u0027ignore failure\u0027 ... were you thinking somehting else? "}
{"role":"assistant","content":"You\u0027re right about the parameters CLI options - a more flexible and intuitive approach would be better.\n\n## Enhanced Parameter CLI Options\n\nFor the command line interface, we could support a more flexible syntax for parameters that allows both positional and named arguments:\n\n\u0060\u0060\u0060\ncycod tool add example-tool --description \u0022My example tool\u0022 --bash \u0022command {PARAM1} {PARAM2}\u0022 \\\n  --parameter PARAM1 \u0022First parameter\u0022 name=PARAM1 type=string required=true \\\n  --parameter PARAM2 \u0022Second parameter\u0022 name=PARAM2 type=number default=5\n\u0060\u0060\u0060\n\nThis approach has several advantages:\n1. The parameter name and description are still required positionally (for clarity)\n2. Additional attributes use a name=value syntax (easier to read/write)\n3. Intelligent defaults apply when attributes aren\u0027t specified\n4. Supports all parameter attributes in a natural way\n\nFor the implementation, we\u0027d parse the \u0060--parameter\u0060 option by:\n1. Taking the first token as the parameter name\n2. Taking the second quoted string as the description\n3. Parsing the remaining tokens as name=value pairs\n\nRegarding conditional execution of steps:\n\n## Conditional Steps Beyond Ignore Errors\n\nYou\u0027re right that \u0060ignore-errors\u0060 provides basic conditional behavior, but we could enhance this with more explicit conditions:\n\n\u0060\u0060\u0060yaml\nsteps:\n  - name: step1\n    bash: some-command\n    continue-on-error: true  # Similar to ignore-errors but specific to this step\n  \n  - name: step2\n    bash: another-command\n    run-condition: \u0022{step1.exit-code} == 0\u0022  # Only run if step1 succeeded\n  \n  - name: step3\n    bash: fallback-command\n    run-condition: \u0022{step1.exit-code} != 0\u0022  # Only run if step1 failed\n\u0060\u0060\u0060\n\nThis approach would give tool authors more control over the execution flow based on the success or failure of previous steps. It allows for:\n\n1. **Alternative Paths**: Run different steps depending on success/failure\n2. **Fallback Logic**: Try one approach, fall back to another if it fails\n3. **Cleanup Steps**: Always run certain steps, even after failures\n\n## Updated Tool Schema Example\n\nHere\u0027s an updated example incorporating these enhancements:\n\n\u0060\u0060\u0060yaml\nname: github-repo-clone\ndescription: Clone a GitHub repository with fallback methods\n\nsteps:\n  - name: try-https\n    bash: git clone https://github.com/{OWNER}/{REPO}.git {OUTPUT_DIR}\n    continue-on-error: true\n  \n  - name: try-ssh\n    bash: git clone git@github.com:{OWNER}/{REPO}.git {OUTPUT_DIR}\n    run-condition: \u0022{github-repo-clone.try-https.exit-code} != 0\u0022\n    continue-on-error: true\n  \n  - name: report-status\n    bash: |\n      if [ -d \u0022{OUTPUT_DIR}/.git\u0022 ]; then\n        echo \u0022Successfully cloned {OWNER}/{REPO}\u0022\n      else\n        echo \u0022Failed to clone {OWNER}/{REPO} using both HTTPS and SSH\u0022\n        exit 1\n      fi\n\nparameters:\n  OWNER:\n    type: string\n    description: Repository owner username\n    required: true\n  REPO:\n    type: string\n    description: Repository name\n    required: true\n  OUTPUT_DIR:\n    type: string\n    description: Output directory for the clone\n    default: \u0022{REPO}\u0022\n\ntags: [github, git, clone, write]\nplatforms: [windows, linux, macos]\n\u0060\u0060\u0060\n\n## Updated Command Line Interface\n\nWith these enhancements, the command line interface would look like:\n\n\u0060\u0060\u0060\ncycod tool add NAME --description \u0022DESC\u0022 [options]\n  --bash \u0022COMMAND\u0022                                  # For simple single-step tools\n  --step NAME \u0022COMMAND\u0022 [step-options]              # Define a multi-step tool (multiple allowed)\n    --continue-on-error                             # Continue to next step even if this step fails\n    --run-condition \u0022CONDITION\u0022                     # Condition for when to run this step\n  --parameter NAME \u0022DESC\u0022 [param-options]           # Define a parameter (multiple allowed)\n    name=NAME                                       # Parameter name (redundant, but included for completeness)\n    type=string|number|boolean|array                # Parameter type\n    required=true|false                             # Whether parameter is required\n    default=VALUE                                   # Default value if not provided\n  --platform windows|linux|macos                    # Supported platform (multiple allowed)\n  --tag TAG                                         # Tag for categorization (multiple allowed)\n  --timeout MILLISECONDS                            # Default timeout\n  --working-directory DIR                           # Working directory\n  --input \u0022INPUT\u0022                                   # Data to pass via stdin\n  --scope local|user|global                         # Scope for the tool\n\u0060\u0060\u0060\n\nThis gives a lot of flexibility while keeping the most common options straightforward. Does this approach for the command line interface and conditional steps address your requirements?"}
{"role":"user","content":"ok. i\u0027m liking this... ok, now write this up in a \u0027spec\u0027 that I can share with my co-workers for feedback. If you\u0027re not sure if you should include something, ask, don\u0027t just make up decisions on your own... i guess with that in mind, ask me some questions about what you need to know to likely write the doc i want... i\u0027m happy to keep talking to help you write the right doc for us."}
{"role":"assistant","content":"To create a proper specification document, I\u0027d like to clarify a few key aspects first:\n\n## Questions to Guide the Specification Document\n\n1. **Specification Format**:\n   - What format would you prefer for the specification? (e.g., Markdown, Word doc structure)\n   - Should it include diagrams, examples, or implementation details?\n\n2. **Scope and Timeline**:\n   - Is this feature targeted for a specific release or timeframe?\n   - Should I include implementation phases or prioritization of features?\n\n3. **Integration Points**:\n   - Are there specific existing components in CYCOD that this needs to integrate with, beyond what we\u0027ve discussed?\n   - Any specific performance or security considerations to highlight?\n\n4. **Command Naming**:\n   - We\u0027ve been using \u0022tool\u0022 as the command name (e.g., \u0060cycod tool add\u0060). Is this the final terminology or should we consider alternatives?\n\n5. **Compatibility Concerns**:\n   - Are there any backwards compatibility concerns or existing patterns we need to maintain?\n   - Should we consider migration paths from existing approaches?\n\n6. **Security Model Details**:\n   - How exactly should tools integrate with the existing auto-approve/auto-deny system?\n   - Any specific security rules or restrictions to highlight?\n\n7. **Default Tool Location**:\n   - Where should tools be installed by default? In the \u0060.cycod/tools\u0060 directory?\n   - Any specific file naming conventions to follow?\n\n8. **Target Audience**:\n   - Who is the primary audience for this feature? (e.g., developers, end-users, both)\n   - Should the spec focus more on implementation details or user experience?\n\n9. **Feature Naming**:\n   - Is \u0022Custom Tools\u0022 the final name for this feature, or should we consider alternatives?\n\n10. **Parameter Validation**:\n    - Should the spec include details about parameter validation, or is that an implementation detail?"}
{"role":"user","content":"ggreat questions. 1. markdown, with some structure using #/##/### headers. no implementation details. examples, yes. at least one for all parts. 2. don\u0027t worry about timeline... write this up as a north star, this is what we\u0027ll have. timeline/roadmap stuff will be in a diff doc later. first we have to align on north star. don\u0027t worry about pahses or prioritization. 3. nothing more than we\u0027ve already discussed. 4. i think tool is good, but if you have reservations, or concerns i\u0027m biased, or you are, let\u0027s discuss this more. 5. no back compat worries. green field. let\u0027s build what\u0027s right and best based on what we discussed thus far. 6. don\u0027t worry a ton on this, but some of what you said above makes sense. basics would be, if it\u0027s not tagged with read, write, or run, it\u0027ll be marked as something which is very high in security risk, like run, or maybe something higher. ask more on this if you want... 7. .cycod/tools seems great. naming could be the name of hte tool, and that allows for the \u0027name:\u0027 to not be required inside the file yaml file. if there\u0027s a name and a filename (has to be a filename), we\u0027ll use name from inside the file. 8. developers that are using cycod (the coding agent/helper/co-worker). symmetry with other cycod, cycodt, and cycodmd things is good to consider. don\u0027t worry about implementation details at all... only user experience (and that includes things like yaml schema, file storage location, stuff like that). 9. i like that. custom tools. 10. that\u0027s imlementation details. any more questions?"}
{"role":"assistant","content":"Thanks for the clear guidance! Just a couple more questions:\n\n1. **File Extension**:\n   - Should tool definition files use a specific extension? (e.g., \u0060.yaml\u0060, \u0060.tool.yaml\u0060)\n\n2. **Command Syntax Details**:\n   - For the CLI syntax, are there any CYCOD conventions we should follow for the command arguments?\n   - Any preferences on how to represent repeated arguments like \u0060--step\u0060 or \u0060--parameter\u0060?\n\n3. **Step Output Syntax**:\n   - We discussed \u0060{tool-name.step-name.output}\u0060 for referencing step outputs. Is this syntax acceptable?\n   - Any alternatives or preferences for this syntax?\n\n4. **Security Tags Specifics**:\n   - You mentioned read/write/run tags. Should these be enforced (required), recommended, or optional?\n   - Should there be a validation that at least one of these security tags is present?\n\n5. **Help Text Integration**:\n   - Should the spec mention integration with CYCOD\u0027s help system?\n   - Any specific help text conventions to follow?"}
{"role":"user","content":"1. i like that. 2. \u0060--option-name key1=value key2=value\u0060 is used elsewhere, but i think this might also need placement based stuff for name/description, so you don\u0027t have to type those as keys... what you think? 3. yeah, but maybe don\u0027t worry about the tool name... just step name... 4. recommended/optional, and defaulted to highest level if not present. 5. yes, and you should write the help screens we need for all the cycod tool commands... ok, anythingg else? i think we probably have covered the most of it, yeah? "}
{"role":"assistant","content":"Those clarifications help a lot! I think we have covered most of the important details. Let me create the specification document for custom tools in CYCOD based on our discussions.","tool_calls":[{"id":"toolu_vrtx_012ibvSPeZCzmqYtB8swAnoF","function":{"name":"Think","arguments":"{\u0022thought\u0022:\u0022# Spec Document Structure and Content Plan\\n\\nI\\u0027ll create a comprehensive specification document for CYCOD Custom Tools with the following structure:\\n\\n## 1. Introduction\\n- Purpose and overview of Custom Tools\\n- Key benefits and use cases\\n\\n## 2. Tool Definition\\n- YAML schema details\\n- File location and naming conventions\\n- Single-step vs multi-step tools\\n- Parameter definition\\n- Tags and platform support\\n- Error handling\\n\\n## 3. Command Line Interface\\n- \\u0060cycod tool add\\u0060 command\\n- \\u0060cycod tool get\\u0060 command\\n- \\u0060cycod tool list\\u0060 command\\n- \\u0060cycod tool remove\\u0060 command\\n- Command syntax and parameter format\\n\\n## 4. Parameter Substitution\\n- Syntax for parameter references\\n- Step output references\\n- Default values\\n\\n## 5. Security Model\\n- Integration with auto-approve/auto-deny\\n- Security tags (read/write/run)\\n\\n## 6. Help Text\\n- Draft help text for each command\\n- Examples in help text\\n\\n## 7. Examples\\n- Simple single-step tool example\\n- Multi-step tool with output capturing\\n- Tool with conditional steps\\n- Tool with multiple platforms and tags\\n\\nI\\u0027ll ensure each section has clear examples and follows the guidance:\\n- Focus on user experience, not implementation\\n- Use markdown with proper header structure\\n- Include examples for all features\\n- No timeline or roadmap information\\n- Tool files in .cycod/tools with .yaml extension\\n- Step output reference with {step-name.output}\\n- Security tags as recommended/optional, defaulting to highest risk if missing\\n- Include help text for all commands\u0022}"},"type":"function"}]}
{"role":"tool","tool_call_id":"toolu_vrtx_012ibvSPeZCzmqYtB8swAnoF","content":"Thought logged."}
{"role":"assistant","content":"# CYCOD Custom Tools Specification\n\n## Overview\n\nCustom Tools provide a mechanism for CYCOD users to define, share, and execute shell commands as named tools with parameters. These tools can be used by LLMs through function calling, similar to MCPs but focused on shell command execution.\n\n### Purpose\n\nCustom Tools allow users to:\n1. Wrap frequently used shell commands with a consistent interface\n2. Define parameters with descriptions and default values\n3. Create multi-step tools with conditional execution\n4. Share tools across multiple scopes (local, user, global)\n5. Categorize tools for organization and security\n\n## Tool Definition\n\n### File Format and Location\n\nTool definitions are stored as YAML files in the following locations:\n- Local scope: \u0060./.cycod/tools/\u0060\n- User scope: \u0060~/.cycod/tools/\u0060\n- Global scope: System-wide location (OS-dependent)\n\nTool files use the \u0060.yaml\u0060 extension. The filename determines the tool\u0027s name if not explicitly specified in the YAML content.\n\n### Schema\n\n\u0060\u0060\u0060yaml\n# Basic information\nname: tool-name                    # Optional if matches filename\ndescription: Tool description      # Required\n\n# Execution (one of the following)\nbash: command {PARAM}              # For bash execution\ncmd: command {PARAM}               # For Windows CMD execution\npwsh: command {PARAM}              # For PowerShell execution\nrun: command {PARAM}               # For direct command execution\nscript: |                          # For custom scripts\n  command line 1\n  command line 2\nshell: shell-name                  # Shell to use with script\n\n# OR for multi-step tools\nsteps:\n  - name: step1                    # Step name (required)\n    bash: command {PARAM}          # Command to execute\n    continue-on-error: false       # Whether to continue if this step fails\n    run-condition: \u0022{step2.exit-code} == 0\u0022  # Condition for when to run this step\n  \n  - name: step2\n    bash: command {PARAM}\n\n# Parameters\nparameters:\n  PARAM1:\n    type: string                   # Parameter type (string, number, boolean, array)\n    description: Parameter description  # Required\n    required: true                 # Whether parameter is required\n    default: default value         # Default value if not provided\n  \n  PARAM2:\n    type: number\n    description: Another parameter\n    required: false\n    default: 5\n\n# Optional settings\ntimeout: 60000                     # Timeout in milliseconds\nworking-directory: ~/path          # Working directory\nplatforms: [windows, linux, macos] # Supported platforms\ntags: [tag1, tag2, read]           # Categories and security tags\nignore-errors: false               # Whether to continue if a step fails\ninput: \u0022{INPUT_PARAM}\u0022             # Data to pass via stdin\n\u0060\u0060\u0060\n\n### Single-Step vs Multi-Step Tools\n\nTools can be defined in two ways:\n\n1. **Single-Step Tools**:\n   \u0060\u0060\u0060yaml\n   name: simple-tool\n   description: A simple tool\n   bash: command {PARAM}\n   parameters:\n     PARAM:\n       type: string\n       description: A parameter\n   \u0060\u0060\u0060\n\n2. **Multi-Step Tools**:\n   \u0060\u0060\u0060yaml\n   name: multi-step-tool\n   description: A tool with multiple steps\n   steps:\n     - name: step1\n       bash: command1 {PARAM}\n     - name: step2\n       bash: command2\n       run-condition: \u0022{step1.exit-code} == 0\u0022\n   parameters:\n     PARAM:\n       type: string\n       description: A parameter\n   \u0060\u0060\u0060\n\n### Parameter Definition\n\nParameters define inputs that can be substituted into commands:\n\n\u0060\u0060\u0060yaml\nparameters:\n  NAME:\n    type: string                # Parameter type\n    description: Description    # Human-readable description\n    required: true              # Whether parameter is required\n    default: Default value      # Default value if not provided\n\u0060\u0060\u0060\n\nParameter types include:\n- \u0060string\u0060: Text values\n- \u0060number\u0060: Numeric values\n- \u0060boolean\u0060: True/false values\n- \u0060array\u0060: List of values\n\n### Tags and Platform Support\n\nTools can specify which platforms they work on and include tags for categorization:\n\n\u0060\u0060\u0060yaml\nplatforms: [windows, linux, macos]  # Only include platforms the tool works on\ntags: [category1, category2, read]  # Tags for categorization and security\n\u0060\u0060\u0060\n\nThe security tags (\u0060read\u0060, \u0060write\u0060, \u0060run\u0060) are recommended but optional. If no security tag is present, the tool is considered high-risk and requires explicit approval.\n\n### Error Handling\n\nTools can specify how to handle errors:\n\n\u0060\u0060\u0060yaml\nignore-errors: false   # Whether to continue even if the tool fails\n\u0060\u0060\u0060\n\nFor multi-step tools, each step can have its own error handling:\n\n\u0060\u0060\u0060yaml\nsteps:\n  - name: step1\n    bash: command\n    continue-on-error: true\n\u0060\u0060\u0060\n\n## Command Line Interface\n\n### Tool Management Commands\n\n\u0060\u0060\u0060\ncycod tool add NAME [options]\ncycod tool get NAME [--scope]\ncycod tool list [--scope]\ncycod tool remove NAME [--scope]\n\u0060\u0060\u0060\n\n### Tool Add Command\n\n\u0060\u0060\u0060\ncycod tool add NAME --description \u0022DESC\u0022 [options]\n\u0060\u0060\u0060\n\nOptions:\n- \u0060--description \u0022DESC\u0022\u0060 - Human-readable description of the tool (required)\n- \u0060--bash \u0022COMMAND\u0022\u0060 - Bash command to execute\n- \u0060--cmd \u0022COMMAND\u0022\u0060 - Windows CMD command to execute\n- \u0060--pwsh \u0022COMMAND\u0022\u0060 - PowerShell command to execute\n- \u0060--run \u0022COMMAND\u0022\u0060 - Direct command to execute\n- \u0060--script \u0022SCRIPT\u0022\u0060 - Script content (use with --shell)\n- \u0060--shell \u0022SHELL\u0022\u0060 - Shell to use with script\n\n- \u0060--step NAME \u0022COMMAND\u0022\u0060 - Define a step (can be used multiple times for multi-step tools)\n  - \u0060--continue-on-error\u0060 - Continue to next step even if this step fails\n  - \u0060--run-condition \u0022CONDITION\u0022\u0060 - Condition for when to run this step\n\n- \u0060--parameter NAME \u0022DESC\u0022\u0060 [param-options] - Define a parameter (multiple allowed)\n  - \u0060type=string|number|boolean|array\u0060 - Parameter type\n  - \u0060required=true|false\u0060 - Whether parameter is required\n  - \u0060default=VALUE\u0060 - Default value if not provided\n\n- \u0060--platform windows|linux|macos\u0060 - Supported platform (multiple allowed)\n- \u0060--tag TAG\u0060 - Tag for categorization (multiple allowed)\n- \u0060--timeout MILLISECONDS\u0060 - Default timeout\n- \u0060--working-directory DIR\u0060 - Working directory\n- \u0060--input \u0022INPUT\u0022\u0060 - Data to pass via stdin\n- \u0060--scope local|user|global\u0060 - Scope for the tool (default: local)\n\nExample:\n\u0060\u0060\u0060\ncycod tool add weather-lookup \\\n  --description \u0022Get weather for a location\u0022 \\\n  --bash \u0022curl -s \u0027wttr.in/{LOCATION}?format={FORMAT}\u0027\u0022 \\\n  --parameter LOCATION \u0022City or airport code\u0022 required=true \\\n  --parameter FORMAT \u0022Output format\u0022 default=3 \\\n  --tag weather --tag api --tag read \\\n  --timeout 10000\n\u0060\u0060\u0060\n\n### Tool Get Command\n\n\u0060\u0060\u0060\ncycod tool get NAME [--scope]\n\u0060\u0060\u0060\n\nOptions:\n- \u0060--scope\u0060 - Scope to search in (local, user, global, any)\n\nExample:\n\u0060\u0060\u0060\ncycod tool get weather-lookup\ncycod tool get weather-lookup --scope user\n\u0060\u0060\u0060\n\n### Tool List Command\n\n\u0060\u0060\u0060\ncycod tool list [--scope]\n\u0060\u0060\u0060\n\nOptions:\n- \u0060--scope\u0060 - Scope to list from (local, user, global, any)\n\nExample:\n\u0060\u0060\u0060\ncycod tool list\ncycod tool list --scope global\n\u0060\u0060\u0060\n\n### Tool Remove Command\n\n\u0060\u0060\u0060\ncycod tool remove NAME [--scope]\n\u0060\u0060\u0060\n\nOptions:\n- \u0060--scope\u0060 - Scope to remove from (local, user, global, any)\n\nExample:\n\u0060\u0060\u0060\ncycod tool remove weather-lookup\ncycod tool remove weather-lookup --scope user\n\u0060\u0060\u0060\n\n## Parameter Substitution\n\n### Parameter References\n\nParameters are referenced in commands using curly braces:\n\n\u0060\u0060\u0060yaml\nbash: command {PARAM1} {PARAM2}\n\u0060\u0060\u0060\n\n### Step Output References\n\nIn multi-step tools, the output of previous steps can be referenced:\n\n\u0060\u0060\u0060yaml\nsteps:\n  - name: step1\n    bash: command {PARAM}\n  - name: step2\n    bash: another-command {step1.output}\n\u0060\u0060\u0060\n\nAdditional properties available for steps:\n- \u0060{step1.output}\u0060 - Standard output from the step\n- \u0060{step1.error}\u0060 - Standard error from the step\n- \u0060{step1.exit-code}\u0060 - Exit code from the step\n\n### Default Values\n\nParameters with default values don\u0027t need to be provided when calling the tool:\n\n\u0060\u0060\u0060yaml\nparameters:\n  FORMAT:\n    type: string\n    description: Output format\n    default: \u00223\u0022\n\u0060\u0060\u0060\n\n## Security Model\n\n### Integration with Auto-Approve/Auto-Deny\n\nCustom tools integrate with CYCOD\u0027s existing auto-approve/auto-deny system:\n\n\u0060\u0060\u0060\ncycod --auto-approve tool:read      # Auto-approve all tools tagged as \u0027read\u0027\ncycod --auto-approve tool:weather   # Auto-approve all tools tagged as \u0027weather\u0027\n\u0060\u0060\u0060\n\n### Security Tags\n\nTools should be tagged with one or more security tags to indicate their risk level:\n- \u0060read\u0060: Tools that only read data, no modification or execution\n- \u0060write\u0060: Tools that modify files or data\n- \u0060run\u0060: Tools that execute other commands or scripts\n\nIf no security tag is provided, the tool is considered high-risk and requires explicit approval.\n\n## Help Text\n\n### Tool Help Command\n\n\u0060\u0060\u0060\ncycod help tool\n\u0060\u0060\u0060\n\nOutput:\n\u0060\u0060\u0060\nCYCOD TOOL COMMANDS\n\n  These commands allow you to manage custom tools for CYCOD.\n\nUSAGE: cycod tool list [--scope]\n   OR: cycod tool get TOOL_NAME [--scope]\n   OR: cycod tool add TOOL_NAME [options]\n   OR: cycod tool remove TOOL_NAME [--scope]\n\nOPTIONS\n\n  SCOPE OPTIONS\n\n    --global, -g    Manage tools from global scope (all users)\n    --user, -u      Manage tools from user scope (current user)\n    --local, -l     Manage tools from local scope (default for most commands)\n    --any, -a       Manage tools from all scopes (default for \u0027list\u0027 and \u0027get\u0027 commands)\n\nCOMMANDS\n\n    list            List all available tools\n    get             Display the details of a specific tool\n    add             Create a new tool\n    remove          Delete a tool\n\nSEE ALSO\n\n  cycod help tool list\n  cycod help tool get\n  cycod help tool add\n  cycod help tool remove\n  cycod help tools\n\u0060\u0060\u0060\n\n### Tool Add Help\n\n\u0060\u0060\u0060\ncycod help tool add\n\u0060\u0060\u0060\n\nOutput:\n\u0060\u0060\u0060\nCYCOD TOOL ADD\n\n  Adds a new custom tool for CYCOD.\n  \nUSAGE: cycod tool add TOOL_NAME --description \u0022DESCRIPTION\u0022 [options]\n\nOPTIONS\n\n  TOOL DEFINITION\n\n    --description \u0022DESC\u0022            Human-readable description of the tool (required)\n    \n    --bash \u0022COMMAND\u0022                Define a Bash command to execute\n    --cmd \u0022COMMAND\u0022                 Define a Windows CMD command to execute\n    --pwsh \u0022COMMAND\u0022                Define a PowerShell command to execute\n    --run \u0022COMMAND\u0022                 Define a direct command to execute\n    --script \u0022SCRIPT\u0022               Define script content (use with --shell)\n    --shell \u0022SHELL\u0022                 Shell to use with script\n\n  MULTI-STEP TOOLS\n\n    --step NAME \u0022COMMAND\u0022           Define a step (can be used multiple times)\n      --continue-on-error           Continue to next step even if this step fails\n      --run-condition \u0022CONDITION\u0022   Condition for when to run this step\n\n  PARAMETERS\n\n    --parameter NAME \u0022DESC\u0022 [options]  Define a parameter (can be used multiple times)\n      type=string|number|boolean|array  Parameter type\n      required=true|false               Whether parameter is required\n      default=VALUE                     Default value if not provided\n\n  ADDITIONAL OPTIONS\n\n    --platform PLATFORM             Supported platform (windows|linux|macos)\n    --tag TAG                       Tag for categorization\n    --timeout MILLISECONDS          Default timeout\n    --working-directory DIR         Working directory\n    --input \u0022INPUT\u0022                 Data to pass via stdin\n\n  SCOPE OPTIONS\n\n    --global, -g                    Add tool to global scope (all users)\n    --user, -u                      Add tool to user scope (current user)\n    --local, -l                     Add tool to local scope (current directory, default)\n\nEXAMPLES\n\n  EXAMPLE 1: Create a simple weather lookup tool\n\n    cycod tool add weather-lookup --description \u0022Get weather for a location\u0022 \\\n      --bash \u0022curl -s \u0027wttr.in/{LOCATION}?format={FORMAT}\u0027\u0022 \\\n      --parameter LOCATION \u0022City or airport code\u0022 required=true \\\n      --parameter FORMAT \u0022Output format\u0022 default=3 \\\n      --tag weather --tag api --tag read\n\n  EXAMPLE 2: Create a multi-step tool that processes data\n\n    cycod tool add process-data --description \u0022Process data from a file\u0022 \\\n      --step fetch \u0022curl -s \u0027{URL}\u0027 \u003E data.json\u0022 \\\n      --step process \u0022jq \u0027.items\u0027 data.json\u0022 \\\n      --step cleanup \u0022rm data.json\u0022 \\\n      --parameter URL \u0022URL to fetch data from\u0022 required=true \\\n      --tag api --tag read\n\nSEE ALSO\n\n  cycod help tool\n  cycod help tools\n\u0060\u0060\u0060\n\n### Tool Get Help\n\n\u0060\u0060\u0060\ncycod help tool get\n\u0060\u0060\u0060\n\nOutput:\n\u0060\u0060\u0060\nCYCOD TOOL GET\n\n  Display the details of a specific tool.\n\nUSAGE: cycod tool get TOOL_NAME [--scope]\n\nOPTIONS\n\n  SCOPE OPTIONS\n\n    --global, -g    Look for the tool in global scope (all users)\n    --user, -u      Look for the tool in user scope (current user)\n    --local, -l     Look for the tool in local scope (current directory)\n    --any, -a       Look for the tool in any scope (default)\n\nEXAMPLES\n\n  EXAMPLE 1: Get a tool from any scope\n\n    cycod tool get weather-lookup\n\n  EXAMPLE 2: Get a tool from user scope\n\n    cycod tool get weather-lookup --user\n\nSEE ALSO\n\n  cycod help tool\n  cycod help tools\n\u0060\u0060\u0060\n\n### Tool List Help\n\n\u0060\u0060\u0060\ncycod help tool list\n\u0060\u0060\u0060\n\nOutput:\n\u0060\u0060\u0060\nCYCOD TOOL LIST\n\n  List all available tools across all scopes or in a specific scope.\n\nUSAGE: cycod tool list [--scope]\n\nOPTIONS\n\n  SCOPE OPTIONS\n\n    --global, -g    List only global tools (all users)\n    --user, -u      List only user tools (current user)\n    --local, -l     List only local tools (current directory)\n    --any, -a       List tools from all scopes (default)\n\nEXAMPLES\n\n  EXAMPLE 1: List all tools from all scopes\n\n    cycod tool list\n\n  EXAMPLE 2: List only user tools\n\n    cycod tool list --user\n\nSEE ALSO\n\n  cycod help tool\n  cycod help tools\n\u0060\u0060\u0060\n\n### Tool Remove Help\n\n\u0060\u0060\u0060\ncycod help tool remove\n\u0060\u0060\u0060\n\nOutput:\n\u0060\u0060\u0060\nCYCOD TOOL REMOVE\n\n  Delete a tool from a specific scope.\n\nUSAGE: cycod tool remove TOOL_NAME [--scope]\n\nOPTIONS\n\n  SCOPE OPTIONS\n\n    --global, -g    Delete the tool from global scope (all users)\n    --user, -u      Delete the tool from user scope (current user)\n    --local, -l     Delete the tool from local scope (current directory)\n    --any, -a       Delete the tool from the first scope it\u0027s found in (default)\n\nEXAMPLES\n\n  EXAMPLE 1: Delete a tool from any scope\n\n    cycod tool remove weather-lookup\n\n  EXAMPLE 2: Delete a tool from user scope\n\n    cycod tool remove weather-lookup --user\n\nSEE ALSO\n\n  cycod help tool\n  cycod help tools\n\u0060\u0060\u0060\n\n## Examples\n\n### Simple Single-Step Tool Example\n\n\u0060\u0060\u0060yaml\nname: weather-lookup\ndescription: Get weather for a location\n\nbash: curl -s \u0027wttr.in/{LOCATION}?format={FORMAT}\u0027\n\nparameters:\n  LOCATION:\n    type: string\n    description: City or airport code\n    required: true\n  FORMAT:\n    type: string\n    description: Output format\n    required: false\n    default: \u00223\u0022\n\ntimeout: 10000\ntags: [weather, api, read]\nplatforms: [windows, linux, macos]\n\u0060\u0060\u0060\n\n### Multi-Step Tool with Output Capturing\n\n\u0060\u0060\u0060yaml\nname: github-commit-stats\ndescription: Get statistics for recent commits in a GitHub repository\n\nsteps:\n  - name: fetch-commits\n    bash: curl -s \u0022https://api.github.com/repos/{OWNER}/{REPO}/commits?per_page=10\u0022\n    \n  - name: count-authors\n    bash: echo \u0027{fetch-commits.output}\u0027 | jq \u0027group_by(.commit.author.name) | map({author: .[0].commit.author.name, count: length}) | sort_by(.count) | reverse\u0027\n    \n  - name: format-output\n    bash: echo \u0027{count-authors.output}\u0027 | jq -r \u0027.[] | \u0022\\(.author): \\(.count) commits\u0022\u0027\n\nparameters:\n  OWNER:\n    type: string\n    description: Repository owner username\n    required: true\n  REPO:\n    type: string\n    description: Repository name\n    required: true\n\ntags: [github, api, read]\ntimeout: 15000\n\u0060\u0060\u0060\n\n### Tool with Conditional Steps\n\n\u0060\u0060\u0060yaml\nname: github-repo-clone\ndescription: Clone a GitHub repository with fallback methods\n\nsteps:\n  - name: try-https\n    bash: git clone https://github.com/{OWNER}/{REPO}.git {OUTPUT_DIR}\n    continue-on-error: true\n  \n  - name: try-ssh\n    bash: git clone git@github.com:{OWNER}/{REPO}.git {OUTPUT_DIR}\n    run-condition: \u0022{try-https.exit-code} != 0\u0022\n    continue-on-error: true\n  \n  - name: report-status\n    bash: |\n      if [ -d \u0022{OUTPUT_DIR}/.git\u0022 ]; then\n        echo \u0022Successfully cloned {OWNER}/{REPO}\u0022\n      else\n        echo \u0022Failed to clone {OWNER}/{REPO} using both HTTPS and SSH\u0022\n        exit 1\n      fi\n\nparameters:\n  OWNER:\n    type: string\n    description: Repository owner username\n    required: true\n  REPO:\n    type: string\n    description: Repository name\n    required: true\n  OUTPUT_DIR:\n    type: string\n    description: Output directory for the clone\n    default: \u0022{REPO}\u0022\n\ntags: [github, git, clone, write]\nplatforms: [windows, linux, macos]\n\u0060\u0060\u0060\n\n### Tool with Complex Parameter Handling\n\n\u0060\u0060\u0060yaml\nname: search-code\ndescription: Search for patterns in code files\n\nbash: grep -r {CASE_SENSITIVE} {WHOLE_WORD} \u0022{PATTERN}\u0022 {DIRECTORY} --include=\u0022*.{FILE_TYPE}\u0022\n\nparameters:\n  PATTERN:\n    type: string\n    description: Pattern to search for\n    required: true\n  \n  DIRECTORY:\n    type: string\n    description: Directory to search in\n    default: \u0022.\u0022\n  \n  FILE_TYPE:\n    type: string\n    description: File extension to search in\n    default: \u0022*\u0022\n  \n  CASE_SENSITIVE:\n    type: boolean\n    description: Whether to use case-sensitive search\n    default: false\n    # This will be converted to -i for false or empty string for true\n  \n  WHOLE_WORD:\n    type: boolean\n    description: Whether to search for whole words only\n    default: false\n    # This will be converted to -w for true or empty string for false\n\ntags: [search, code, read]\nplatforms: [windows, linux, macos]\n\u0060\u0060\u0060"}